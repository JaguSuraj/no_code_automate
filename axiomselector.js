!function(g){var I={};function C(A){if(I[A])return I[A].exports;var t=I[A]={i:A,l:!1,exports:{}};return g[A].call(t.exports,t,t.exports,C),t.l=!0,t.exports}C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:A})},C.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var t in g)C.d(A,t,function(I){return g[I]}.bind(null,t));return A},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,"a",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p="",C(C.s=808)}({13:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AxiomApiHelper\", function() { return AxiomApiHelper; });\n/* harmony import */ var _classes_models_RunningData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(20);\n/* harmony import */ var _classes_models_RunningData__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_classes_models_RunningData__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _axiombuilder_models_WidgetsNestable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(35);\n/* harmony import */ var _axiombuilder_models_WidgetsNestable__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_axiombuilder_models_WidgetsNestable__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n/**\n * Helper functions for running axioms\n *\n */\nclass AxiomApiHelper {\n\n    /**\n     * Transpose table data - swapping rows and columns\n     * @param {*} array a 2D array e.g. [[item1a, item1b], [item2a, item2b]]\n     * @example AxiomApiHelper.transpose([[item1a, item1b], [item2a, item2b]])\n     * @returns a 2D array e.g. [[item1a, item2a], [item1b, item2b]]\n     */\n    static transpose(array) {\n        let subArrayLength = 0\n        let newArray = []\n        for (let i = 0; i < array.length; i++) {\n            if (array[i].length > subArrayLength) {\n                subArrayLength = array[i].length\n            }\n        }\n        for (let i = 0; i < subArrayLength; i++) {\n            newArray.push([]);\n        }\n        for (let i = 0; i < array.length; i++) {\n            for(let j = 0; j < subArrayLength; j++) {\n                let jn = parseInt(j)\n                newArray[jn].push(array[i][jn])\n            }\n        }\n\n        return newArray;\n    }\n\n    /** \n    *\n    * Introduce a delay with a promise\n    * @param time - The time in milliseconds to delay\n    *\n    */\n\n    static delay(time, v) {\n        return new Promise(function(resolve) { \n            setTimeout(resolve.bind(null, v), time)\n        });\n     }\n\n    /**\n     * Convert a numerical index value into the column letter format\n     * used by spreadsheet applications i.e. 0 => 'A', 26 => 'AA', 30 => 'AE'\n     * @param {*} index the index of the column you want the corresponding column letter for e.g. 0\n     * @example AxiomApiHelper.getColLetter(30)\n     * @result a string representing the column in a spreadsheet that corresponds to the numerical index given e.g. 'AE'\n     */\n    static getColLetter(index) {\n        let ALPHA = ['!', 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n\n        let base = ALPHA.length-1\n        let n = index\n\n        let done = false\n        let res = []\n        let colLetters = ''\n\n        while (!done) {\n            let a = (n / base)\n            let remainder = (n % base)\n            if (res.length == 0) {\n                remainder += 1\n            }\n            res.push(remainder)\n            colLetters = ALPHA[remainder] + colLetters\n            n = Math.round(a - (remainder / base))\n            done = (n == 0)\n        }\n\n        return colLetters\n    }\n\n    /**\n     * Convert the column letter format value into a numerical index\n     * used by spreadsheet applications i.e. 'A' => 0, 'AA' => 26, 'AE' => 30\n     * @param {*} colLetters\n     * @example AxiomApiHelper.getColIndex('AE')\n     * @returns a numerical index e.g. 30\n     */\n    static getColIndex(colLetters) {\n        if (!colLetters) {\n            return -1\n        }\n        colLetters = colLetters.trim()\n        if (parseInt(colLetters, 10) >= 0) {\n            return colLetters\n        }\n        let s_numbers = [0];\n        for (let i = 0; i < colLetters.length; i++) {\n            let pow = Math.pow(26, colLetters.length - i - 1)\n            s_numbers[i] = (colLetters[i].charCodeAt(0) - 64) * pow\n        }\n        return s_numbers.reduce((accumulator, a) => {return accumulator + a}) - 1\n    }\n\n    /**\n     * Check whether a 2D array contains a 1D array\n     *\n     * usefull for checking whether row data exists in table data\n     *\n     * If columns are provided as a param then\n     * the arrays will only be compared by the contents of those columns\n     * and not the entire contents of each array\n     * @param {*} array1 a single dimensional array e.g. [\"A\", \"Example A\"]\n     * @param {*} array2 a two dimensional array e.g. [[\"A\", \"Example A\"], [\"B\", \"Example B\"]]\n     * @param {*} columns an array of column letters to compare by\n     * @example AxiomApiHelper.inArray([\"A\", \"Example A\"], [[\"A\", \"Example A\"], [\"B\", \"Example B\"]])\n     * @returns a boolean value e.g. true\n     */\n    static inArray(array1, array2, columns = null) {\n        let found = false\n\n        for (let array of array2) {\n            if (this.matchingArrays(array, array1, columns)) {\n                found = true\n            }\n        }\n        return found\n    }\n\n    static colString2indexArray(cols) {\n        let indeces = []\n        for (let col of cols.split(',')) {\n            col = col.trim()\n            if (Number.isInteger(col)) {\n                col = col -1\n            } else {\n                if (/[A-Za-z]/.test(col)) {\n                    if (/[a-z]/.test(col)) {\n                        col = col.toUpperCase()\n                    }\n                    col = this.getColIndex(col)\n                } else {\n                    col = Number(col) - 1\n                }\n            }\n            if (col > -1){\n                indeces.push(col)\n            }\n        }\n\n        return indeces\n    }\n\n    /**\n     * Checks whether two single dimensional arrays match - for comparing whether two rows of data match\n     *\n     * If columns are provided as a param then\n     * the arrays will only be compared by the contents of those columns\n     * and not the entire contents of each array\n     * @param {*} array1 the first array to compare\n     * @param {*} array2 the second array to compare against\n     * @param {*} columns an array of columns letters to compare within each array e.g. ['A','D']\n     * @example AxiomApiHelper.matchingArrays([0,0,0,0], [0,2,1,0], ['A','D'])\n     * @return a boolean value e.g. true\n     */\n    static matchingArrays(array1, array2, columns = null) {\n        let singleDimension = true\n        if (array1.length != array2.length) {\n            return false\n        }\n        if (Array.isArray(array1) != Array.isArray(array2)) {\n            return false\n        } else {\n            if (Array.isArray(array1)) {\n                singleDimension = false\n            }\n        }\n        let matching = true\n\n        if (Array.isArray(columns) && columns.length > 0) {\n        } else {\n            columns = []\n            let tableWidth = (array1.length > array2.length) ? array1.length : array2.length\n            for (let i = 0; i < tableWidth; i ++) {\n                columns.push(this.getColLetter(i+1))\n            }\n        }\n\n        for (let colLetters of columns) {\n            let i = this.getColIndex(colLetters)\n\n            if (array1[i] != array2[i]) {\n                matching = false\n            }\n        }\n\n        return matching\n    }\n\n    static clone(array) {\n        if (!array) {\n            return [[\"\"]]\n        }\n        let cloned = []\n        if (Array.isArray(array[0])) {\n            for (let item of array) {\n                cloned[array.indexOf(item)] = this.clone(item)\n            }\n        } else {\n            for (let key of Object.keys(array)) {\n                cloned[key] = array[key].valueOf()\n            }\n        }\n        return cloned\n    }\n\n    static getRoute(url) {\n        let domain = url\n        if (/\\/\\//.test(url)) {\n            var split = url.split('//')\n            var protocol = split[0]\n            domain = split[split.length -1]\n            var domainSegs = domain.split('.')\n            if (domainSegs.length > 2) {\n                var net = domainSegs.shift()\n            }\n            let route = domainSegs.pop()\n            route = route.split('/')\n            route.pop()\n            domain = domainSegs.join('.') + '.' + route.join('/')\n        }\n        return domain\n    }\n\n    /**\n     * Send a message to the tab window.\n     */\n    static sendTabMessage(action, params) {\n        return new Promise((resolve, reject) => {\n            let rd = new _classes_models_RunningData__WEBPACK_IMPORTED_MODULE_0___default.a()\n            rd.load().then(() => {\n                params.action = action\n                chrome.tabs.sendMessage(rd.states[0].tab_id, params, response => {\n                    if (chrome.runtime.hasOwnProperty(\"lastError\")) {\n                        switch (action) {\n                            case \"display_message\":\n                                resolve('')\n                                break\n                            default:\n                                resolve({error: {message: chrome.runtime.lastError.message}})\n                                break\n                        }\n                    } else {\n                        resolve(response)\n                    }\n                })\n            })\n        })\n    }\n\n    static isValidJson(str) {\n        try {\n            const obj = JSON.parse(str)\n\n            if (obj && typeof obj === 'object') {\n                return true\n            }\n        } catch (e) {\n        }\n\n        return false\n    }\n\n    static buildSelectorArray(selector, resultType) {\n        let selectors = []\n        let resultTypes = []\n        if (!Array.isArray(selector)) {\n            if (typeof selector === 'string') {\n                selectors = selector.split(',')// TODO - replace with split\n                let trimmed = []\n                for (let s of selectors) {\n                    trimmed.push(s.trim())\n                    if (typeof resultType === 'string') {\n                        resultTypes.push(resultType)\n                    } else {\n                        resultTypes.push('textContent')\n                    }\n                }\n                selectors = trimmed\n            }\n        } else {\n            if (selector[0].resultType !== undefined) {\n                resultTypes = selector.map(s => {\n                    return s.resultType\n                })\n                selectors = selector.map(s => {\n                    return s.selector\n                })\n            }\n        }\n        return {selectors, resultTypes}\n    }\n\n    static applyToIframes(callback) {\n        jQuery('iframe').each((index, el) => {\n            const content = jQuery(el).contents()\n            if (content && content.length) {\n                callback(index, content)\n            }\n        })\n    }\n\n    /**\n     * Extracts form data from an axiom / task object\n     * @param {} task \n     */\n    static extractFormData(task, keepDisabled = false) {\n        let formData = []\n        while (typeof task.data === 'string') {\n            task.data = JSON.parse(task.data)\n        }\n        // remove all disabled widgets from task before run.\n        // used `for in` to take the index\n        for (let wid in task.data.form) {\n            if(keepDisabled || !(task.data.form[wid].is_disable !== undefined && task.data.form[wid].is_disable === true)) {\n                formData.push(task.data.form[wid])\n            }\n        }\n        return formData\n    }\n\n    /**\n     * Loads the campaign cookie from the Axiom website, if one is set\n     */\n    static async getCampaign() {\n        return new Promise(resolve => {\n            chrome.cookies.getAll({name: \"axiom_ga_query_params\"}, res => {\n                if (res.length > 0) {\n                    const desiredCookie = res.filter(item => item.path === '/')[0]\n                    if (desiredCookie) {\n                        resolve(desiredCookie.value)\n                    } else {\n                        resolve(res[0].value)\n                    }\n                } else {\n                    resolve('')\n                }\n            })\n        })\n    }\n\n    static getStepNumbering(widgets, nestingData) {\n        if (!nestingData) {\n            const wn = new _axiombuilder_models_WidgetsNestable__WEBPACK_IMPORTED_MODULE_1__[\"WidgetsNestable\"]()\n            nestingData = wn.buildNestingData(widgets)\n        }\n        let parts = [0, 0, 0, 0, 0]\n        for (let windex in nestingData) {\n            if (!nestingData[windex].endingBlock) {\n                parts[nestingData[windex].indent]++\n            } else if (nestingData[windex-1] && nestingData[windex-1].indent > nestingData[windex].indent) {\n                parts[nestingData[windex-1].indent] = 0\n            }\n            widgets[windex].stepNumber = parts.slice(0, nestingData[windex].indent + 1).join('.')\n        }\n    }\n\n    static getTrimmedUrl(url) {\n        try {\n            let trimmed = url.trim().toLowerCase()\n            let urlObject = new URL(trimmed)\n\n            urlObject.hash = ''\n            urlObject.search = ''\n            urlObject.pathname = ''\n\n            return urlObject.toString()\n        } catch(e) {\n            return url\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n")},17:function(module,exports,__webpack_require__){"use strict";eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar CacheHandler = /** @class */ (function () {\n    function CacheHandler() {\n        this.data = {};\n        chrome.storage.local.set({ axiom_cache: [] });\n    }\n    CacheHandler.prototype.refresh = function (key, data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var k;\n            var _this = this;\n            return __generator(this, function (_a) {\n                this.data[key] = {\n                    expired: false,\n                    data: {}\n                };\n                for (k in data) {\n                    if (typeof data[k] !== \'function\') {\n                        this.data[key].data[k] = data[k];\n                    }\n                }\n                return [2 /*return*/, new Promise(function (resolve) {\n                        chrome.storage.local.set({ axiom_cache: _this.data }, function () {\n                            resolve();\n                        });\n                    })];\n            });\n        });\n    };\n    CacheHandler.prototype.retrieve = function (key, model) {\n        return __awaiter(this, void 0, Promise, function () {\n            var obj, k;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!this.data[key]) return [3 /*break*/, 2];\n                        return [4 /*yield*/, new Promise(function (resolve) {\n                                chrome.storage.local.get(\'axiom_cache\', function (res) {\n                                    _this.data = res.axiom_cache;\n                                    resolve();\n                                });\n                            })];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        try {\n                            obj = this.data[key];\n                            for (k in model) {\n                                if (typeof model[k] !== \'function\') {\n                                    model[k] = obj.data[k];\n                                }\n                            }\n                            return [2 /*return*/, true];\n                        }\n                        catch (e) {\n                            console.error(\'Error retrieving from cache for \' + key, e);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    CacheHandler.prototype.isExpired = function (key) {\n        if (this.data[key]) {\n            return this.data[key].expired;\n        }\n        return true;\n    };\n    CacheHandler.prototype.expire = function (key) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve) {\n                        chrome.storage.local.get(\'axiom_cache\', function (res) {\n                            _this.data = res.axiom_cache;\n                            if (!_this.data[key]) {\n                                _this.data[key] = {\n                                    expired: true\n                                };\n                            }\n                            else {\n                                if (_this.data[key].expired) {\n                                    resolve(true);\n                                }\n                                _this.data[key].expired = true;\n                            }\n                            chrome.storage.local.set({ axiom_cache: _this.data }, function () {\n                                resolve(true);\n                            });\n                        });\n                    })];\n            });\n        });\n    };\n    CacheHandler.prototype.clearAll = function () {\n        this.data = {};\n        chrome.storage.local.set({ axiom_cache: this.data });\n    };\n    return CacheHandler;\n}());\nvar CacheHandlerService = new CacheHandler();\nexports.default = CacheHandlerService;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n')},20:function(module,exports,__webpack_require__){"use strict";eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar CacheHandler_1 = __importDefault(__webpack_require__(17));\nvar AppChecker_1 = __webpack_require__(25);\nvar RunningState = /** @class */ (function () {\n    function RunningState() {\n        this.id = null;\n        this.running = false;\n        this.progress = 0;\n        this.locked = false;\n        this.state = \'ready\';\n        this.tab_id = null;\n        this.cloud = false;\n    }\n    return RunningState;\n}());\nvar RunningData = /** @class */ (function () {\n    function RunningData() {\n        this.states = [];\n    }\n    RunningData.prototype.store = function (skipEvent) {\n        if (skipEvent === void 0) { skipEvent = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                // Prune any running states that have gone dead\n                this.states = this.states.filter(function (state) { return state.id; });\n                return [2 /*return*/, new Promise(function (resolve) {\n                        chrome.storage.local.set({ running: { states: _this.states } }, function () { return __awaiter(_this, void 0, void 0, function () {\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        // Send message for UI to refresh any data it\'s holding\n                                        chrome.runtime.sendMessage({ action: \'load_running_data\', skipEvent: skipEvent });\n                                        return [4 /*yield*/, CacheHandler_1.default.expire(\'RuntimeModel\')];\n                                    case 1:\n                                        _a.sent();\n                                        resolve(null);\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                    })];\n            });\n        });\n    };\n    RunningData.prototype.load = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var appChecker, res, e_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, new Promise(function (resolve) {\n                            chrome.storage.local.get(\'running\', function (res) {\n                                if (res.running && res.running.states) {\n                                    _this.states = res.running.states;\n                                }\n                                else {\n                                    _this.states = [];\n                                }\n                                resolve(null);\n                            });\n                        })\n                        // Automatically filter out desktop states if the desktop app is off\n                    ];\n                    case 1:\n                        _a.sent();\n                        appChecker = new AppChecker_1.AppChecker();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, appChecker.getInstalledVersion()];\n                    case 3:\n                        res = _a.sent();\n                        if (!res.installed) {\n                            this.states = this.states.filter(function (state) { return state.cloud; });\n                        }\n                        return [3 /*break*/, 5];\n                    case 4:\n                        e_1 = _a.sent();\n                        this.states = this.states.filter(function (state) { return state.cloud; });\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RunningData.prototype.loadState = function (id) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, state;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.load()\n                        // Return a dead object if there are no running states\n                    ];\n                    case 1:\n                        _b.sent();\n                        // Return a dead object if there are no running states\n                        if (this.states.length === 0) {\n                            return [2 /*return*/, new RunningState()];\n                        }\n                        for (_i = 0, _a = this.states; _i < _a.length; _i++) {\n                            state = _a[_i];\n                            if (state.id === id) {\n                                return [2 /*return*/, state];\n                            }\n                        }\n                        return [2 /*return*/, new RunningState()];\n                }\n            });\n        });\n    };\n    RunningData.prototype.addState = function (id, state, cloud) {\n        if (cloud === void 0) { cloud = false; }\n        // See if there is an existing state\n        for (var _i = 0, _a = this.states; _i < _a.length; _i++) {\n            var st = _a[_i];\n            if (st.id === id) {\n                st.state = state;\n                return st;\n            }\n        }\n        var rs = new RunningState();\n        rs.id = id;\n        rs.state = state;\n        rs.cloud = cloud;\n        this.states.push(rs);\n        return rs;\n    };\n    RunningData.prototype.clearState = function (id) {\n        this.states = this.states.filter(function (state) { return state.id != id; });\n    };\n    RunningData.prototype.cloudStateCount = function () {\n        var count = 0;\n        for (var _i = 0, _a = this.states; _i < _a.length; _i++) {\n            var s = _a[_i];\n            if (s.cloud) {\n                count++;\n            }\n        }\n        return count;\n    };\n    RunningData.prototype.desktopStateCount = function () {\n        var count = 0;\n        for (var _i = 0, _a = this.states; _i < _a.length; _i++) {\n            var s = _a[_i];\n            if (!s.cloud) {\n                count++;\n            }\n        }\n        return count;\n    };\n    return RunningData;\n}());\nexports.default = RunningData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n')},25:function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * AppChecker\n * Deals with retrieving the status of the Puppeteer app - installed, running etc.\n */\nvar AppChecker = /** @class */ (function () {\n    function AppChecker() {\n    }\n    /**\n     * Check if server is currently online or out of action\n     * @return boolean True if running, False if not\n     */\n    AppChecker.prototype.serverOnline = function () {\n        return new Promise(function (resolve, reject) {\n            var a = new XMLHttpRequest();\n            a.onreadystatechange = function () {\n                if (a.readyState === a.HEADERS_RECEIVED) {\n                    a.abort();\n                    resolve(true);\n                }\n            };\n            try {\n                a.open("GET", "https://lar.axiom.ai/graphql");\n                a.send(null);\n            }\n            catch (e) {\n                resolve(false);\n            }\n        });\n    };\n    /**\n     * Launch the Desktop application using the axiomai protocol axiomai://\n     */\n    AppChecker.prototype.launchDesktopApp = function () {\n        chrome.tabs.create({ url: "axiomai://run" });\n    };\n    /**\n     * Get the installed version of Axiom\n     * @return string The version number\n     */\n    AppChecker.prototype.launchApplication = function () {\n        return new Promise(function (resolve, reject) {\n            var xhr = new XMLHttpRequest();\n            var testEndpoint = "http://localhost:3333/axiom/isrunning";\n            var currVersion = "";\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4 && xhr.status === 200) {\n                    currVersion = xhr.responseText;\n                    resolve({ installed: true, version: currVersion });\n                }\n                else if (xhr.readyState === 4) {\n                    reject({ installed: false, version: "" });\n                }\n            };\n            xhr.onerror = function (e) {\n                reject({ installed: false, version: "" });\n            };\n            try {\n                xhr.open("GET", testEndpoint, true);\n                xhr.timeout = 1000;\n                xhr.send();\n            }\n            catch (e) {\n                reject({ installed: false, version: "" });\n            }\n        });\n    };\n    /**\n     * Get the installed version of Axiom\n     * @return string The version number\n     */\n    AppChecker.prototype.getInstalledVersion = function (autostart) {\n        if (autostart === void 0) { autostart = false; }\n        return new Promise(function (resolve, reject) {\n            var xhr = new XMLHttpRequest();\n            var testEndpoint = "http://localhost:3333/axiom/isrunning";\n            var currVersion = "";\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4 && xhr.status === 200) {\n                    currVersion = xhr.responseText;\n                    resolve({ installed: true, version: currVersion });\n                }\n                else if (xhr.readyState === 4) {\n                    reject({ installed: false, version: "" });\n                }\n            };\n            xhr.onerror = function (e) {\n                reject({ installed: false, version: "" });\n            };\n            try {\n                xhr.open("GET", testEndpoint, true);\n                xhr.timeout = 1000;\n                xhr.send();\n            }\n            catch (e) {\n                reject({ installed: false, version: "" });\n            }\n        });\n    };\n    /**\n     * Retrieve the current running status of the axiom app\n     * @returns Promise<{status: string}>\n     */\n    AppChecker.prototype.getRunStatus = function () {\n        return new Promise(function (resolve, reject) {\n            var xhr = new XMLHttpRequest();\n            var testEndpoint = "http://localhost:3333/axiom/getstatus";\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4 && xhr.status === 200) {\n                    resolve({ status: xhr.responseText });\n                }\n                else if (xhr.readyState === 4) {\n                    reject({ status: \'closed\' });\n                }\n            };\n            xhr.onerror = function (e) {\n                reject({ status: \'closed\' });\n            };\n            try {\n                xhr.open("GET", testEndpoint, true);\n                xhr.timeout = 1000;\n                xhr.send();\n            }\n            catch (e) {\n                reject({ status: \'closed\' });\n            }\n        });\n    };\n    return AppChecker;\n}());\nexports.AppChecker = AppChecker;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2xhc3Nlcy9zZXJ2aWNlcy9BcHBDaGVja2VyLnRzPzllMDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEFwcENoZWNrZXJcbiAqIERlYWxzIHdpdGggcmV0cmlldmluZyB0aGUgc3RhdHVzIG9mIHRoZSBQdXBwZXRlZXIgYXBwIC0gaW5zdGFsbGVkLCBydW5uaW5nIGV0Yy5cbiAqL1xudmFyIEFwcENoZWNrZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXBwQ2hlY2tlcigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgc2VydmVyIGlzIGN1cnJlbnRseSBvbmxpbmUgb3Igb3V0IG9mIGFjdGlvblxuICAgICAqIEByZXR1cm4gYm9vbGVhbiBUcnVlIGlmIHJ1bm5pbmcsIEZhbHNlIGlmIG5vdFxuICAgICAqL1xuICAgIEFwcENoZWNrZXIucHJvdG90eXBlLnNlcnZlck9ubGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBhID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICBhLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoYS5yZWFkeVN0YXRlID09PSBhLkhFQURFUlNfUkVDRUlWRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgYS5hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGEub3BlbihcIkdFVFwiLCBwcm9jZXNzLmVudi5HUkFQSFFMX1VSTCk7XG4gICAgICAgICAgICAgICAgYS5zZW5kKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBMYXVuY2ggdGhlIERlc2t0b3AgYXBwbGljYXRpb24gdXNpbmcgdGhlIGF4aW9tYWkgcHJvdG9jb2wgYXhpb21haTovL1xuICAgICAqL1xuICAgIEFwcENoZWNrZXIucHJvdG90eXBlLmxhdW5jaERlc2t0b3BBcHAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNocm9tZS50YWJzLmNyZWF0ZSh7IHVybDogXCJheGlvbWFpOi8vcnVuXCIgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGluc3RhbGxlZCB2ZXJzaW9uIG9mIEF4aW9tXG4gICAgICogQHJldHVybiBzdHJpbmcgVGhlIHZlcnNpb24gbnVtYmVyXG4gICAgICovXG4gICAgQXBwQ2hlY2tlci5wcm90b3R5cGUubGF1bmNoQXBwbGljYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB2YXIgdGVzdEVuZHBvaW50ID0gXCJodHRwOi8vbG9jYWxob3N0OjMzMzMvYXhpb20vaXNydW5uaW5nXCI7XG4gICAgICAgICAgICB2YXIgY3VyclZlcnNpb24gPSBcIlwiO1xuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQgJiYgeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJWZXJzaW9uID0geGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IGluc3RhbGxlZDogdHJ1ZSwgdmVyc2lvbjogY3VyclZlcnNpb24gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh7IGluc3RhbGxlZDogZmFsc2UsIHZlcnNpb246IFwiXCIgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoeyBpbnN0YWxsZWQ6IGZhbHNlLCB2ZXJzaW9uOiBcIlwiIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgeGhyLm9wZW4oXCJHRVRcIiwgdGVzdEVuZHBvaW50LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB4aHIudGltZW91dCA9IDEwMDA7XG4gICAgICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHsgaW5zdGFsbGVkOiBmYWxzZSwgdmVyc2lvbjogXCJcIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGluc3RhbGxlZCB2ZXJzaW9uIG9mIEF4aW9tXG4gICAgICogQHJldHVybiBzdHJpbmcgVGhlIHZlcnNpb24gbnVtYmVyXG4gICAgICovXG4gICAgQXBwQ2hlY2tlci5wcm90b3R5cGUuZ2V0SW5zdGFsbGVkVmVyc2lvbiA9IGZ1bmN0aW9uIChhdXRvc3RhcnQpIHtcbiAgICAgICAgaWYgKGF1dG9zdGFydCA9PT0gdm9pZCAwKSB7IGF1dG9zdGFydCA9IGZhbHNlOyB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB2YXIgdGVzdEVuZHBvaW50ID0gXCJodHRwOi8vbG9jYWxob3N0OjMzMzMvYXhpb20vaXNydW5uaW5nXCI7XG4gICAgICAgICAgICB2YXIgY3VyclZlcnNpb24gPSBcIlwiO1xuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQgJiYgeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJWZXJzaW9uID0geGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IGluc3RhbGxlZDogdHJ1ZSwgdmVyc2lvbjogY3VyclZlcnNpb24gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh7IGluc3RhbGxlZDogZmFsc2UsIHZlcnNpb246IFwiXCIgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoeyBpbnN0YWxsZWQ6IGZhbHNlLCB2ZXJzaW9uOiBcIlwiIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgeGhyLm9wZW4oXCJHRVRcIiwgdGVzdEVuZHBvaW50LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB4aHIudGltZW91dCA9IDEwMDA7XG4gICAgICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHsgaW5zdGFsbGVkOiBmYWxzZSwgdmVyc2lvbjogXCJcIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgY3VycmVudCBydW5uaW5nIHN0YXR1cyBvZiB0aGUgYXhpb20gYXBwXG4gICAgICogQHJldHVybnMgUHJvbWlzZTx7c3RhdHVzOiBzdHJpbmd9PlxuICAgICAqL1xuICAgIEFwcENoZWNrZXIucHJvdG90eXBlLmdldFJ1blN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHZhciB0ZXN0RW5kcG9pbnQgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6MzMzMy9heGlvbS9nZXRzdGF0dXNcIjtcbiAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgc3RhdHVzOiB4aHIucmVzcG9uc2VUZXh0IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoeyBzdGF0dXM6ICdjbG9zZWQnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHsgc3RhdHVzOiAnY2xvc2VkJyB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHhoci5vcGVuKFwiR0VUXCIsIHRlc3RFbmRwb2ludCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgeGhyLnRpbWVvdXQgPSAxMDAwO1xuICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdCh7IHN0YXR1czogJ2Nsb3NlZCcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEFwcENoZWNrZXI7XG59KCkpO1xuZXhwb3J0cy5BcHBDaGVja2VyID0gQXBwQ2hlY2tlcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n')},35:function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar WidgetNestable = /** @class */ (function () {\n    function WidgetNestable(indent, outdent, middent, widgetShow) {\n        if (middent === void 0) { middent = ''; }\n        if (widgetShow === void 0) { widgetShow = 'all'; }\n        this.indent = indent;\n        this.middent = middent;\n        this.outdent = outdent;\n        this.widgetShow = widgetShow;\n    }\n    return WidgetNestable;\n}());\nvar NestingData = /** @class */ (function () {\n    function NestingData(indent, startingBlock, endingBlock, midBlock) {\n        if (midBlock === void 0) { midBlock = false; }\n        this.indent = indent;\n        this.startingBlock = startingBlock;\n        this.midBlock = midBlock;\n        this.endingBlock = endingBlock;\n        this.outputShow = false;\n    }\n    return NestingData;\n}());\nexports.NestingData = NestingData;\nvar WidgetsNestable = /** @class */ (function () {\n    function WidgetsNestable() {\n        this.list = [\n            new WidgetNestable('WidgetBotCreate', 'WidgetBotComplete'),\n            new WidgetNestable('TemplateUIBot', 'TemplateUIBot'),\n            new WidgetNestable('WidgetIf', 'WidgetIfEnd'),\n            new WidgetNestable('WidgetTry', 'WidgetTryCatchEnd', 'WidgetCatch'),\n            new WidgetNestable('TemplateIfStatememt', 'TemplateIfStatement'),\n            new WidgetNestable('TemplateLoopThroughData', 'TemplateLoopThroughData'),\n            new WidgetNestable('TemplateTryCatch', 'TemplateTryCatch')\n        ];\n    }\n    WidgetsNestable.prototype.getWidgetList = function (widgets, windex) {\n        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n            var wn = _a[_i];\n            for (var i = windex - 1; i >= 0; i--) {\n                if (wn.indent === widgets[i].machine_name) {\n                    for (var j = windex; j < widgets.length; j++) {\n                        if (wn.outdent === widgets[j].machine_name) {\n                            return wn.widgetShow;\n                        }\n                    }\n                }\n            }\n        }\n        return 'all';\n    };\n    WidgetsNestable.prototype.getIndentWindex = function (widgets, windex, indent) {\n        var wn = this.list.filter(function (item) {\n            return item.indent === indent;\n        });\n        if (!wn || wn.length === 0) {\n            return -1;\n        }\n        for (var i = windex; i >= 0; i--) {\n            if (wn[0].indent === widgets[i].machine_name) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    WidgetsNestable.prototype.isNestable = function (widget) {\n        if (!widget) {\n            return 0;\n        }\n        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n            var item = _a[_i];\n            if (item.indent === widget.machine_name) {\n                return 1;\n            }\n            else if (item.outdent === widget.machine_name) {\n                return 2;\n            }\n            else if (item.middent === widget.machine_name) {\n                return 3;\n            }\n        }\n        return 0;\n    };\n    WidgetsNestable.prototype.buildNestingData = function (widgets) {\n        var indents = [];\n        var indent = 0;\n        for (var windex in widgets) {\n            var isNestable = this.isNestable(widgets[windex]);\n            switch (isNestable) {\n                case 0:\n                    indents[windex] = new NestingData(indent, false, false);\n                    break;\n                case 1:\n                    indents[windex] = new NestingData(indent, true, false);\n                    indent++;\n                    break;\n                case 2:\n                    indent--;\n                    indents[windex] = new NestingData(indent, false, true);\n                    break;\n                case 3:\n                    indents[windex] = new NestingData(indent, false, false, true);\n            }\n        }\n        return indents;\n    };\n    WidgetsNestable.prototype.nullNestingData = function () {\n        return new NestingData(0, false, false);\n    };\n    return WidgetsNestable;\n}());\nexports.WidgetsNestable = WidgetsNestable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXhpb21idWlsZGVyL21vZGVscy9XaWRnZXRzTmVzdGFibGUudHM/NTJjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBXaWRnZXROZXN0YWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXaWRnZXROZXN0YWJsZShpbmRlbnQsIG91dGRlbnQsIG1pZGRlbnQsIHdpZGdldFNob3cpIHtcbiAgICAgICAgaWYgKG1pZGRlbnQgPT09IHZvaWQgMCkgeyBtaWRkZW50ID0gJyc7IH1cbiAgICAgICAgaWYgKHdpZGdldFNob3cgPT09IHZvaWQgMCkgeyB3aWRnZXRTaG93ID0gJ2FsbCc7IH1cbiAgICAgICAgdGhpcy5pbmRlbnQgPSBpbmRlbnQ7XG4gICAgICAgIHRoaXMubWlkZGVudCA9IG1pZGRlbnQ7XG4gICAgICAgIHRoaXMub3V0ZGVudCA9IG91dGRlbnQ7XG4gICAgICAgIHRoaXMud2lkZ2V0U2hvdyA9IHdpZGdldFNob3c7XG4gICAgfVxuICAgIHJldHVybiBXaWRnZXROZXN0YWJsZTtcbn0oKSk7XG52YXIgTmVzdGluZ0RhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmVzdGluZ0RhdGEoaW5kZW50LCBzdGFydGluZ0Jsb2NrLCBlbmRpbmdCbG9jaywgbWlkQmxvY2spIHtcbiAgICAgICAgaWYgKG1pZEJsb2NrID09PSB2b2lkIDApIHsgbWlkQmxvY2sgPSBmYWxzZTsgfVxuICAgICAgICB0aGlzLmluZGVudCA9IGluZGVudDtcbiAgICAgICAgdGhpcy5zdGFydGluZ0Jsb2NrID0gc3RhcnRpbmdCbG9jaztcbiAgICAgICAgdGhpcy5taWRCbG9jayA9IG1pZEJsb2NrO1xuICAgICAgICB0aGlzLmVuZGluZ0Jsb2NrID0gZW5kaW5nQmxvY2s7XG4gICAgICAgIHRoaXMub3V0cHV0U2hvdyA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gTmVzdGluZ0RhdGE7XG59KCkpO1xuZXhwb3J0cy5OZXN0aW5nRGF0YSA9IE5lc3RpbmdEYXRhO1xudmFyIFdpZGdldHNOZXN0YWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXaWRnZXRzTmVzdGFibGUoKSB7XG4gICAgICAgIHRoaXMubGlzdCA9IFtcbiAgICAgICAgICAgIG5ldyBXaWRnZXROZXN0YWJsZSgnV2lkZ2V0Qm90Q3JlYXRlJywgJ1dpZGdldEJvdENvbXBsZXRlJyksXG4gICAgICAgICAgICBuZXcgV2lkZ2V0TmVzdGFibGUoJ1RlbXBsYXRlVUlCb3QnLCAnVGVtcGxhdGVVSUJvdCcpLFxuICAgICAgICAgICAgbmV3IFdpZGdldE5lc3RhYmxlKCdXaWRnZXRJZicsICdXaWRnZXRJZkVuZCcpLFxuICAgICAgICAgICAgbmV3IFdpZGdldE5lc3RhYmxlKCdXaWRnZXRUcnknLCAnV2lkZ2V0VHJ5Q2F0Y2hFbmQnLCAnV2lkZ2V0Q2F0Y2gnKSxcbiAgICAgICAgICAgIG5ldyBXaWRnZXROZXN0YWJsZSgnVGVtcGxhdGVJZlN0YXRlbWVtdCcsICdUZW1wbGF0ZUlmU3RhdGVtZW50JyksXG4gICAgICAgICAgICBuZXcgV2lkZ2V0TmVzdGFibGUoJ1RlbXBsYXRlTG9vcFRocm91Z2hEYXRhJywgJ1RlbXBsYXRlTG9vcFRocm91Z2hEYXRhJyksXG4gICAgICAgICAgICBuZXcgV2lkZ2V0TmVzdGFibGUoJ1RlbXBsYXRlVHJ5Q2F0Y2gnLCAnVGVtcGxhdGVUcnlDYXRjaCcpXG4gICAgICAgIF07XG4gICAgfVxuICAgIFdpZGdldHNOZXN0YWJsZS5wcm90b3R5cGUuZ2V0V2lkZ2V0TGlzdCA9IGZ1bmN0aW9uICh3aWRnZXRzLCB3aW5kZXgpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMubGlzdDsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciB3biA9IF9hW19pXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB3aW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGlmICh3bi5pbmRlbnQgPT09IHdpZGdldHNbaV0ubWFjaGluZV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSB3aW5kZXg7IGogPCB3aWRnZXRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod24ub3V0ZGVudCA9PT0gd2lkZ2V0c1tqXS5tYWNoaW5lX25hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd24ud2lkZ2V0U2hvdztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2FsbCc7XG4gICAgfTtcbiAgICBXaWRnZXRzTmVzdGFibGUucHJvdG90eXBlLmdldEluZGVudFdpbmRleCA9IGZ1bmN0aW9uICh3aWRnZXRzLCB3aW5kZXgsIGluZGVudCkge1xuICAgICAgICB2YXIgd24gPSB0aGlzLmxpc3QuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5pbmRlbnQgPT09IGluZGVudDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghd24gfHwgd24ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IHdpbmRleDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmICh3blswXS5pbmRlbnQgPT09IHdpZGdldHNbaV0ubWFjaGluZV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgV2lkZ2V0c05lc3RhYmxlLnByb3RvdHlwZS5pc05lc3RhYmxlID0gZnVuY3Rpb24gKHdpZGdldCkge1xuICAgICAgICBpZiAoIXdpZGdldCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMubGlzdDsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gX2FbX2ldO1xuICAgICAgICAgICAgaWYgKGl0ZW0uaW5kZW50ID09PSB3aWRnZXQubWFjaGluZV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpdGVtLm91dGRlbnQgPT09IHdpZGdldC5tYWNoaW5lX25hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0ubWlkZGVudCA9PT0gd2lkZ2V0Lm1hY2hpbmVfbmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgV2lkZ2V0c05lc3RhYmxlLnByb3RvdHlwZS5idWlsZE5lc3RpbmdEYXRhID0gZnVuY3Rpb24gKHdpZGdldHMpIHtcbiAgICAgICAgdmFyIGluZGVudHMgPSBbXTtcbiAgICAgICAgdmFyIGluZGVudCA9IDA7XG4gICAgICAgIGZvciAodmFyIHdpbmRleCBpbiB3aWRnZXRzKSB7XG4gICAgICAgICAgICB2YXIgaXNOZXN0YWJsZSA9IHRoaXMuaXNOZXN0YWJsZSh3aWRnZXRzW3dpbmRleF0pO1xuICAgICAgICAgICAgc3dpdGNoIChpc05lc3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBpbmRlbnRzW3dpbmRleF0gPSBuZXcgTmVzdGluZ0RhdGEoaW5kZW50LCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGluZGVudHNbd2luZGV4XSA9IG5ldyBOZXN0aW5nRGF0YShpbmRlbnQsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50Kys7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50LS07XG4gICAgICAgICAgICAgICAgICAgIGluZGVudHNbd2luZGV4XSA9IG5ldyBOZXN0aW5nRGF0YShpbmRlbnQsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpbmRlbnRzW3dpbmRleF0gPSBuZXcgTmVzdGluZ0RhdGEoaW5kZW50LCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmRlbnRzO1xuICAgIH07XG4gICAgV2lkZ2V0c05lc3RhYmxlLnByb3RvdHlwZS5udWxsTmVzdGluZ0RhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTmVzdGluZ0RhdGEoMCwgZmFsc2UsIGZhbHNlKTtcbiAgICB9O1xuICAgIHJldHVybiBXaWRnZXRzTmVzdGFibGU7XG59KCkpO1xuZXhwb3J0cy5XaWRnZXRzTmVzdGFibGUgPSBXaWRnZXRzTmVzdGFibGU7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n")},38:function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n')},404:function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar diff_match_patch_typescript_1 = __webpack_require__(820);\n/**\n * Generates a selector for the hierarchy of the target element from DOM\n */\nvar AttributeSelector = /** @class */ (function () {\n    function AttributeSelector() {\n    }\n    AttributeSelector.prototype.getSelector = function (el) {\n        var hierarchy = [];\n        var parentEl = el;\n        while (parentEl && parentEl.tagName.toLowerCase() !== 'html') {\n            var attr = (parentEl.tagName) ? parentEl.tagName.toLowerCase() : '';\n            var map = (parentEl.attributes) ? parentEl.attributes : [];\n            for (var _i = 0, map_1 = map; _i < map_1.length; _i++) {\n                var mp = map_1[_i];\n                if (!/click|style|\\-|href|src|on\\w+/g.test(mp.name)) {\n                    if (mp.name === 'class') {\n                        var classes = mp.value.split(' ');\n                        for (var _a = 0, classes_1 = classes; _a < classes_1.length; _a++) {\n                            var sClass = classes_1[_a];\n                            // Can remove the selectorgadget_ matcher from regex when we are done with the front-end part of the selector tool\n                            if (sClass !== '' && !/\\:|\\:\\/\\/|[\\(\\)\\$\\{\\}]|axiom-matched|axiom-suggested-group|axiom-link|axiom-download|axiom-sel-\\S+|selectorgadget_\\w+/g.test(sClass)) {\n                                attr += '[class~=\"' + sClass + '\"]';\n                            }\n                        }\n                    }\n                    else {\n                        if (!/value|data|\\[|\\]/gi.test(mp.name) && mp.value !== '' && !/\\:|\\:\\/\\//gi.test(mp.value)) {\n                            attr += '[' + mp.name + '=\"' + mp.value.replace(/\\\"/g, '\\\\\"') + '\"]';\n                        }\n                    }\n                }\n            }\n            hierarchy.unshift((attr === '') ? parentEl.tagName.toLowerCase() : attr);\n            parentEl = parentEl.parentElement;\n        }\n        // Useful sanity test - commented out because it shouldn't run in production\n        /*for (let h of hierarchy) {\n            try {\n                document.querySelectorAll(h)\n            } catch (e) {\n                console.error(\"failed querySelector: \", h)\n            }\n        }*/\n        return hierarchy.join(' > ');\n    };\n    /**\n     * Fetches the group selector out of a list of attribute selector\n     *\n     */\n    AttributeSelector.prototype.groupAttributeSelectors = function (selectors) {\n        var commonAncestor = selectors[0];\n        if (selectors.length > 1) {\n            var dmp = new diff_match_patch_typescript_1.DiffMatchPatch();\n            for (var i = 1; i < selectors.length; i++) {\n                var tempDiff = [];\n                tempDiff = dmp.diff_main(commonAncestor, selectors[i]);\n                commonAncestor = '';\n                for (var _i = 0, tempDiff_1 = tempDiff; _i < tempDiff_1.length; _i++) {\n                    var diff = tempDiff_1[_i];\n                    if (diff[0] === 0) {\n                        commonAncestor += diff[1];\n                    }\n                    if (commonAncestor !== '' && diff[0] !== 0) {\n                        break;\n                    }\n                }\n            }\n        }\n        var cleanedGroup = this.cleanupGroupingSelector(commonAncestor);\n        while (this.groupSelectorValidator(cleanedGroup, selectors) !== true) {\n            // trims away the last element from the selector\n            cleanedGroup = cleanedGroup.replace(/(\\s>\\s)(\\S*\\[\\S*\\]|\\S)$/gm, '');\n        }\n        return cleanedGroup;\n    };\n    /**\n     * Validates whether the group selector selects targetted elements\n     *\n     * @param groupSelector\n     * @param elementSelectors\n     */\n    AttributeSelector.prototype.groupSelectorValidator = function (groupSelector, elementSelectors) {\n        var groupEl = document.querySelectorAll(groupSelector);\n        var elementCount = elementSelectors.length;\n        var elementSelectorsString = elementSelectors.join(', ');\n        var elementsWithinGroup = 0;\n        groupEl.forEach(function (el) {\n            var items = el.querySelectorAll(elementSelectorsString);\n            if (items.length >= 0) {\n                elementsWithinGroup = items.length;\n            }\n        });\n        // Would work for cases where selections are made within a single list item\n        if (elementsWithinGroup >= elementCount) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Cleans selector string from incorrect string\n     *\n     * @param selector\n     */\n    AttributeSelector.prototype.cleanupGroupingSelector = function (selector) {\n        var cleanedSelector = selector;\n        var lastCleanedCss = null;\n        while (lastCleanedCss !== cleanedSelector) {\n            lastCleanedCss = cleanedSelector;\n            cleanedSelector = cleanedSelector\n                // removes empty class attributes\n                // [class~=\"\"]\n                .replace(/\\[class\\~\\=\\\"\\\"\\]/gm, '')\n                // removes ' > ' from end of string\n                .replace(/(\\s*\\>+\\s*)$/gm, '')\n                // removes empty attribute selections \n                // > [class~=\"xso\"] > \n                .replace(/(\\>\\s*\\[\\S*\\]\\s*\\>\\s*)/gm, '')\n                // removes dangling attributes at the end of string\n                //  > div[class~=\"\"\n                .replace(/(\\s*\\>\\s*\\S*\\[\\S*\\s*(?<!\\]))$/gm, '');\n        }\n        return cleanedSelector;\n    };\n    return AttributeSelector;\n}());\nexports.AttributeSelector = AttributeSelector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///404\n")},405:function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ScrapeHelper = /** @class */ (function () {\n    function ScrapeHelper() {\n        // This generates and stores the grouping selector when a preview is being built. Used later to visually highlight the grouping.\n        this.groupSelector = \"\";\n    }\n    ScrapeHelper.prototype.getPreview = function (doc, selectors, resultTypes) {\n        if (selectors && selectors.length > 0 && selectors[0] !== \"No valid path found.\" && /[^\\[\\]\"']/g.test(JSON.stringify(selectors))) {\n            var traces = this.mapTraces(doc, selectors, resultTypes);\n            if (Array.isArray(traces)) {\n                return traces;\n            }\n            else {\n                return [];\n            }\n        }\n        else {\n            return [[]];\n        }\n    };\n    ScrapeHelper.prototype.getDataV0210 = function (el, resultType) {\n        var data = '';\n        switch (resultType) { //TODO: review all result types\n            case 'outerHTML':\n                data = el.outerHTML;\n                break;\n            case 'innerHTML':\n                data = el.innerHTML;\n                if (!data) {\n                    data = el.outerHTML;\n                }\n                break;\n            case 'textContent':\n                data = '';\n                var text = el['innerText'];\n                if (typeof (text !== 'text')) {\n                    text = String(text);\n                }\n                if (text) {\n                    data = text.trim();\n                }\n                if (data === '') {\n                    try {\n                        var el2 = el;\n                        data = el2.value.trim();\n                    }\n                    catch (e) {\n                        // Stop execution from finishing here if there's an error\n                    }\n                }\n                break;\n            case 'link': //TODO: expand to match custom link result type in scraper\n            case 'href':\n                var linkEl = el;\n                if (!el.hasAttribute('href')) {\n                    var children = el.querySelectorAll('[href]');\n                    if (children && children.length) {\n                        linkEl = children[0];\n                    }\n                }\n                var href = null;\n                if (linkEl.hasAttribute('href')) {\n                    href = linkEl['href'];\n                }\n                data = (href !== null) ? href : '';\n                break;\n            case 'image':\n                var imgEl = el;\n                if (!el.hasAttribute('src') && !el.hasAttribute('srcset')) {\n                    var children = Array.from(el.querySelectorAll('[src]')).concat(Array.from(el.querySelectorAll('[srcset]')));\n                    if (children && children.length) {\n                        // According to Barlow, the last item is \"almost always\" correct, but this isn't really possible to determine without some extra UI\n                        imgEl = children[children.length - 1];\n                    }\n                }\n                var src = null;\n                if (imgEl.hasAttribute('src')) {\n                    src = imgEl['src'];\n                }\n                else if (imgEl.hasAttribute('srcset')) {\n                    src = imgEl['srcset'];\n                }\n                data = (src !== null) ? src : '';\n                break;\n        }\n        return data;\n    };\n    ScrapeHelper.prototype.getData = function (el, resultType) {\n        var scrapeLink = (resultType === \"link\" || resultType === 'href');\n        resultType = (scrapeLink) ? \"outerHTML\" : resultType;\n        var result = el[resultType];\n        if (scrapeLink) {\n            var i = 1;\n            var res = '';\n            while (res == \"\" && i <= 5) {\n                result = el[resultType];\n                var href = el['href'];\n                var link = void 0;\n                if (href && href.match(/(([A-Za-z]+[:][/][/])|([/][^\"' ])).[^\"' ]+[^\"' ]+([^\"' ])/)) {\n                    link = href;\n                }\n                else {\n                    var resultMatched = result.match(/href=[\"'](([A-Za-z]+[:][/][/])|([/][^\"' ])).[^\"' ]+[^\"' ]+([^\"' ])/);\n                    if (resultMatched) {\n                        link = resultMatched[0].substring(6);\n                    }\n                    else {\n                        var linkMatched = result.match(/[\"'](([A-Za-z]+[:][/][/])|([/][^\"' ])).[^\"' ]+[/]+[^\"' ]+([^\"' ])/);\n                        if (linkMatched) {\n                            link = linkMatched[0].substring(1);\n                        }\n                        else {\n                            res = \"\";\n                        }\n                    }\n                }\n                if (link) {\n                    if (link[0] == '/') {\n                        var url = window.location.href;\n                        if (link[1] == '/') {\n                            link = url.match(/.[^/]+[/][/]/)[0] + link.substring(2);\n                        }\n                        else {\n                            link = url.match(/[A-Za-z]+[:][/].[^/]+[/]/)[0] + link.substring(1);\n                        }\n                    }\n                    res = (link) ? link : \"\";\n                }\n                // If we didn't get a link then instead look at the parent of the current element and try to get a link from that instead\n                if (res === \"\") {\n                    var parent = el.parentElement;\n                    if (parent && parent.innerHTML) {\n                        i++;\n                        el = parent;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            result = res;\n        }\n        return result;\n    };\n    ScrapeHelper.prototype.countSiblingsLeft = function (el) {\n        var siblings = [];\n        var n = el;\n        var done = false;\n        while (!done) {\n            var sibling = n.previousElementSibling;\n            if (sibling) {\n                siblings.push(sibling);\n                n = sibling;\n            }\n            else {\n                done = true;\n            }\n        }\n        return siblings.length;\n    };\n    ScrapeHelper.prototype.getRootTree = function (el) {\n        var rootTree = [];\n        var node = el;\n        var done = false;\n        while (!done) {\n            var nthCount = this.countSiblingsLeft(node);\n            rootTree.unshift(nthCount);\n            var parent = node.parentElement;\n            if (parent) {\n                node = parent;\n            }\n            else {\n                done = true;\n            }\n        }\n        return rootTree;\n    };\n    ScrapeHelper.prototype.tracesEqual = function (a, b, depth) {\n        if (!a || !b) {\n            return false;\n        }\n        for (var i = 0; i < depth; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    ScrapeHelper.prototype.attemptGroups = function (all_res, gDepth) {\n        var groups = [];\n        var grouped = [];\n        var lastRow = 0;\n        var rowToAddTo = null;\n        for (var _i = 0, all_res_1 = all_res; _i < all_res_1.length; _i++) {\n            var res = all_res_1[_i];\n            grouped.push([]);\n            for (var _a = 0, res_1 = res; _a < res_1.length; _a++) {\n                var item = res_1[_a];\n                var colsProcessed = 0;\n                // OK, so we need to check this item's trace against items not in this column to find a matching trace.\n                // If we find the matching row, insert our item there and stop. If we fall off the end, push the new row instead.\n                var traceMatchFound = false;\n                for (var g = 0; g < grouped.length - 1; g++) {\n                    var colProcessed = 0;\n                    for (var i = 0; i < grouped[g].length; i++) {\n                        if (grouped[g][i] && item.trace) {\n                            colProcessed = 1;\n                            traceMatchFound = this.tracesEqual(grouped[g][i].trace, item.trace, gDepth);\n                            if (traceMatchFound) {\n                                rowToAddTo = i;\n                                break;\n                            }\n                        }\n                    }\n                    colsProcessed += colProcessed;\n                    if (traceMatchFound)\n                        break;\n                }\n                if (colsProcessed === 1) {\n                    // If only one column has been processed, we basically want to ignore the grouping and just push the columns straight onto its row\n                    grouped[grouped.length - 1].push(item);\n                }\n                else if (grouped.length > 1 && lastRow === 1) {\n                    // We automatically assume this is a grouping match if there's more than one column but only one row\n                    grouped[grouped.length - 1][lastRow - 1] = item;\n                }\n                else if (!traceMatchFound) {\n                    // If a trace match was not found, increase the number of rows and place on a new row\n                    grouped[grouped.length - 1][lastRow] = item;\n                    lastRow++;\n                }\n                else {\n                    // A trace match has been found, so let's add to the correct row\n                    grouped[grouped.length - 1][rowToAddTo] = item;\n                    if (rowToAddTo > lastRow)\n                        lastRow = rowToAddTo;\n                }\n            }\n        }\n        for (var sg in grouped) {\n            for (var it in grouped[sg]) {\n                if (!groups[it]) {\n                    groups[it] = [];\n                }\n                groups[it][sg] = grouped[sg][it].data;\n            }\n        }\n        // Clean up empty items\n        for (var r = 0; r < groups.length; r++) {\n            for (var c = 0; c < groups[r].length; c++) {\n                if (!groups[r][c]) {\n                    groups[r][c] = '';\n                }\n            }\n        }\n        return groups;\n    };\n    ScrapeHelper.prototype.mapTraces = function (doc, selectors, resultTypes) {\n        if (resultTypes === void 0) { resultTypes = \"textContent\"; }\n        var gDepthMod = 0;\n        var tides = [];\n        var all_res = [];\n        // if we only have one result type provided then we should use that for all selectors\n        if (typeof resultTypes === 'string') {\n            var resultType = resultTypes.valueOf();\n            resultTypes = [];\n            for (var _i = 0, selectors_1 = selectors; _i < selectors_1.length; _i++) {\n                var s = selectors_1[_i];\n                resultTypes.push(resultType);\n            }\n        }\n        for (var s = 0; s < selectors.length; s++) {\n            var selector = selectors[s];\n            var resultType = resultTypes[s];\n            if (selector && selector.length > 0) {\n                try {\n                    if (selector === 'head' || !selector) {\n                        throw ('');\n                    }\n                    var els = Array.from(doc.body.querySelectorAll(selector));\n                    if (!els || els.length === 0) {\n                        // A missing element returns \"NO MATCHING ELEMENT\"; this is used later in comparing results from different iframes to choose the best outcome\n                        throw ('NO MATCHING ELEMENT');\n                    }\n                    if (els.length === 1) {\n                        gDepthMod -= 1;\n                    }\n                    var results = [];\n                    for (var _a = 0, els_1 = els; _a < els_1.length; _a++) {\n                        var el = els_1[_a];\n                        var e = els.indexOf(el);\n                        var data = this.getDataV0210(el, resultType);\n                        if (!data) {\n                            data = \"No data, change column type or re-select\";\n                        }\n                        var tag = 'axiom' + s + '-' + e;\n                        var trace = this.getRootTree(el);\n                        el.className = el.className.replace(\"axiom-matched\", '');\n                        results.push({ trace: trace, data: data, selector: selector, tag: tag, el: el });\n                    }\n                    var minTide = results[0].trace.length;\n                    var maxTide = 0;\n                    for (var r = 0; r < results.length; r++) {\n                        var trace = results[r].trace;\n                        var prev = results[results.length - 1].trace;\n                        if (r > 0) {\n                            prev = results[r - 1].trace;\n                        }\n                        var tide = 0;\n                        var done = false;\n                        while (!done && tide < trace.length) {\n                            var t_depth = trace[tide];\n                            var p_depth = prev[tide];\n                            if (t_depth !== p_depth) {\n                                done = true;\n                            }\n                            tide++;\n                        }\n                        if (tide < minTide) {\n                            minTide = tide;\n                        }\n                        if (tide > maxTide) {\n                            maxTide = tide;\n                        }\n                        results[r].trace.push(tide);\n                    }\n                    tides.push({ minTide: minTide, maxTide: maxTide });\n                    all_res.push(results);\n                }\n                catch (e) {\n                    tides.push({ minTide: 999, maxTide: 999 });\n                    all_res.push([{ trace: null, data: e, selector: selector, tag: null, el: null }]);\n                }\n            }\n        }\n        if (tides.length && all_res.length) {\n            tides.sort(function (a, b) {\n                return a.maxTide - b.maxTide;\n            });\n            var gDepth = tides[0].maxTide;\n            gDepth += gDepthMod;\n            this.generateGroupSelector(all_res, gDepth);\n            var grouped = this.attemptGroups(all_res, gDepth);\n            return grouped;\n        }\n        else {\n            return { 0: [] };\n        }\n    };\n    ScrapeHelper.prototype.generateGroupSelector = function (all_res, gDepth) {\n        this.groupSelector = \"\";\n        if (!all_res || !all_res[0] || !all_res[0][0] || !all_res[0][0].trace) {\n            return;\n        }\n        for (var i = 0; i < gDepth; i++) {\n            if (i > 0) {\n                this.groupSelector += \" > \";\n            }\n            this.groupSelector += \":-webkit-any(*):nth-child(\" + parseInt(all_res[0][0].trace[i] + 1) + \")\";\n        }\n    };\n    return ScrapeHelper;\n}());\nexports.ScrapeHelper = ScrapeHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///405\n")},808:function(module,exports,__webpack_require__){"use strict";eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AttributeSelector_1 = __webpack_require__(404);\nvar HierachyActions_1 = __webpack_require__(809);\nvar SelectorFacade_1 = __webpack_require__(810);\nvar BorderHighlight_1 = __webpack_require__(818);\nvar ScrapeHelper_1 = __webpack_require__(405);\nvar AxiomApiHelper_1 = __webpack_require__(13);\n/**\n * SelectionActions\n */\nvar SelectionActions = /** @class */ (function () {\n    function SelectionActions(context) {\n        this.selectorData = context;\n    }\n    SelectionActions.prototype.add_column = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.selectorData.addSelector();\n                this.selectorData.editSelector(this.selectorData.selectors.length - 1);\n                return [2 /*return*/];\n            });\n        });\n    };\n    SelectionActions.prototype.remove_column = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.selectorData.removeSelector(request.index);\n                return [2 /*return*/];\n            });\n        });\n    };\n    SelectionActions.prototype.select_column = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.selectorData.editSelector(request.index);\n                return [2 /*return*/];\n            });\n        });\n    };\n    SelectionActions.prototype.set_result_type = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.selectorData.setResultType(request.sel_index, request.resultType);\n                return [2 /*return*/];\n            });\n        });\n    };\n    SelectionActions.prototype.reset_column = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.selectorData.resetSelector(request.index);\n                this.selectorData.editSelector(request.index);\n                return [2 /*return*/];\n            });\n        });\n    };\n    SelectionActions.prototype.addElementToSelection = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/];\n            });\n        });\n    };\n    SelectionActions.prototype.removeElementFromSelection = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/];\n            });\n        });\n    };\n    SelectionActions.prototype.edit_selector = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.selectorData.updateSelector(request.index, request.selector, request.target);\n                return [2 /*return*/];\n            });\n        });\n    };\n    return SelectionActions;\n}());\n/**\n * SelectorData\n */\nvar SelectorData = /** @class */ (function () {\n    function SelectorData() {\n        this.refreshRequired = false;\n        this.selectors = null;\n        this.activeSelectorIndex = 0;\n        this.actions = new SelectionActions(this);\n    }\n    /**\n     * Executes the requested action and then automatically handles any recalculations and issuing of updates\n     *\n     * @param request {action, ...params}\n     */\n    SelectorData.prototype.actionRequest = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.actions[request.action](request)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SelectorData.prototype.addSelector = function () {\n        this.selectors.push({\n            selector: 'head',\n            selectedElements: [],\n            rejectedElements: [],\n            resultType: this.defaultResultType\n        });\n        this.refreshRequired = true;\n    };\n    SelectorData.prototype.removeSelector = function (index) {\n        this.selectors.splice(index, 1);\n        if (this.selectors.length === 0) {\n            this.addSelector();\n        }\n        else {\n            var removedLastColumn = (index === this.selectors.length);\n            var removedWhileSelected = (index === this.activeSelectorIndex);\n            var selectedColumnShiftedLeft = (index <= this.activeSelectorIndex);\n            if ((removedLastColumn && removedWhileSelected) || selectedColumnShiftedLeft) {\n                this.editSelector(this.activeSelectorIndex - 1);\n            }\n        }\n        if (this.activeSelectorIndex === -1 && this.selectors.length > 0) {\n            this.activeSelectorIndex = 0;\n        }\n        this.refreshRequired = true;\n    };\n    SelectorData.prototype.editSelector = function (index) {\n        if (index < this.selectors.length) { // check index exists\n            this.activeSelectorIndex = index;\n        }\n        else if (this.activeSelectorIndex >= this.selectors.length) {\n            // if current selection is not valid then set to last column\n            this.activeSelectorIndex = this.selectors.length - 1;\n        }\n        this.refreshRequired = true;\n    };\n    SelectorData.prototype.updateSelector = function (index, selector, target) {\n        if (!this.selectors[index]) {\n            // Only happens if it's a brand new scrape, so this should be safe\n            this.addSelector();\n        }\n        this.selectors[index] = selector[index];\n        var singleSelector = new SelectorFacade_1.SelectorFacade();\n        if (target === \"hierarchy\") {\n            var el = document.querySelector(selector[index].selector.hierarchy);\n            if (!el) {\n                this.selectors[index].selector.innerText = \"\",\n                    this.selectors[index].selector.targetElement = undefined;\n                return;\n            }\n            var newSelectors = singleSelector.getSelector(el);\n            this.selectors[index].selector.innerText = newSelectors.innerText,\n                this.selectors[index].selector.targetElement = newSelectors.targetElement;\n        }\n        else if (target === \"innerText\") {\n            var el = document.evaluate(\"//*[text()='\" + selector[index].selector.innerText + \"']\", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n            if (!el) {\n                this.selectors[index].selector.hierarchy = \"\";\n                this.selectors[index].targetElement = undefined;\n                return;\n            }\n            var newSelectors = singleSelector.getSelector(el);\n            this.selectors[index].selector.hierarchy = newSelectors.hierarchy;\n            this.selectors[index].selector.targetElement = newSelectors.targetElement;\n        }\n        this.refreshRequired = true;\n    };\n    SelectorData.prototype.setResultType = function (index, resultType) {\n        if (!this.selectors[index]) {\n            this.addSelector();\n        }\n        this.selectors[index].resultType = resultType;\n        this.refreshRequired = true;\n    };\n    SelectorData.prototype.resetSelector = function (index) {\n        this.selectors[index] = {\n            selector: 'head',\n            selections: [],\n            selectedElements: [],\n            rejectedElements: [],\n            resultType: this.defaultResultType,\n            groupSelector: 'body'\n        };\n        this.refreshRequired = true;\n    };\n    return SelectorData;\n}());\n/**\n * @author Nasik aka Kisan <nasik.shafeek@abstraction.co>\n * @author Simon Delany <simon.delany@axiom.ai>\n *\n * Injected into content page and will be kicked into action when the tool is in use\n *\n */\nvar InjectedSelectorTool = /** @class */ (function () {\n    function InjectedSelectorTool() {\n        var _this = this;\n        this.iframeHighlightBorders = [];\n        this.lastSelectorId = 0;\n        this.activeSelector = [];\n        this.activeSelectorIndex = -1;\n        this.selectingClass = 'axiom-sel-selected-';\n        this.suggestingClass = 'axiom-sel-suggested-';\n        this.rejectingClass = 'axiom-sel-rejected-';\n        this.resultType = 'textContent';\n        this.resultTypes = ['textContent'];\n        this.iframeSupportEnabled = false;\n        this.SelectorAlgorithm = new AttributeSelector_1.AttributeSelector();\n        this.hierarchyActions = new HierachyActions_1.HierarchyActions();\n        this.matching = [];\n        this.matchingData = [];\n        this.highlightBorder = new BorderHighlight_1.BorderHighlight(document, false, false);\n        this.singleSelector = new SelectorFacade_1.SelectorFacade();\n        this.scrapeHelper = new ScrapeHelper_1.ScrapeHelper();\n        this.selectorData = new SelectorData();\n        chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) { return __awaiter(_this, void 0, void 0, function () {\n            var _a, suggestions;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = request.action;\n                        switch (_a) {\n                            case 'selector_tool_start': return [3 /*break*/, 1];\n                            case 'selector_tool_confirm': return [3 /*break*/, 2];\n                            case \"selector_tool_reset\": return [3 /*break*/, 3];\n                            case \"selector_tool_cancel\": return [3 /*break*/, 4];\n                            case \"set_result_type\": return [3 /*break*/, 5];\n                            case 'select_column': return [3 /*break*/, 5];\n                            case 'remove_column': return [3 /*break*/, 5];\n                            case 'add_column': return [3 /*break*/, 5];\n                            case 'reset_column': return [3 /*break*/, 5];\n                            case 'edit_selector': return [3 /*break*/, 5];\n                            case \"hide_bubble\": return [3 /*break*/, 7];\n                            case \"generate_suggestions\": return [3 /*break*/, 8];\n                            case \"set_iframe_support\": return [3 /*break*/, 9];\n                        }\n                        return [3 /*break*/, 10];\n                    case 1:\n                        this.scrapeHelper.groupSelector = \"\";\n                        this.selectionMode = (request.selectionType === 'smart' || request.selectionType === 'multi') ? 'multiple' : 'single';\n                        if (request.resultType) {\n                            if (Array.isArray(request.resultType)) {\n                                this.resultTypes = request.resultType;\n                                this.resultType = this.resultTypes[this.selectorData.activeSelectorIndex];\n                            }\n                            else {\n                                this.resultType = request.resultType;\n                                this.resultTypes = [request.resultType];\n                            }\n                        }\n                        else {\n                            this.resultType = 'outerHTML';\n                        }\n                        // We have to set a default resultType e.g. for widgets like scrapeLink to have the link result type as default\n                        this.selectorData.defaultResultType = this.resultType; // this sets a default result type for this selection. any time you add a column it will default this this resultType.\n                        this.highlightBorder.updateResultType(this.resultType);\n                        this.highlightBorder.updateWindex(request.windex);\n                        this.injectV0200();\n                        if (!request.selectors) {\n                            return [2 /*return*/];\n                        }\n                        if (this.selectionMode === \"multiple\") {\n                            this.selectorData.selectors = request.selectors;\n                            this.selectionMode = 'multiple';\n                            this.updateSelections(this.selectorData.selectors[this.selectorData.activeSelectorIndex].resultType, this.selectorData.activeSelectorIndex, document);\n                            AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n                                _this.updateSelections(_this.selectorData.selectors[_this.selectorData.activeSelectorIndex].resultType, _this.selectorData.activeSelectorIndex, content[0]);\n                            });\n                            this.sendStateUpdate();\n                        }\n                        else if (this.selectionMode === 'single') {\n                            this.selectorData.selectors = request.selectors;\n                            this.resetHighlights(document);\n                            AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n                                _this.resetHighlights(content[0]);\n                            });\n                        }\n                        return [3 /*break*/, 10];\n                    case 2:\n                        this.closingAction(request.widget_type);\n                        sendResponse(this.selectorData.selectors);\n                        this.ejectV0200();\n                        return [3 /*break*/, 10];\n                    case 3:\n                        this.ejectV0200();\n                        this.selectionMode = (request.selectionType === 'smart' || request.selectionType === 'multi') ? 'multiple' : 'single';\n                        this.injectV0200();\n                        return [3 /*break*/, 10];\n                    case 4:\n                        this.ejectV0200();\n                        return [3 /*break*/, 10];\n                    case 5:\n                        this.removeAllHighlights(document);\n                        AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, doc) {\n                            _this.removeAllHighlights(doc);\n                        });\n                        return [4 /*yield*/, this.selectorData.actionRequest(request)];\n                    case 6:\n                        _b.sent();\n                        if (this.selectionMode === 'multiple') {\n                            if (this.selectorData.refreshRequired && this.selectorData.selectors[this.selectorData.activeSelectorIndex]) {\n                                this.updateSelections(this.selectorData.selectors[this.selectorData.activeSelectorIndex].resultType, this.selectorData.activeSelectorIndex, document);\n                                AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n                                    _this.updateSelections(_this.selectorData.selectors[_this.selectorData.activeSelectorIndex].resultType, _this.selectorData.activeSelectorIndex, content[0]);\n                                });\n                                this.sendStateUpdate();\n                            }\n                        }\n                        else if (this.selectionMode === 'single') {\n                            this.resetHighlights(document);\n                            AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n                                _this.resetHighlights(content[0]);\n                            });\n                            this.sendStateUpdate();\n                        }\n                        return [3 /*break*/, 10];\n                    case 7:\n                        chrome.runtime.sendMessage({ action: 'cancel_preview' });\n                        this.ejectV0200();\n                        return [3 /*break*/, 10];\n                    case 8:\n                        suggestions = this.generateSuggestions(request.selector);\n                        sendResponse({ suggestions: suggestions });\n                        return [3 /*break*/, 10];\n                    case 9:\n                        this.iframeSupportEnabled = request.value;\n                        this.iframeHighlightBorders.forEach(function (item) {\n                            item.setIframeSupportEnabled(request.value);\n                        });\n                        return [3 /*break*/, 10];\n                    case 10: return [2 /*return*/];\n                }\n            });\n        }); });\n    }\n    InjectedSelectorTool.prototype.generateSuggestions = function (selector) {\n        if (!selector || selector === \"head\") {\n            return [];\n        }\n        var results;\n        try {\n            results = document.querySelectorAll(selector);\n        }\n        catch (e) {\n            return [];\n        }\n        var sharedAttributes = [];\n        var combinedSelector = this.hierarchyActions.getCombined(document, Array.from(results), [], 'selector');\n        sharedAttributes.push(combinedSelector);\n        for (var i in results) {\n            var el = results[i];\n            if (sharedAttributes.length === 1) {\n                if (el.attributes) {\n                    for (var _i = 0, _a = el.attributes; _i < _a.length; _i++) {\n                        var attr = _a[_i];\n                        if (attr.name !== \"class\" && attr.value) {\n                            var as = this.createAttributeSelector(attr);\n                            if (this.testGeneratedSelector(as, results.length)) {\n                                sharedAttributes.push(as);\n                            }\n                        }\n                    }\n                }\n                if (el.classList) {\n                    for (var _b = 0, _c = el.classList; _b < _c.length; _b++) {\n                        var c = _c[_b];\n                        if (c.indexOf('axiom') === -1) {\n                            if (this.testGeneratedSelector(\".\" + c, results.length)) {\n                                sharedAttributes.push(\".\" + c);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                // This segment basically removes things in the case that the first result happened to have a length match, but it actually doesn't\n                // include one of the originally selected results (instead it includes something else).\n                if (el.attributes) {\n                    for (var _d = 0, _e = el.attributes; _d < _e.length; _d++) {\n                        var attr = _e[_d];\n                        var as = this.createAttributeSelector(attr);\n                        var found = \"\";\n                        for (var sai in sharedAttributes) {\n                            if (sharedAttributes[sai] === as) {\n                                found = sai;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            sharedAttributes[found] = null;\n                        }\n                    }\n                }\n                if (el.classList) {\n                    for (var _f = 0, _g = el.classList; _f < _g.length; _f++) {\n                        var c = _g[_f];\n                        var found = \"\";\n                        for (var _h = 0, sharedAttributes_1 = sharedAttributes; _h < sharedAttributes_1.length; _h++) {\n                            var sai = sharedAttributes_1[_h];\n                            if (sharedAttributes[sai] === \".\" + c) {\n                                found = sai;\n                            }\n                        }\n                        if (!found) {\n                            sharedAttributes[found] = null;\n                        }\n                    }\n                }\n            }\n        }\n        sharedAttributes = sharedAttributes.filter(function (el) {\n            return el != null;\n        });\n        return sharedAttributes;\n    };\n    InjectedSelectorTool.prototype.createAttributeSelector = function (attr) {\n        return '[' + attr.name + \"='\" + attr.value + \"']\";\n    };\n    InjectedSelectorTool.prototype.testGeneratedSelector = function (selector, targetLength) {\n        if (!selector) {\n            return false;\n        }\n        var r = document.querySelectorAll(selector);\n        return r.length === targetLength;\n    };\n    /**\n     * Start Using the tool\n     */\n    InjectedSelectorTool.prototype.injectV0200 = function () {\n        var _this = this;\n        this.inuse = true;\n        this.selectorData.selectors = [];\n        this.selectorData.activeSelectorIndex = 0;\n        this.highlightBorder.updateactiveSelectorIndex(0);\n        this.highlightBorder.inject();\n        if (this.selectionMode === 'single') {\n            jQuery(document).on('mousedown.axiom-selection', function (e) {\n                _this.singleElementClickHandler(e);\n            });\n            AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n                jQuery(content[0]).on('mousedown.axiom-selection', function (e) {\n                    _this.singleElementClickHandler(e);\n                });\n            });\n        }\n        else {\n            // Adding require things to the parent window\n            jQuery(document).on('mousedown.axiom-selection', function (e) {\n                _this.elementClickHandler(e);\n            });\n            AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n                jQuery(content[0]).on('mousedown.axiom-selection', _this.elementClickHandler.bind(_this));\n            });\n        }\n        if (this.resultType === 'link') {\n            jQuery('a').addClass('axiom-link');\n        }\n        else if (this.resultType === 'axiom-download') {\n            jQuery('a').addClass('axiom-download');\n        }\n        /**\n         * Linking the css file for highlighting and stuff\n         */\n        jQuery('body').addClass('axiom-sel-in-action');\n        // Adding the required things to each same origin iframe\n        AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n            if (content.length) {\n                _this.iframeHighlightBorders[index] = new BorderHighlight_1.BorderHighlight(content[0], true, _this.iframeSupportEnabled);\n                _this.iframeHighlightBorders[index].inject();\n                var body = content.find('body');\n                var stylesheet = chrome.runtime.getURL(\"axiomselector.css\");\n                body.append('<link rel=\"stylesheet\" type=\"text/css\" href=\"' + stylesheet + '\">');\n                body.addClass('axiom-sel-in-action');\n                if (_this.resultType === 'link') {\n                    content.find('a').addClass('axiom-link');\n                }\n                else if (_this.resultType === 'axiom-download') {\n                    content.find('a').addClass('axiom-download');\n                }\n            }\n        });\n    };\n    /**\n     * Inject into specific classes where traditional injection doesn't work\n     *\n     * @param mode string | 'single', 'multiple'\n     */\n    InjectedSelectorTool.prototype.injectIntoSpecificClasses = function (mode) {\n        var algos = {\n            'single': this.singleElementClickHandler.bind(this),\n            'multiple': this.elementClickHandler.bind(this)\n        };\n        jQuery('.c9-menu-btn').on('mousedown.axiom-selection', algos[mode]);\n    };\n    InjectedSelectorTool.prototype.ejectFromSpecificClasses = function () {\n        jQuery('.c9-menu-btn').off('mousedown.axiom-selector');\n    };\n    InjectedSelectorTool.prototype.updateSelections = function (activeResultType, activeSelectorIndex, doc) {\n        this.highlightBorder.updateResultType(activeResultType);\n        this.highlightBorder.updateactiveSelectorIndex(activeSelectorIndex);\n        this.updateActiveResultType();\n        this.findMatchesV0190(doc); // TODO: split into the following\n        this.setHighlights(doc);\n    };\n    InjectedSelectorTool.prototype.updateActiveResultType = function () {\n        this.resultType = this.selectorData.selectors[this.selectorData.activeSelectorIndex].resultType;\n        // remove old result type dependant classes\n        jQuery('a').removeClass('axiom-link');\n        jQuery('a').removeClass('axiom-download');\n        // add current result type dependant classes\n        if (this.resultType === 'link') {\n            jQuery('a').addClass('axiom-link');\n        }\n        else if (this.resultType === 'axiom-download') {\n            jQuery('a').addClass('axiom-download');\n        }\n    };\n    InjectedSelectorTool.prototype.sendStateUpdate = function () {\n        var msg = {\n            action: \"update_state\",\n            preview_data: this.matchingData,\n            selectors: this.selectorData.selectors,\n            activeSelectorIndex: this.selectorData.activeSelectorIndex,\n            groupSelector: this.scrapeHelper.groupSelector\n        };\n        chrome.runtime.sendMessage(msg);\n    };\n    /**\n     * Disables the usage of the tool\n     */\n    InjectedSelectorTool.prototype.ejectV0200 = function () {\n        var _this = this;\n        jQuery(document).off('mousedown.axiom-selection');\n        jQuery('body').removeClass('axiom-sel-in-action');\n        this.removeAllHighlights(document);\n        var groupStyle = document.getElementById('axiom-group-style');\n        if (groupStyle) {\n            document.head.removeChild(groupStyle);\n        }\n        if (this.highlightBorder) {\n            this.highlightBorder.eject();\n        }\n        jQuery('a').removeClass('axiom-link');\n        AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n            jQuery(content[0]).off('mousedown.axiom-selection');\n            _this.removeAllHighlights(content[0]);\n            var body = content.find('body');\n            jQuery(body).removeClass('axiom-sel-in-action');\n            if (_this.iframeHighlightBorders[index]) {\n                _this.iframeHighlightBorders[index].eject();\n            }\n            var groupStyle = content[0].getElementById('axiom-group-style');\n            if (groupStyle) {\n                content[0].head.removeChild(groupStyle);\n            }\n            content.find('a').removeClass('axiom-link');\n        });\n        this.inuse = false;\n        this.selectorData.selectors = [];\n        this.matching = [];\n        this.matchingData = [];\n    };\n    /**\n     * Disables the usage of the tool\n     */\n    InjectedSelectorTool.prototype.ejectV0190 = function (doc) {\n        this.ejectFromSpecificClasses();\n        jQuery(document).off('mousedown.axiom-selection');\n        jQuery('body').removeClass('axiom-sel-in-action');\n        this.removeAllHighlights(doc);\n        this.inuse = false;\n        this.selectorData.selectors = [];\n        this.matching = [];\n        this.matchingData = [];\n        var groupStyle = document.getElementById('axiom-group-style');\n        if (groupStyle) {\n            document.head.removeChild(groupStyle);\n        }\n        if (this.highlightBorder) {\n            this.highlightBorder.eject();\n        }\n        jQuery('a').removeClass('axiom-link');\n        jQuery('a').removeClass('axiom-download');\n    };\n    /**\n     *\n     */\n    InjectedSelectorTool.prototype.resume = function (doc) {\n        this.inuse = true;\n        jQuery('body').addClass('axiom-sel-in-action');\n        this.highlightBorder.setupBorder();\n        // remove all selection as this is a brand new selection\n        this.resetHighlights(doc);\n    };\n    /**\n     * Remove all highlights\n     */\n    InjectedSelectorTool.prototype.resetHighlights = function (doc) {\n        this.removeAllHighlights(doc);\n        this.setHighlights(doc);\n    };\n    InjectedSelectorTool.prototype.setHighlights = function (doc) {\n        var _this = this;\n        if (this.selectorData.selectors.length && this.selectionMode === 'multiple') {\n            var selectors = this.selectorData.selectors.map(function (selectorObj) {\n                if (!selectorObj.isToken && typeof selectorObj.selector === 'string' && selectorObj.selector !== 'head' && /\\S/.test(selectorObj.selector)) {\n                    return selectorObj.selector;\n                }\n                if (selectorObj.selector.hierarchy) {\n                    return selectorObj.selector.hierarchy;\n                }\n            }).filter(function (s) { return !!s; });\n            var combinedSelector = selectors.join(', ');\n            var matches = [];\n            if (typeof combinedSelector === 'string' && /\\S/.test(combinedSelector)) {\n                matches = Array.from(doc.querySelectorAll(combinedSelector));\n            }\n            var _loop_1 = function (s) {\n                if (s === this_1.selectorData.activeSelectorIndex) {\n                    for (var _i = 0, _a = this_1.selectorData.selectors[this_1.selectorData.activeSelectorIndex].selectedElements; _i < _a.length; _i++) {\n                        var el = _a[_i];\n                        if (el.classList)\n                            el.classList.add(this_1.selectingClass + this_1.selectorData.activeSelectorIndex);\n                    }\n                    for (var _b = 0, _c = this_1.selectorData.selectors[this_1.selectorData.activeSelectorIndex].rejectedElements; _b < _c.length; _b++) {\n                        var el = _c[_b];\n                        if (el.classList)\n                            el.classList.add(this_1.rejectingClass + this_1.selectorData.activeSelectorIndex);\n                    }\n                }\n                if (selectors[s] && /\\S/g.test(selectors[s])) {\n                    var matchingEls = Array.from(doc.querySelectorAll(selectors[s])); // TODO: get combined selector from selectedEls\n                    matchingEls.forEach(function (el) {\n                        if (!/axiom-sel-selected-\\S*|axiom-sel-rejected-\\S*/g.test(el.className)) {\n                            el.classList.add(_this.suggestingClass + s);\n                        }\n                    });\n                }\n            };\n            var this_1 = this;\n            for (var s = 0; s < selectors.length; s++) {\n                _loop_1(s);\n            }\n            for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n                var el = matches_1[_i];\n                jQuery(el).addClass('axiom-matched');\n                this.removeSelectedChildren(el);\n            }\n        }\n        else if (this.selectionMode === 'single') {\n            var sel = this.selectorData.selectors[0].selector;\n            var el = void 0;\n            if (sel.hierarchy) {\n                el = document.querySelector(this.selectorData.selectors[0].selector.hierarchy);\n            }\n            else if (sel.innerText) {\n                var xpath = \"//*[text()='\" + sel.innerText + \"']\";\n                el = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n            }\n            jQuery(el).addClass('axiom-matched');\n            jQuery(el).addClass('axiom-sel-selected-0');\n        }\n        var groupStyle = doc.getElementById('axiom-group-style');\n        if (!groupStyle) {\n            groupStyle = doc.createElement('style');\n            groupStyle.id = 'axiom-group-style';\n            doc.head.appendChild(groupStyle);\n        }\n        if (this.scrapeHelper.groupSelector !== undefined && this.scrapeHelper.groupSelector !== '' && this.scrapeHelper.groupSelector !== 'body') {\n            groupStyle.innerHTML = this.scrapeHelper.groupSelector + \" {\\n                border-style: dotted !important;\\n                border-width: 3px !important;\\n                border-color: #FFC107 !important;\\n                padding: 5px !important;\\n                border-radius: 10px !important;\\n            }\";\n        }\n        else {\n            groupStyle.innerHTML = '';\n        }\n        var otherSelectors = \"\\n        [class*=\\\"\" + this.selectingClass + \"\\\"].axiom-matched  {\\n            background: rgba(0, 153, 255, 0.7) !important\\n            background-image: none !important;\\n        }\\n        [class*=\\\"\" + this.suggestingClass + \"\\\"].axiom-matched  {\\n            background: rgba(0, 153, 255, 0.3) !important;\\n            background-image: none !important;\\n        }\\n        \\n        [class*=\\\"\" + this.selectingClass + \"\\\"]:not(.axiom-matched)  {\\n            background: rgba(153, 153, 153, 0.7) !important\\n            background-image: none !important;\\n        }\\n        [class*=\\\"\" + this.suggestingClass + \"\\\"]:not(.axiom-matched)  {\\n            background: rgba(153, 153, 153, 0.3) !important;\\n            background-image: none !important;\\n        }\";\n        var activeSelector = \"\\n        [class~=\\\"\" + (this.selectingClass + this.selectorData.activeSelectorIndex) + \"\\\"].axiom-matched  {\\n            background-color: #FFC107 !important;\\n            background-image: none !important;\\n        }\\n        [class~=\\\"\" + (this.suggestingClass + this.selectorData.activeSelectorIndex) + \"\\\"].axiom-matched  {\\n            background-color: #ffd98c !important; \\n            background-image: none !important;\\n        }\\n        \\n        [class~=\\\"\" + (this.selectingClass + this.selectorData.activeSelectorIndex) + \"\\\"]:not(.axiom-matched)  {\\n            background-color: rgba(193,193,193, 0.7) !important;\\n            background-image: none !important;\\n        }\\n        [class~=\\\"\" + (this.suggestingClass + this.selectorData.activeSelectorIndex) + \"\\\"]:not(.axiom-matched)  {\\n            background-color: rgba(193,193,193, 0.3) !important; \\n            background-image: none !important;\\n        }\";\n        groupStyle.innerHTML += otherSelectors;\n        groupStyle.innerHTML += activeSelector;\n    };\n    InjectedSelectorTool.prototype.getSelector = function (element) {\n        return this.SelectorAlgorithm.getSelector(element);\n    };\n    /**\n     * Sets \"'axiom-sel-selected-' + number\" for the selection that has been clicked\n     *\n     */\n    InjectedSelectorTool.prototype.setClassForSelected = function (el) {\n        el.classList.add(this.selectingClass + this.selectorData.activeSelectorIndex);\n        return;\n    };\n    /**\n     * Removes \"'axiom-sel-selected-' + number\" for the selection that has been clicked\n     *\n     */\n    InjectedSelectorTool.prototype.removeClassForSelected = function (el) {\n        el.classList.remove(this.selectingClass + this.selectorData.activeSelectorIndex);\n        return;\n    };\n    InjectedSelectorTool.prototype.removeClassForRejected = function (el) {\n        el.classList.remove(this.rejectingClass + this.selectorData.activeSelectorIndex);\n        return;\n    };\n    /**\n     * Sets \"'axiom-sel-suggested-' + number\" for active selector's candidate selections\n     *\n     */\n    InjectedSelectorTool.prototype.setClassForSuggested = function () {\n        var cls = this.suggestingClass + this.selectorData.activeSelectorIndex;\n        this.matching.forEach(function (el) {\n            if (!/axiom-sel-selected-\\S*|axiom-sel-rejected-\\S*/g.test(el.className)) {\n                el.classList.add(cls);\n            }\n        });\n        return;\n    };\n    /**\n     * Removes all classes which are injected for the highlighting purposes\n     */\n    InjectedSelectorTool.prototype.removeAllHighlights = function (doc) {\n        if (!this.selectorData.selectors || this.selectorData.selectors.length === 0) {\n            return;\n        }\n        for (var s = 0; s < this.selectorData.selectors.length; s++) {\n            jQuery(doc).find('*').removeClass(\"axiom-sel-selected-\" + s);\n            jQuery(doc).find('*').removeClass(\"axiom-sel-suggested-\" + s);\n            jQuery(doc).find('*').removeClass(\"axiom-sel-rejected-\" + s);\n            jQuery(doc).find('*').removeClass(\"axiom-matched\");\n        }\n    };\n    /**\n     * Highlights the the current selectors\n     */\n    InjectedSelectorTool.prototype.highlightSelection = function () {\n        var _this = this;\n        if (this.selectionMode === 'multiple') {\n            var sel = document.querySelectorAll(this.selectingClass + this.selectorData.activeSelectorIndex);\n            var sug = document.querySelectorAll(this.suggestingClass + this.selectorData.activeSelectorIndex);\n            var reg = document.querySelectorAll(this.rejectingClass + this.selectorData.activeSelectorIndex);\n            sel.forEach(function (el) {\n                el.classList.add(_this.selectingClass + _this.selectorData.activeSelectorIndex);\n            });\n            sug.forEach(function (el) {\n                el.classList.add(_this.suggestingClass + _this.selectorData.activeSelectorIndex);\n            });\n            reg.forEach(function (el) {\n                el.classList.add(_this.rejectingClass + _this.selectorData.activeSelectorIndex);\n            });\n        }\n        else {\n            var sel = document.querySelectorAll(this.selectingClass + this.selectorData.activeSelectorIndex);\n            sel.forEach(function (el) {\n                el.classList.add(_this.selectingClass + _this.selectorData.activeSelectorIndex);\n                el.classList.add('axiom-matched');\n            });\n        }\n    };\n    InjectedSelectorTool.prototype.findMatchesV0190 = function (doc) {\n        if (this.selectionMode === 'multiple') {\n            var newData = [];\n            this.matching = []; // TODO: Check what this is actually doing. It's never checked anywhere I can see, just set.\n            var selectors = this.selectorData.selectors.filter(function (s) {\n                return typeof s.selector === 'string';\n            }).map(function (s) {\n                if (s.isToken) {\n                    return \"head\";\n                }\n                else {\n                    return s.selector;\n                }\n            });\n            if (selectors.length) {\n                if (this.resultTypes[0] === 'axiom-download' && selectors) {\n                    try {\n                        newData = Array.from(doc.querySelectorAll(selectors[0])).map(function (el) { return [el.outerHTML]; });\n                    }\n                    catch (e) {\n                        // no action required\n                    }\n                }\n                else {\n                    newData = this.scrapeHelper.getPreview(doc, selectors, this.selectorData.selectors.map(function (s) { return s.resultType; }));\n                }\n            }\n            newData = AxiomApiHelper_1.AxiomApiHelper.transpose(newData);\n            if (newData.length > 0) {\n                for (var n in newData) {\n                    var skip = false;\n                    if (newData[n] && newData[n].length > 0) {\n                        for (var _i = 0, _a = newData[n]; _i < _a.length; _i++) {\n                            var d = _a[_i];\n                            if (d === \"NO MATCHING ELEMENT\") {\n                                skip = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (!skip) {\n                        this.matchingData[n] = newData[n];\n                    }\n                }\n            }\n            // Fix any holes in the data\n            if (selectors.length > 1) {\n                // First, determine the max number of columns\n                var maxCols = 0;\n                for (var i = 0; i < this.matchingData.length; i++) {\n                    if (this.matchingData[i] && maxCols < this.matchingData[i].length) {\n                        maxCols = this.matchingData[i].length;\n                    }\n                }\n                // Then fill in the gaps!\n                for (var i = 0; i < selectors.length; i++) {\n                    var thisLen = this.matchingData[i] ? this.matchingData[i].length : 0;\n                    if (thisLen < maxCols) {\n                        for (var j = thisLen; j < maxCols; j++) {\n                            if (!this.matchingData[i]) {\n                                this.matchingData[i] = [];\n                            }\n                            this.matchingData[i].push('');\n                        }\n                    }\n                }\n            }\n            // Trim matching data to maximum selector length\n            if (this.matchingData.length > selectors.length) {\n                this.matchingData = this.matchingData.slice(0, selectors.length);\n            }\n            // For any tokens, just add the token name into the matching data.\n            for (var s = 0; s < this.selectorData.selectors.length; s++) {\n                var sel = this.selectorData.selectors[s];\n                if (sel.isToken) {\n                    this.matchingData[s][0] = sel.selector;\n                }\n            }\n        }\n    };\n    InjectedSelectorTool.prototype.blockClicksOn = function (doc) {\n        // Block the entire screen to prevent anything else from being clicked. Amazing this works really!\n        var block = jQuery('<div>').css('position', 'fixed').css('z-index', '9999999').\n            css('width', '10000px').css('height', '10000px').\n            css('top', 0).css('left', 0).css('background-color', '');\n        doc.body.appendChild(block.get(0));\n        setTimeout(function () {\n            block.remove();\n        }, 300);\n        return false;\n    };\n    /**\n     * When the selection is performed some widgets may require to perform any UI operation. Those are done here\n     *\n     * @param widgetType The type of widget to determine what to do\n     */\n    InjectedSelectorTool.prototype.closingAction = function (widgetType) {\n        return __awaiter(this, void 0, void 0, function () {\n            var selectedElements, elem_1, regex, buttonLabel, axiomWorkspace;\n            return __generator(this, function (_a) {\n                if (!this.selectorData.selectors[this.selectorData.activeSelectorIndex]) {\n                    return [2 /*return*/];\n                }\n                if (this.selectionMode === \"single\" && widgetType && widgetType === 'WidgetDriverClick') {\n                    selectedElements = this.selectorData.selectors[0].selector.hierarchy;\n                    elem_1 = jQuery(selectedElements);\n                    if (!elem_1[0]) {\n                        return [2 /*return*/];\n                    }\n                    regex = new RegExp(/\\w*(create|send|submit)\\w*/gi);\n                    buttonLabel = elem_1.text() || elem_1.val();\n                    if (!regex.test(buttonLabel)) {\n                        axiomWorkspace = document.getElementById('axiom-bot-draw-1976253492');\n                        axiomWorkspace.classList.add(\"axiom-static\");\n                        $.confirm({\n                            title: 'Selection Made',\n                            content: 'Do you want to click this element now?',\n                            boxWidth: '448px',\n                            useBootstrap: false,\n                            // Custom width\n                            // https://craftpip.github.io/jquery-confirm/#custom-width\n                            buttons: {\n                                confirm: function () {\n                                    if (elem_1[0].tagName.toLowerCase() == 'svg') {\n                                        elem_1 = elem_1.parent();\n                                    }\n                                    elem_1[0].click();\n                                },\n                                cancel: function () {\n                                    return;\n                                }\n                            }\n                        });\n                    }\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Click Handler for single element selections when the selector tool is in action\n     *\n     * @param e\n     */\n    InjectedSelectorTool.prototype.singleElementClickHandler = function (e) {\n        return __awaiter(this, void 0, void 0, function () {\n            var x, singleSelection;\n            var _this = this;\n            return __generator(this, function (_a) {\n                x = e.target;\n                if (!x.classList.contains('axiom-selector-ignore')) {\n                    if (this.resultType === 'link') {\n                        while (x.parentElement && !/\\S/.test(this.scrapeHelper.getData(x, this.resultType))) {\n                            x = x.parentElement;\n                        }\n                    }\n                }\n                this.blockClicksOn(document);\n                AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n                    _this.blockClicksOn(content[0]);\n                });\n                if (this.selectorData.selectors[this.selectorData.activeSelectorIndex] === undefined) {\n                    this.selectorData.selectors[this.selectorData.activeSelectorIndex] = {\n                        selector: '',\n                        selections: [],\n                        selectedElements: [],\n                        rejectedElements: [],\n                    };\n                }\n                singleSelection = this.singleSelector.getSelector(x);\n                this.selectorData.selectors[this.selectorData.activeSelectorIndex].selector = singleSelection;\n                this.removeAllHighlights(document);\n                AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n                    _this.removeAllHighlights(content[0]);\n                });\n                this.sendStateUpdate();\n                if (!this.selectorData.selectors[this.selectorData.activeSelectorIndex].selectedElements) {\n                    this.selectorData.selectors[this.selectorData.activeSelectorIndex].selectedElements = [];\n                }\n                this.selectorData.selectors[this.selectorData.activeSelectorIndex].selectedElements.push(x);\n                this.setHighlights(document);\n                AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n                    _this.setHighlights(content[0]);\n                });\n                // Reset the token flag - if you select something, it's no longer selected by a token\n                this.selectorData.selectors[this.selectorData.activeSelectorIndex].isToken = undefined;\n                try {\n                    this.sendStateUpdate();\n                }\n                catch (e) {\n                    console.warn('Unable to send back message to the chrome extension on single element selection');\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Go down the tree and remove any children of this element that have previously been selected but are no longer\n     * matched by anything - orphaned selectors essentially, which appear as grey blocks that cannot be clicked on inside\n     * a valid, working selector\n     * @param e An element to find the children of and remove any selectors\n     */\n    InjectedSelectorTool.prototype.removeSelectedChildren = function (e) {\n        var children = e.children;\n        for (var i = 0; i < children.length; i++) {\n            var child = children[i];\n            child.classList.remove(this.selectingClass + this.selectorData.activeSelectorIndex);\n            this.removeSelectedChildren(child);\n        }\n    };\n    /**\n     * Hanldes click when the selector tool is in action\n     *\n     * @param e\n     */\n    InjectedSelectorTool.prototype.elementClickHandler = function (e) {\n        return __awaiter(this, void 0, void 0, function () {\n            var x, suggestedElements, combinedSelector_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                x = e.target;\n                if (this.resultType === 'link') {\n                    while (x.parentElement && !/\\S/.test(this.scrapeHelper.getDataV0210(x, this.resultType))) {\n                        x = x.parentElement;\n                    }\n                }\n                this.blockClicksOn(document);\n                AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n                    _this.blockClicksOn(content[0]);\n                });\n                if (this.selectorData.selectors[this.selectorData.activeSelectorIndex] === undefined) {\n                    this.selectorData.selectors[this.selectorData.activeSelectorIndex] = {\n                        selector: '',\n                        selections: [],\n                        selectedElements: [],\n                        rejectedElements: [],\n                        resultType: this.selectorData.defaultResultType,\n                    };\n                }\n                else {\n                    this.selectorData.selectors[this.selectorData.activeSelectorIndex].isToken = false;\n                }\n                if (!/axiom-tool/g.test(x.className)) {\n                    suggestedElements = [];\n                    try {\n                        if (this.selectionMode = 'multiple') {\n                            suggestedElements = Array.from(document.querySelectorAll(this.selectorData.selectors[this.selectorData.activeSelectorIndex].selector));\n                        }\n                    }\n                    catch (e) {\n                        suggestedElements = [];\n                    }\n                    if (suggestedElements.includes(x)) {\n                        // if element is manually selected by user\n                        if (this.selectorData.selectors[this.selectorData.activeSelectorIndex].selectedElements.includes(x)) {\n                            // unselect element\n                            x.classList.remove(this.selectingClass + this.selectorData.activeSelectorIndex);\n                            this.selectorData.selectors[this.selectorData.activeSelectorIndex].selectedElements = this.selectorData.selectors[this.selectorData.activeSelectorIndex].selectedElements.filter(function (el) {\n                                return el !== x;\n                            });\n                            // if we have deselected all elements then we should automatically deselect all rejected elements:\n                            if (this.selectorData.selectors[this.selectorData.activeSelectorIndex].selectedElements.length === 0) {\n                                this.selectorData.selectors[this.selectorData.activeSelectorIndex].rejectedElements = [];\n                            }\n                        }\n                        else { // element is only suggested by the selection\n                            // exclude the element\n                            if (!this.selectorData.selectors[this.selectorData.activeSelectorIndex].rejectedElements.includes(x)) {\n                                x.classList.add(this.rejectingClass + this.selectorData.activeSelectorIndex);\n                                this.selectorData.selectors[this.selectorData.activeSelectorIndex].rejectedElements.push(x);\n                            }\n                            else {\n                                x.classList.remove(this.rejectingClass + this.selectorData.activeSelectorIndex);\n                                this.selectorData.selectors[this.selectorData.activeSelectorIndex].rejectedElements = this.selectorData.selectors[this.selectorData.activeSelectorIndex].rejectedElements.filter(function (el) {\n                                    return el !== x;\n                                });\n                            }\n                        }\n                    }\n                    else { // element is not currently included in the selection\n                        if (this.selectorData.selectors[this.selectorData.activeSelectorIndex].rejectedElements.includes(x)) {\n                            // element has previously been manually excluded: remove from rejected list\n                            x.classList.remove(this.rejectingClass + this.selectorData.activeSelectorIndex);\n                            this.selectorData.selectors[this.selectorData.activeSelectorIndex].rejectedElements = this.selectorData.selectors[this.selectorData.activeSelectorIndex].rejectedElements.filter(function (el) {\n                                return el !== x;\n                            });\n                            // If this hasn't been tagged as matched, immediately re-select it; this can happen in the case where you unselect a non-selected\n                            // element, and this removes everything. The main way that happens is when editing selectors.\n                            if (!x.classList.contains(\"axiom-matched\")) {\n                                x.classList.add(this.selectingClass + this.selectorData.activeSelectorIndex);\n                                this.selectorData.selectors[this.selectorData.activeSelectorIndex].selectedElements.push(x);\n                            }\n                        }\n                        else { // element is not rejected or suggested\n                            // select element\n                            x.classList.add(this.selectingClass + this.selectorData.activeSelectorIndex);\n                            this.selectorData.selectors[this.selectorData.activeSelectorIndex].selectedElements.push(x);\n                        }\n                    }\n                    combinedSelector_1 = this.hierarchyActions.getCombined(document, this.selectorData.selectors[this.selectorData.activeSelectorIndex].selectedElements, this.selectorData.selectors[this.selectorData.activeSelectorIndex].rejectedElements, 'selector');\n                    if (document.querySelectorAll(combinedSelector_1).length > 0) {\n                        this.selectorData.selectors[this.selectorData.activeSelectorIndex].selector = combinedSelector_1;\n                    }\n                    else {\n                        AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, content) {\n                            combinedSelector_1 = _this.hierarchyActions.getCombined(content[0], _this.selectorData.selectors[_this.selectorData.activeSelectorIndex].selectedElements, _this.selectorData.selectors[_this.selectorData.activeSelectorIndex].rejectedElements, 'selector');\n                            if (content[0].querySelectorAll(combinedSelector_1).length > 0) {\n                                _this.selectorData.selectors[_this.selectorData.activeSelectorIndex].selector = combinedSelector_1;\n                            }\n                        });\n                    }\n                    this.findMatchesV0190(document);\n                    this.resetHighlights(document);\n                    AxiomApiHelper_1.AxiomApiHelper.applyToIframes(function (index, doc) {\n                        _this.findMatchesV0190(doc[0]);\n                        _this.resetHighlights(doc[0]);\n                    });\n                    // Reset the token flag - if you select something, it's no longer selected by a token\n                    this.selectorData.selectors[this.selectorData.activeSelectorIndex].isToken = undefined;\n                    this.sendStateUpdate();\n                }\n                return [2 /*return*/, false];\n            });\n        });\n    };\n    return InjectedSelectorTool;\n}());\nexports.InjectedSelectorTool = InjectedSelectorTool;\nwindow['axiom_selector'] = new InjectedSelectorTool();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///808\n")},809:function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AttributeSelector_1 = __webpack_require__(404);\nvar HierarchyActions = /** @class */ (function () {\n    function HierarchyActions() {\n        this.attributeSelector = new AttributeSelector_1.AttributeSelector();\n    }\n    /**\n     * Takes 2 collections of elements\n     * Returns a single AtrributeSelector that will:\n     * -select all includeElements\n     * -select none of the excludeElements\n     *\n     * @param includeElements Array of Elements to be included in the selection\n     * @param excludeElements Array of Elements to be excluded from the selection\n     *\n     * @returns String to be used as a selector compatable with document.querySelectorAll(selector: String)\n     * @example ':-webkit-any(div, body):not([id=\"g2\"]) > :-webkit-any(article, section)[class~=\"post\"]:not([id=\"a4\"]) > h3:not([id=\"h4\"])'\n     *\n     */\n    HierarchyActions.prototype.getCombined = function (document, includeElements, excludeElements, type) {\n        if (includeElements.length === 0) {\n            return '';\n        }\n        var includeSelectors = this.getAsAttributeSelectors(includeElements);\n        var excludeSelectors = this.getAsAttributeSelectors(excludeElements);\n        var inSections = [];\n        var exSections = [];\n        for (var _i = 0, includeSelectors_1 = includeSelectors; _i < includeSelectors_1.length; _i++) {\n            var selector = includeSelectors_1[_i];\n            inSections.push(this.splitHierarchyString(selector));\n        }\n        for (var _a = 0, excludeSelectors_1 = excludeSelectors; _a < excludeSelectors_1.length; _a++) {\n            var selector = excludeSelectors_1[_a];\n            exSections.push(this.splitHierarchyString(selector));\n        }\n        var allSections = [].concat(inSections, exSections);\n        var levels = [];\n        // The tags arrays are ordered with the highest element in the tree first, and this causes things to go out of sync when selectors are not \n        // the same length. For example, body > div > span and body > div will be compared as [[span, div], [div, body], [body, undefined]].\n        // To fix this we add a new reversed version of the tags and modifers to each of the objects we check.\n        for (var _b = 0, allSections_1 = allSections; _b < allSections_1.length; _b++) {\n            var as = allSections_1[_b];\n            as.tagsReversed = as.tags.slice().reverse();\n        }\n        for (var _c = 0, inSections_1 = inSections; _c < inSections_1.length; _c++) {\n            var is = inSections_1[_c];\n            is.tagsReversed = is.tags.slice().reverse();\n        }\n        // Loop through the tags. This entire loop is inside out. We are looping through the inner array \n        // (which represents the parts of the hierarchy for each selector), as\n        // the outer loop, and the outer array (which represents each selector) as the inner loop. The reason for this is so we can compare the\n        // individual parts of the two selector strings.\n        var largestTagIndex = 0;\n        for (var _d = 0, allSections_2 = allSections; _d < allSections_2.length; _d++) {\n            var section = allSections_2[_d];\n            if (section.tagsReversed.length > largestTagIndex) {\n                largestTagIndex = section.tags.length;\n            }\n        }\n        for (var index = 0; index < largestTagIndex; index++) {\n            // We loop through the outer loop and get an array of tags and modifiers for each section for this part of the hierarchy\n            var tags = [];\n            for (var _e = 0, inSections_2 = inSections; _e < inSections_2.length; _e++) {\n                var section = inSections_2[_e];\n                // get tags\n                if (section.tagsReversed[index]) {\n                    tags.push(section.tagsReversed[index]);\n                }\n            }\n            if (tags.length === 0) {\n                return '';\n            }\n            var tag = '';\n            if (tags.length === inSections.length) {\n                if (tags.length === 1) {\n                    tag = tags[0];\n                }\n                else {\n                    var reducedTags = [];\n                    for (var _f = 0, tags_1 = tags; _f < tags_1.length; _f++) {\n                        var t = tags_1[_f];\n                        if (reducedTags.indexOf(t) === -1) {\n                            reducedTags.push(t);\n                        }\n                    }\n                    if (reducedTags.length === 1) {\n                        tag = reducedTags[0];\n                    }\n                    else {\n                        tag = \":-webkit-any(\" + reducedTags.join(', ') + \")\";\n                    }\n                }\n                levels.push(tag);\n            }\n        }\n        var combinedSelector = '';\n        combinedSelector = levels.join(' > ');\n        combinedSelector = combinedSelector.replace(/\\n/g, '');\n        combinedSelector = combinedSelector.replace(/\\s\\s/g, ' ');\n        combinedSelector = combinedSelector.replace(/\\[class~=\"[^\\S]*\"\\]/g, '');\n        if (type === 'selector') {\n            var selectorWithNthSpecifiers = this.applyNthSpecifiers(document, combinedSelector, includeElements, excludeElements);\n            // If this selector selects the same number of results as the previous one, we don't use it; it's likely too specific.\n            if (document.querySelectorAll(combinedSelector).length !== document.querySelectorAll(selectorWithNthSpecifiers).length) {\n                combinedSelector = selectorWithNthSpecifiers;\n            }\n        }\n        var matchedElements = [];\n        try {\n            matchedElements = Array.from(document.querySelectorAll(combinedSelector));\n        }\n        catch (e) {\n        }\n        combinedSelector = this.trimAttributes(document, combinedSelector, matchedElements, excludeElements);\n        combinedSelector = this.trimHierarchy(document, combinedSelector, matchedElements, excludeElements);\n        return combinedSelector.replace(/\\:not\\(\\)/g, \"\"); // strip empty :not() attributes\n    };\n    HierarchyActions.prototype.excludedMatches = function (document, selector, excludedElements) {\n        //get all elements that are currently matched by the combined selector\n        var matching = [];\n        try {\n            matching = Array.from(document.querySelectorAll(selector));\n        }\n        catch (e) {\n        }\n        //check for any elements in excludeElements that matched\n        return matching.filter(function (el) {\n            return excludedElements.includes(el);\n        });\n    };\n    HierarchyActions.prototype.misMatches = function (document, selector, excludedElements) {\n        //get all elements that are currently matched by the combined selector\n        var matching = [];\n        try {\n            matching = Array.from(document.querySelectorAll(selector));\n        }\n        catch (e) {\n        }\n        //check for any elements not includeedElements that matched\n        return matching.filter(function (el) {\n            return excludedElements.includes(el);\n        });\n    };\n    HierarchyActions.prototype.overSelected = function (document, selector, elementsToMatch) {\n        //get all elements that are currently matched by the combined selector\n        var matching = [];\n        try {\n            matching = Array.from(document.querySelectorAll(selector));\n        }\n        catch (e) {\n        }\n        //check for any extra elements sneaking in\n        return matching.filter(function (el) {\n            return !elementsToMatch.includes(el);\n        });\n    };\n    HierarchyActions.prototype.missingElements = function (document, selector, elementsToMatch) {\n        //get all elements that are currently matched by the combined selector\n        var matching = [];\n        try {\n            matching = Array.from(document.querySelectorAll(selector));\n        }\n        catch (e) {\n        }\n        //check for any missing elements\n        return elementsToMatch.filter(function (el) {\n            return !matching.includes(el);\n        });\n    };\n    HierarchyActions.prototype.trimHierarchy = function (document, combinedSelector, includeElements, excludeElements) {\n        var selectorLevels = combinedSelector.split(' > ');\n        var trimmedLength = selectorLevels.length;\n        var trimmedSelector = selectorLevels.slice(selectorLevels.length - trimmedLength, selectorLevels.length).join(' > ');\n        while (trimmedLength > 0 && !this.missingElements(document, trimmedSelector, includeElements).length && !this.misMatches(document, trimmedSelector, excludeElements).length && !this.overSelected(document, trimmedSelector, includeElements).length) {\n            trimmedLength--;\n            trimmedSelector = selectorLevels.slice(selectorLevels.length - trimmedLength, selectorLevels.length).join(' > ');\n            if (/\\:not\\(\\:nth/.test(selectorLevels[selectorLevels.length - trimmedLength])) { // here we have a user specified exclusion and so we shouldn't strip it out\n                return selectorLevels.slice(selectorLevels.length - (trimmedLength), selectorLevels.length).join(' > ');\n            }\n        }\n        return selectorLevels.slice(selectorLevels.length - (trimmedLength + 1), selectorLevels.length).join(' > ');\n    };\n    HierarchyActions.prototype.trimSelector = function (document, selector, includeElements, excludeElements) {\n        var selectorLevels = selector.split(' > ');\n        var trimmedLength = selectorLevels.length;\n        var trimmedSelector = selectorLevels.slice(selectorLevels.length - trimmedLength, selectorLevels.length).join(' > ');\n        while (trimmedLength < selectorLevels.length - 1 && !this.missingElements(document, trimmedSelector, includeElements).length && !this.misMatches(document, trimmedSelector, excludeElements).length) {\n            trimmedLength++;\n            trimmedSelector = selectorLevels.slice(selectorLevels.length - trimmedLength, selectorLevels.length).join(' > ');\n            trimmedSelector = this.trimAttributes(document, trimmedSelector, includeElements, excludeElements);\n        }\n        return selectorLevels.slice(selectorLevels.length - (trimmedLength + 1), selectorLevels.length).join(' > ');\n    };\n    HierarchyActions.prototype.trimAttributes = function (document, combinedSelector, includeElements, excludeElements) {\n        var allAttributes = combinedSelector.match(/\\[[^\\s\\[\\]]*\\]/g);\n        if (allAttributes && allAttributes.length) {\n            for (var _i = 0, allAttributes_1 = allAttributes; _i < allAttributes_1.length; _i++) {\n                var attribute = allAttributes_1[_i];\n                attribute = attribute.replace(/\\+/g, \"\\\\+\");\n                // we will make a selector for testing where all occurances of attribute are stripped out\n                var testSelector = combinedSelector.replace(new RegExp(attribute.replace('[', '\\\\[').replace(']', '\\\\]'), 'g'), \"\");\n                if (!this.missingElements(document, testSelector, includeElements).length && !this.misMatches(document, testSelector, excludeElements).length && !this.overSelected(document, testSelector, includeElements).length) {\n                    combinedSelector = testSelector;\n                }\n            }\n        }\n        return combinedSelector;\n    };\n    HierarchyActions.prototype.applyNthSpecifiers = function (document, combinedSelector, includeElements, excludeElements) {\n        // ensure there are no hidden elements selected by the combinedSelector before adding the nthSelectors\n        var initialMatches = Array.from(document.querySelectorAll(combinedSelector));\n        var invisible = initialMatches.filter(function (el) {\n            return !(includeElements.includes(el) || $(el).filter(':visible').length);\n        });\n        var nthMods = [];\n        // Pull out the number of siblings of the target element at each depth\n        // \"Inc Levels\" and \"Ex Levels\" here are poorly named, but are basically the array of each selector's sibling counts, transposed.\n        var inc_levels = [];\n        for (var _i = 0, includeElements_1 = includeElements; _i < includeElements_1.length; _i++) {\n            var include = includeElements_1[_i];\n            var counts = treeCount(include);\n            for (var level in counts) {\n                if (Array.isArray(inc_levels[level])) {\n                    inc_levels[level].push(counts[level]);\n                }\n                else {\n                    inc_levels[level] = [counts[level]];\n                }\n            }\n        }\n        var exc_levels = [];\n        for (var _a = 0, excludeElements_1 = excludeElements; _a < excludeElements_1.length; _a++) {\n            var exclude = excludeElements_1[_a];\n            var counts = treeCount(exclude);\n            for (var level in counts) {\n                if (Array.isArray(exc_levels[level])) {\n                    exc_levels[level].push(counts[level]);\n                }\n                else {\n                    exc_levels[level] = [counts[level]];\n                }\n            }\n        }\n        for (var level in inc_levels) {\n            var inc_nth = inc_levels[level];\n            var exc_nth = exc_levels[level];\n            // This basically removes stuff from inc_nth that is in exc_nth, but is expressed needlessly generically.\n            var unique_nth = getUnique(inc_nth, exc_nth);\n            var nthMod = getNthMods({ include: inc_nth, exclude: unique_nth.exclude });\n            nthMods[level] = (nthMod !== undefined) ? nthMod : '';\n        }\n        var split = combinedSelector.split(' > ');\n        split.reverse();\n        for (var level in split) {\n            if (nthMods[level]) {\n                split[level] += nthMods[level];\n            }\n        }\n        split.reverse();\n        return split.join(' > ');\n        // 'HELPER' FUNCTIONS\n        // Seriously these should not be nested 2 deep in the parent function, needs a refactor badly\n        function treeCount(element) {\n            var counts = [];\n            var check = element;\n            while (check.parentElement && check.tagName) {\n                var count = countSiblings(check);\n                counts.push(count);\n                check = check.parentElement;\n            }\n            return counts;\n        }\n        function countSiblings(element) {\n            var siblingCount = 1;\n            var ofTypeCount = 1;\n            var check = element;\n            while (check.previousElementSibling && check.tagName) {\n                siblingCount++;\n                if (check.previousElementSibling.tagName === check.tagName) {\n                    ofTypeCount++;\n                }\n                check = check.previousElementSibling;\n            }\n            return siblingCount;\n        }\n        // returns items in a that aren't in b and in b that aren't in a\n        function getUnique(include, exclude) {\n            var uniqueInclude = [];\n            if (include && include.length) {\n                if (exclude && exclude.length) {\n                    uniqueInclude = include.filter(function (item) {\n                        return !exclude.includes(item);\n                    });\n                }\n                else { // there are no excludes specified and so all includes are unique\n                    uniqueInclude = include;\n                }\n            }\n            var uniqueExclude = [];\n            if (exclude && exclude.length) {\n                if (include && include.length) {\n                    uniqueExclude = exclude.filter(function (item) {\n                        return !include.includes(item);\n                    });\n                }\n                else { // there are no includes specified and so all excludes are unique\n                    uniqueExclude = exclude;\n                }\n            }\n            return { include: uniqueInclude, exclude: uniqueExclude };\n        }\n        function getNthMods(sample) {\n            var include = { series: sample.include, diffs: [], expandedSeries: [] };\n            var exclude = { series: sample.exclude, diffs: [], expandedSeries: [] };\n            // So a diff here is an array, containing the differences between each chosen element for that level of the hierarchy\n            // For example, if elemnt 0 has selected the 2nd sibling at a particular level, and element 1 has the 3rd, this generates a diff of 1\n            genDiffs(include);\n            var includeMeta = findSeries(include.series, include.diffs);\n            var pattern = getSeriesFormula(includeMeta);\n            var includePattern;\n            if (pattern) {\n                includePattern = \":nth-child(\" + pattern + \")\";\n            }\n            genDiffs(exclude);\n            exclude = findSeries(exclude.series, include.diffs);\n            var excludePatterns = [];\n            if (exclude.expandedSeries.length && exclude.diffs[0] !== undefined && exclude.series[0] !== undefined && !hasCommonItem(include.series, exclude.expandedSeries)) {\n                // generate pattern\n                var m = exclude.diffs[0];\n                var c = exclude.series[0]; // use series so that any pattern starts with first excluded element\n                var offset = (c > 0) ? \"+\" + c : (c < 0) ? \"\" + c : '';\n                var pattern_1 = m + \"n\" + offset;\n                var exc_pattern = \":not(:nth-child(\" + pattern_1 + \"))\";\n                if (!excludePatterns.includes(exc_pattern)) {\n                    excludePatterns.push(exc_pattern);\n                }\n            }\n            else {\n                // generate nths\n                for (var _i = 0, _a = exclude.series; _i < _a.length; _i++) {\n                    var val = _a[_i];\n                    var exc_pattern = \":not(:nth-child(\" + val + \"))\";\n                    if (!excludePatterns.includes(exc_pattern)) {\n                        excludePatterns.push(exc_pattern);\n                    }\n                }\n            }\n            var nthMods = '';\n            if (includePattern) {\n                nthMods += includePattern;\n            }\n            if (excludePatterns.length) {\n                nthMods += \"\" + excludePatterns.join('');\n            }\n            return nthMods;\n            // HELPER FUNCTIONS\n            // Same anti-pattern as previously\n            function genDiffs(set) {\n                var diffs = [];\n                var series = set.series.sort(function (a, b) {\n                    return a - b;\n                });\n                for (var i = 0; i < series.length - 1; i++) {\n                    var newDiff = series[i + 1] - series[i];\n                    if (newDiff > 0 && !diffs.includes(newDiff)) {\n                        diffs.push(newDiff);\n                    }\n                }\n                set.diffs = diffs;\n                set.sortedDiffs = diffs.sort(function (a, b) {\n                    return a - b;\n                });\n            }\n            function hasCommonItem(a, b) {\n                var commonItem = false;\n                for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {\n                    var item = a_1[_i];\n                    if (b.includes(item)) {\n                        commonItem = true;\n                    }\n                }\n                return commonItem;\n            }\n            function allFoundIn(a, b) {\n                for (var _i = 0, a_2 = a; _i < a_2.length; _i++) {\n                    var item = a_2[_i];\n                    if (!b.includes(item)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            function getExpandedSeries(series, stepValue) {\n                if (!series.length) {\n                    return [];\n                }\n                var expandedSeries = [];\n                var sortedSeries = JSON.parse(JSON.stringify(series));\n                sortedSeries.sort(function (b, a) {\n                    var diff = b - a;\n                    return diff;\n                });\n                var seriesLimit = sortedSeries[sortedSeries.length - 1];\n                var seriesStart = seriesLimit % stepValue;\n                expandedSeries.push(seriesLimit);\n                while (expandedSeries[0] > seriesStart) {\n                    expandedSeries.unshift(expandedSeries[0] - stepValue);\n                }\n                return expandedSeries;\n            }\n            function findSeries(series, diffs) {\n                var result = { series: series, expandedSeries: [], diffs: [] };\n                if (!diffs.length) {\n                    result.expandedSeries = [series[0]];\n                }\n                else {\n                    var stepValue = diffs[0];\n                    var done = false;\n                    while (stepValue > 0 && !done) {\n                        var testSeries = getExpandedSeries(series, stepValue);\n                        if (allFoundIn(series, testSeries)) {\n                            result = { series: series, expandedSeries: testSeries, diffs: [stepValue] };\n                            done = true;\n                        }\n                        else {\n                            stepValue--;\n                        }\n                    }\n                }\n                return result;\n            }\n            function getSeriesFormula(setObject) {\n                var m; // (multiplier)\n                var c; // (x shift)\n                // set m value (multiplier)\n                if (!setObject.diffs.length) {\n                    m = 0;\n                }\n                else {\n                    m = setObject.diffs[0];\n                }\n                // set c value (x shift)\n                if (m === 0) {\n                    c = setObject.expandedSeries[0];\n                    if (c) {\n                        return \"\" + c;\n                    }\n                }\n                else {\n                    c = (setObject.expandedSeries[0] !== undefined) ? setObject.expandedSeries[0] - m : 0;\n                }\n                var nthDescriptor = m + \"n \";\n                if (c !== 0) {\n                    if (c > 0) {\n                        nthDescriptor += '+';\n                    }\n                    nthDescriptor += \"\" + c;\n                }\n                return nthDescriptor;\n            }\n        }\n    };\n    /**\n     * Takes an array of Elements and returns an Array of AttributeSelectors\n     *\n     * @param elements Array of type Elements\n     *\n     * @returns Array of AttributeSelectors\n     * @example [\n     *              'body > table[id=\"a1\"] > tr[id=\"b2\"] > div[id=\"c1\"] > div[id=\"g1] > article[id=\"a2\"][class~=\"post\"] > h3[id=\"h2\"]',\n     *              'body > div[id=\"g3] > article[id=\"a9\"][class~=\"post\"] > h3[id=\"h9\"]'\n     *              'body > section[class~=\"post\"] > h3[id=\"h10\"]'\n     *          ]\n     */\n    HierarchyActions.prototype.getAsAttributeSelectors = function (elements, document, excludeElements) {\n        var attributeSelectors = [];\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var el = elements_1[_i];\n            if (typeof el === 'string' || !(Object.keys(el).length === 0 && el.constructor === Object)) {\n                var selector = this.attributeSelector.getSelector(el);\n                var trimmedSelector = (document === undefined) ? selector : this.trimAttributes(document, selector, [el], excludeElements);\n                attributeSelectors.push(trimmedSelector);\n            }\n        }\n        return attributeSelectors;\n    };\n    /**\n     *\n     * @param hierarchyString String based on the css hierachy selector\n     *\n     * @example splitHierarchyString('body > table[id=\"a1\"] > tr[id=\"b1\"] > div[id=\"c1\"][class~=\"target\"]:not(\".sticky\") > div[id=\"g1] > article[id=\"a1\"][class~=\"post\"] > h3[id=\"h1\"]')\n     *\n     * @returns Object {\n     *                    hierarchyString, (input param String)\n     *                    tags,            (html tags from input string)\n     *                    mods,            (css selectors applied to each html tag)\n     *                    seperators       (hierarchy seperators as strings)\n     *          }\n     * @example {\n     *      hierachyString: 'body > table[id=\"a1\"] > tr[id=\"b1\"] > div[id=\"c1\"][class~=\"target\"]:not(\".sticky\") > div[id=\"g1] > article[id=\"a1\"][class~=\"post\"] > h3[id=\"h1\"]',\n     *      tags: ['body', 'table', 'tr', 'div', 'div', 'article', 'h3']\n     *      mods: ['', '[id=\"a1\"]', '[id=\"b1\"]', '', '[id=\"c1\"][class~=\"target\"]:not(\".sticky\")', '[id=\"g1]', '[id=\"a1\"][class~=\"post\"]', '[id=\"h1\"]'],\n     *      seperators: [' > ', ' > ', ' > ', ' > ', ' > ', ' > ']\n     * }\n     */\n    HierarchyActions.prototype.splitHierarchyString = function (hierarchyString) {\n        // get the seperator strings between each level\n        var seperators = []; // a seperater per level e.g. ' > '\n        var sections = hierarchyString.split(/[\\s][\\s]*/);\n        for (var s = 0; s < sections.length - 1; s++) { // populate seperators\n            seperators.push(' > ');\n        }\n        // Split the hierarchy into levels\n        var levels = hierarchyString.split(' > ').reverse();\n        // get the html tag and modifiers (attribute and alias selectors) at each level of the hierarchy\n        var tags = []; // a html tag per level\n        var mods = []; // a String with all modifier selector at each level\n        for (var depth = 0; depth < levels.length; depth++) {\n            tags[depth] = levels[depth].split(/[\\[\\:]/)[0];\n            mods[depth] = levels[depth].substr(tags[depth].length);\n        }\n        return {\n            hierarchyString: hierarchyString,\n            tags: tags,\n            mods: mods,\n            seperators: seperators //TODO: redundant?\n        };\n    };\n    /**\n     * Takes a collection of arrays and compares the items in each array\n     * return a collection of items that can be found in all the arrays provided\n     *\n     * @param arrays Array of Arrays\n     *\n     * @returns Array of items common to all arrays provided in the arrays param\n     * @example getCommonItems([[1,2,3,4,5,6,7,8,9,10,11,12], [2,4,6,8,10,12], [4,8,12]])\n     *\n     * [4, 12]\n     */\n    HierarchyActions.prototype.getCommonItems = function (arrays) {\n        if (arrays.length === 0) {\n            return [];\n        }\n        if (arrays.length === 1) {\n            return arrays[0];\n        }\n        var commonItems = [];\n        var count = {};\n        for (var _i = 0, arrays_1 = arrays; _i < arrays_1.length; _i++) {\n            var a = arrays_1[_i];\n            for (var i = 0; i < a.length; i++) {\n                count[a[i]] = (count[a[i]] === undefined) ? count[a[i]] = 1 : count[a[i]] + 1;\n            }\n        }\n        var counts = Object.values(count);\n        var items = Object.keys(count);\n        for (var c = 0; c < counts.length; c++) {\n            if (counts[c] === arrays.length) { //item was found in all arrays\n                commonItems.push(items[c]);\n            }\n        }\n        return commonItems;\n    };\n    /**\n     * Takes an array and a collection of arrays\n     * and finds the items that are unique to the single Array\n     * and items that are in the arrays but not in the single array\n     *\n     * @param singleArray Array of items\n     * @param arrays Array of Array of items\n     *\n     * @example getDiff([3,6,9,12], [[2,4,6,8,10,12], [4,8,12]])\n     *\n     * @returns Object {\n     *              unique, (Items unique to the array)\n     *              missing, (Items each array in arrays but not in the sinlge array)\n     *          }\n     * @example {\n     *      unique: [3,9],\n     *      missing: [4,8]\n     * }\n     */\n    HierarchyActions.prototype.getDiff = function (singleArray, arrays) {\n        var unique = [];\n        var missing = [];\n        var common = this.getCommonItems(arrays);\n        missing = common.filter(function (item) {\n            return singleArray.indexOf(item) === -1;\n        });\n        for (var _i = 0, singleArray_1 = singleArray; _i < singleArray_1.length; _i++) {\n            var item = singleArray_1[_i];\n            var exclusive = true;\n            for (var _a = 0, arrays_2 = arrays; _a < arrays_2.length; _a++) {\n                var arr = arrays_2[_a];\n                if (arr.indexOf(item) > -1) {\n                    exclusive = false;\n                }\n            }\n            if (exclusive) {\n                unique.push(item);\n            }\n        }\n        return { unique: unique, missing: missing };\n    };\n    HierarchyActions.prototype.selectorAtLevel = function (selector, level) {\n        var levels = selector.split(' > ');\n        var res = (levels.length - level > 0) ? levels.slice(0, levels.length - level).join(' > ') : undefined;\n        return res;\n    };\n    HierarchyActions.prototype.testSelectorAtLevelSelectors = function (document, selector, allSelectors, groups) {\n        var testGroup = document.querySelector(selector);\n        var matches = [];\n        try {\n            matches = Array.from(testGroup.querySelectorAll(allSelectors));\n        }\n        catch (e) {\n            // failing to use selector on element, no action required\n        }\n        for (var _i = 0, _a = groups[0]; _i < _a.length; _i++) {\n            var el = _a[_i];\n            if (!matches.includes(el)) {\n                // testGroup is one step too large\n                return false;\n            }\n        }\n        return true;\n    };\n    HierarchyActions.prototype.testSelectorAtLevelGrouping = function (document, selector, allSelectors, groups) {\n        var testGroup = document.querySelector(selector);\n        var matches = [];\n        try {\n            matches = Array.from(testGroup.querySelectorAll(allSelectors));\n        }\n        catch (e) {\n            // failing to use selector on element, no action required\n        }\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n            var match = matches_1[_i];\n            if (!groups[0].includes(match)) {\n                // testGroup is one step too large\n                return true;\n            }\n        }\n        return false;\n    };\n    HierarchyActions.prototype.findGroupSelectors = function (document, selectors, groups) {\n        var allSelectors = selectors.join(',');\n        var groupSelectors = [];\n        for (var _i = 0, selectors_1 = selectors; _i < selectors_1.length; _i++) {\n            var selector = selectors_1[_i];\n            var trimmed = 'body';\n            var level = 0;\n            var done = false;\n            while (trimmed !== undefined && !done) {\n                trimmed = this.selectorAtLevel(selector, level);\n                var testA = this.testSelectorAtLevelSelectors(document, trimmed, allSelectors, groups);\n                var testB = this.testSelectorAtLevelGrouping(document, trimmed, allSelectors, groups);\n                if (testA && !testB) {\n                    done = true;\n                }\n                else {\n                    if (testB) {\n                        trimmed = this.selectorAtLevel(selector, level - 1);\n                        done = true;\n                    }\n                    else {\n                        level++;\n                    }\n                }\n            }\n            groupSelectors.push(trimmed);\n        }\n        //TODO: remove duplicates before returning\n        return groupSelectors;\n    };\n    return HierarchyActions;\n}());\nexports.HierarchyActions = HierarchyActions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///809\n")},810:function(module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar ClassSelector_1 = __importDefault(__webpack_require__(811));\nvar ElementSelector_1 = __importDefault(__webpack_require__(812));\nvar HierarchySelector_1 = __importDefault(__webpack_require__(813));\nvar IdSelector_1 = __importDefault(__webpack_require__(815));\nvar InnerTextSelector_1 = __importDefault(__webpack_require__(816));\nvar ParentElementSelector_1 = __importDefault(__webpack_require__(817));\n/**\n * When the simmer selector fails, uses the naive hierarchy selector as a fallback\n */\nvar SelectorFacade = /** @class */ (function () {\n    function SelectorFacade(multiple) {\n        if (multiple === void 0) { multiple = false; }\n        this.multiple = multiple;\n        this.classSelector = new ClassSelector_1.default();\n        this.hierarchySelector = new HierarchySelector_1.default();\n        this.elementSelector = new ElementSelector_1.default();\n        this.innerTextSelector = new InnerTextSelector_1.default();\n        this.parentElementSelector = new ParentElementSelector_1.default();\n        this.idSelector = new IdSelector_1.default();\n    }\n    SelectorFacade.prototype.getSelector = function (element) {\n        var selected = false;\n        var classSelector = this.classSelector.getSelector(element);\n        var hierarchySelector = this.hierarchySelector.getSelector(element);\n        var elementSelector = this.elementSelector.getSelector(element);\n        var innerTextSelector = this.innerTextSelector.getSelector(element);\n        var parentElementSelector = this.parentElementSelector.getSelector(element);\n        var idSelector = this.idSelector.getSelector(element);\n        selected = this.generateAxiomSelector(hierarchySelector, elementSelector, parentElementSelector, innerTextSelector, classSelector, idSelector);\n        return selected;\n    };\n    SelectorFacade.prototype.generateAxiomSelector = function (hierarchy, targetElement, targetParent, innerText, classSel, idSel) {\n        var axSel = {\n            hierarchy: hierarchy,\n            targetElement: targetElement,\n            targetParent: targetParent,\n            innerText: innerText,\n            class: classSel,\n            id: idSel\n        };\n        return axSel;\n    };\n    return SelectorFacade;\n}());\nexports.SelectorFacade = SelectorFacade;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3JlY29yZGVyL1NlbGVjdG9ycy9TZWxlY3RvckZhY2FkZS50cz8wNDkxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIENsYXNzU2VsZWN0b3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9DbGFzc1NlbGVjdG9yXCIpKTtcbnZhciBFbGVtZW50U2VsZWN0b3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9FbGVtZW50U2VsZWN0b3JcIikpO1xudmFyIEhpZXJhcmNoeVNlbGVjdG9yXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vSGllcmFyY2h5U2VsZWN0b3JcIikpO1xudmFyIElkU2VsZWN0b3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9JZFNlbGVjdG9yXCIpKTtcbnZhciBJbm5lclRleHRTZWxlY3Rvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0lubmVyVGV4dFNlbGVjdG9yXCIpKTtcbnZhciBQYXJlbnRFbGVtZW50U2VsZWN0b3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9QYXJlbnRFbGVtZW50U2VsZWN0b3JcIikpO1xuLyoqXG4gKiBXaGVuIHRoZSBzaW1tZXIgc2VsZWN0b3IgZmFpbHMsIHVzZXMgdGhlIG5haXZlIGhpZXJhcmNoeSBzZWxlY3RvciBhcyBhIGZhbGxiYWNrXG4gKi9cbnZhciBTZWxlY3RvckZhY2FkZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZWxlY3RvckZhY2FkZShtdWx0aXBsZSkge1xuICAgICAgICBpZiAobXVsdGlwbGUgPT09IHZvaWQgMCkgeyBtdWx0aXBsZSA9IGZhbHNlOyB9XG4gICAgICAgIHRoaXMubXVsdGlwbGUgPSBtdWx0aXBsZTtcbiAgICAgICAgdGhpcy5jbGFzc1NlbGVjdG9yID0gbmV3IENsYXNzU2VsZWN0b3JfMS5kZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuaGllcmFyY2h5U2VsZWN0b3IgPSBuZXcgSGllcmFyY2h5U2VsZWN0b3JfMS5kZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuZWxlbWVudFNlbGVjdG9yID0gbmV3IEVsZW1lbnRTZWxlY3Rvcl8xLmRlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5pbm5lclRleHRTZWxlY3RvciA9IG5ldyBJbm5lclRleHRTZWxlY3Rvcl8xLmRlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50U2VsZWN0b3IgPSBuZXcgUGFyZW50RWxlbWVudFNlbGVjdG9yXzEuZGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmlkU2VsZWN0b3IgPSBuZXcgSWRTZWxlY3Rvcl8xLmRlZmF1bHQoKTtcbiAgICB9XG4gICAgU2VsZWN0b3JGYWNhZGUucHJvdG90eXBlLmdldFNlbGVjdG9yID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBjbGFzc1NlbGVjdG9yID0gdGhpcy5jbGFzc1NlbGVjdG9yLmdldFNlbGVjdG9yKGVsZW1lbnQpO1xuICAgICAgICB2YXIgaGllcmFyY2h5U2VsZWN0b3IgPSB0aGlzLmhpZXJhcmNoeVNlbGVjdG9yLmdldFNlbGVjdG9yKGVsZW1lbnQpO1xuICAgICAgICB2YXIgZWxlbWVudFNlbGVjdG9yID0gdGhpcy5lbGVtZW50U2VsZWN0b3IuZ2V0U2VsZWN0b3IoZWxlbWVudCk7XG4gICAgICAgIHZhciBpbm5lclRleHRTZWxlY3RvciA9IHRoaXMuaW5uZXJUZXh0U2VsZWN0b3IuZ2V0U2VsZWN0b3IoZWxlbWVudCk7XG4gICAgICAgIHZhciBwYXJlbnRFbGVtZW50U2VsZWN0b3IgPSB0aGlzLnBhcmVudEVsZW1lbnRTZWxlY3Rvci5nZXRTZWxlY3RvcihlbGVtZW50KTtcbiAgICAgICAgdmFyIGlkU2VsZWN0b3IgPSB0aGlzLmlkU2VsZWN0b3IuZ2V0U2VsZWN0b3IoZWxlbWVudCk7XG4gICAgICAgIHNlbGVjdGVkID0gdGhpcy5nZW5lcmF0ZUF4aW9tU2VsZWN0b3IoaGllcmFyY2h5U2VsZWN0b3IsIGVsZW1lbnRTZWxlY3RvciwgcGFyZW50RWxlbWVudFNlbGVjdG9yLCBpbm5lclRleHRTZWxlY3RvciwgY2xhc3NTZWxlY3RvciwgaWRTZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICB9O1xuICAgIFNlbGVjdG9yRmFjYWRlLnByb3RvdHlwZS5nZW5lcmF0ZUF4aW9tU2VsZWN0b3IgPSBmdW5jdGlvbiAoaGllcmFyY2h5LCB0YXJnZXRFbGVtZW50LCB0YXJnZXRQYXJlbnQsIGlubmVyVGV4dCwgY2xhc3NTZWwsIGlkU2VsKSB7XG4gICAgICAgIHZhciBheFNlbCA9IHtcbiAgICAgICAgICAgIGhpZXJhcmNoeTogaGllcmFyY2h5LFxuICAgICAgICAgICAgdGFyZ2V0RWxlbWVudDogdGFyZ2V0RWxlbWVudCxcbiAgICAgICAgICAgIHRhcmdldFBhcmVudDogdGFyZ2V0UGFyZW50LFxuICAgICAgICAgICAgaW5uZXJUZXh0OiBpbm5lclRleHQsXG4gICAgICAgICAgICBjbGFzczogY2xhc3NTZWwsXG4gICAgICAgICAgICBpZDogaWRTZWxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF4U2VsO1xuICAgIH07XG4gICAgcmV0dXJuIFNlbGVjdG9yRmFjYWRlO1xufSgpKTtcbmV4cG9ydHMuU2VsZWN0b3JGYWNhZGUgPSBTZWxlY3RvckZhY2FkZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///810\n')},811:function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ClassSelector = /** @class */ (function () {\n    function ClassSelector() {\n    }\n    ClassSelector.prototype.getSelector = function (el) {\n        if (!el) {\n            return;\n        }\n        var classes = el.getAttribute('class') || '';\n        classes = classes.replace(/axiom-matched|axiom-suggested-group|axiom-link|axiom-download|axiom-sel-\\S+|selectorgadget_\\w+/g, '').trim();\n        if (classes !== '') {\n            classes = '.' + classes.replace(/\\s+/g, '.');\n        }\n        return classes;\n    };\n    return ClassSelector;\n}());\nexports.default = ClassSelector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3JlY29yZGVyL1NlbGVjdG9ycy9DbGFzc1NlbGVjdG9yLnRzPzJmNzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ2xhc3NTZWxlY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDbGFzc1NlbGVjdG9yKCkge1xuICAgIH1cbiAgICBDbGFzc1NlbGVjdG9yLnByb3RvdHlwZS5nZXRTZWxlY3RvciA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNsYXNzZXMgPSBlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7XG4gICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLnJlcGxhY2UoL2F4aW9tLW1hdGNoZWR8YXhpb20tc3VnZ2VzdGVkLWdyb3VwfGF4aW9tLWxpbmt8YXhpb20tZG93bmxvYWR8YXhpb20tc2VsLVxcUyt8c2VsZWN0b3JnYWRnZXRfXFx3Ky9nLCAnJykudHJpbSgpO1xuICAgICAgICBpZiAoY2xhc3NlcyAhPT0gJycpIHtcbiAgICAgICAgICAgIGNsYXNzZXMgPSAnLicgKyBjbGFzc2VzLnJlcGxhY2UoL1xccysvZywgJy4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xhc3NlcztcbiAgICB9O1xuICAgIHJldHVybiBDbGFzc1NlbGVjdG9yO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENsYXNzU2VsZWN0b3I7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///811\n")},812:function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Fetches the element in a string format\n */\nvar ElementSelector = /** @class */ (function () {\n    function ElementSelector() {\n    }\n    ElementSelector.prototype.getSelector = function (el) {\n        el.classList.remove(\'selectorgadget_selected\');\n        return el.outerHTML.replace(/\\"/g, "\\\'");\n    };\n    return ElementSelector;\n}());\nexports.default = ElementSelector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3JlY29yZGVyL1NlbGVjdG9ycy9FbGVtZW50U2VsZWN0b3IudHM/NDI3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogRmV0Y2hlcyB0aGUgZWxlbWVudCBpbiBhIHN0cmluZyBmb3JtYXRcbiAqL1xudmFyIEVsZW1lbnRTZWxlY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbGVtZW50U2VsZWN0b3IoKSB7XG4gICAgfVxuICAgIEVsZW1lbnRTZWxlY3Rvci5wcm90b3R5cGUuZ2V0U2VsZWN0b3IgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0b3JnYWRnZXRfc2VsZWN0ZWQnKTtcbiAgICAgICAgcmV0dXJuIGVsLm91dGVySFRNTC5yZXBsYWNlKC9cXFwiL2csIFwiXFwnXCIpO1xuICAgIH07XG4gICAgcmV0dXJuIEVsZW1lbnRTZWxlY3Rvcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFbGVtZW50U2VsZWN0b3I7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///812\n')},813:function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// tslint:disable-next-line:no-var-requires\n__webpack_require__(814);\n/**\n * Generates a selector for the hierarchy of the target element from DOM\n */\nvar HierarchySelector = /** @class */ (function () {\n    function HierarchySelector() {\n    }\n    HierarchySelector.prototype.getSelector = function (el) {\n        var stack = [];\n        // Bottom-up selector generator algorithm\n        while (el.parentNode != null) {\n            // Total count of siblings for a group\n            var sibCount = 0;\n            // Index of the sibling we are targetting\n            var sibIndex = 0;\n            // tslint:disable-next-line:prefer-for-of\n            for (var i = 0; i < el.parentNode.childNodes.length; i++) {\n                var sib = el.parentNode.childNodes[i];\n                /**\n                 * Avoid adding axiom injected toolbar components from messing the heirarchy of the selector\n                 * TODO: More specific; we'll define a particular AXIOM hash and check for that (in env)\n                 */\n                if (sib.nodeType === Node.ELEMENT_NODE) {\n                    if (sib.id && (typeof sib.id === 'string' && sib.id.includes('axiom'))) {\n                        continue;\n                    }\n                    if (sib.nodeName === el.nodeName) {\n                        if (sib === el) {\n                            sibIndex = sibCount;\n                        }\n                        sibCount++;\n                    }\n                }\n            }\n            if (sibCount > 1) {\n                if (sibIndex > 1 && (sibIndex + 1 === el.parentNode.childNodes.length || $(el).is(':nth-last-of-type(1)'))) {\n                    // If last child of a group, use the following snippet instead of `nth-of-type(sibIndex+1)`\n                    stack.unshift(el.nodeName.toLowerCase() + ':nth-last-of-type(1)');\n                }\n                else {\n                    stack.unshift(el.nodeName.toLowerCase() + ':nth-of-type(' + (sibIndex + 1) + ')');\n                }\n            }\n            else {\n                stack.unshift(el.nodeName.toLowerCase());\n            }\n            el = el.parentNode;\n        }\n        // removes the html element\n        stack.shift();\n        // Test the selector and trim it if it's working fine\n        var selector = stack.join(' > ');\n        var firstEl = null;\n        while (document.querySelectorAll(selector).length === 1 && stack.length >= 2) {\n            firstEl = stack.shift();\n            selector = stack.join(' > ');\n        }\n        // This is needed because the iframe code is not feature complete\n        if (firstEl) {\n            stack.unshift(firstEl);\n        }\n        if (stack.length > 0) {\n            // joins each tags of the selector by space (children element)\n            return stack.join(' > ');\n        }\n        else {\n            // failed to fetch the selector\n            return false;\n        }\n    };\n    HierarchySelector.prototype.getSelectorForSizzle = function (el) {\n        var stack = [];\n        // Bottom-up selector generator algorithm\n        while (el.parentNode != null) {\n            // Total count of siblings for a group\n            var sibCount = 0;\n            // Index of the sibling we are targetting\n            var sibIndex = 0;\n            // tslint:disable-next-line:prefer-for-of\n            for (var i = 0; i < el.parentNode.childNodes.length; i++) {\n                var sib = el.parentNode.childNodes[i];\n                /**\n                 * Avoid adding axiom injected toolbar components from messing the heirarchy of the selector\n                 * TODO: More specific; we'll define a particular AXIOM hash and check for that (in env)\n                 */\n                if (sib.nodeType === Node.ELEMENT_NODE) {\n                    if (sib.id && (typeof sib.id === 'string' && sib.id.includes('axiom'))) {\n                        continue;\n                    }\n                    if (sib === el) {\n                        sibIndex = sibCount;\n                    }\n                    sibCount++;\n                }\n            }\n            if (sibCount > 1) {\n                var path = el.nodeName.toLowerCase();\n                // Add the classname to node element when it is requested\n                if (el.className) {\n                    var refs = el.className.split(\" \");\n                    for (var i = 0, len = refs.length; i < len; i++) {\n                        var cssName = refs[i];\n                        var escaped = this.escapeCssNames(cssName);\n                        escaped = CSS.escape(escaped);\n                        if (cssName && escaped.length > 0) {\n                            path += '.' + escaped;\n                        }\n                    }\n                }\n                if (sibIndex > 1) {\n                    path += ':nth-child(' + (sibIndex + 1) + ')';\n                }\n                stack.unshift(path);\n            }\n            else {\n                stack.unshift(el.nodeName.toLowerCase());\n            }\n            el = el.parentNode;\n        }\n        // removes the html element\n        stack = stack.slice(1);\n        if (stack.length > 0) {\n            // joins each tags of the selector by space (children element)\n            return stack.join(' > ');\n        }\n        else {\n            // failed to fetch the selector\n            return false;\n        }\n    };\n    HierarchySelector.prototype.escapeCssNames = function (name) {\n        if (name) {\n            try {\n                return name.replace(/\\bselectorgadget_\\w+\\b/g, '').replace(/\\\\/g, '\\\\\\\\').replace(/[\\#\\;\\&\\,\\.\\+\\*\\~\\'\\:\\\"\\!\\^\\$\\[\\]\\(\\)\\=\\>\\|\\/]/g, function (e) {\n                    return '\\\\' + e;\n                }).replace(/\\s+/, '');\n            }\n            catch (e) {\n                if (window.console) {\n                    console.log('---');\n                    console.log(\"exception in escapeCssNames\");\n                    console.log(name);\n                    console.log('---');\n                }\n                return '';\n            }\n        }\n        else {\n            return '';\n        }\n    };\n    return HierarchySelector;\n}());\nexports.default = HierarchySelector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///813\n")},814:function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n;(function(root, factory) {\n\t// https://github.com/umdjs/umd/blob/master/returnExports.js\n\tif (true) {\n\t\t// For Node.js.\n\t\tmodule.exports = factory(root);\n\t} else {}\n}(typeof global != 'undefined' ? global : this, function(root) {\n\n\tif (root.CSS && root.CSS.escape) {\n\t\treturn root.CSS.escape;\n\t}\n\n\t// https://drafts.csswg.org/cssom/#serialize-an-identifier\n\tvar cssEscape = function(value) {\n\t\tif (arguments.length == 0) {\n\t\t\tthrow new TypeError('`CSS.escape` requires an argument.');\n\t\t}\n\t\tvar string = String(value);\n\t\tvar length = string.length;\n\t\tvar index = -1;\n\t\tvar codeUnit;\n\t\tvar result = '';\n\t\tvar firstCodeUnit = string.charCodeAt(0);\n\t\twhile (++index < length) {\n\t\t\tcodeUnit = string.charCodeAt(index);\n\t\t\t// Note: there’s no need to special-case astral symbols, surrogate\n\t\t\t// pairs, or lone surrogates.\n\n\t\t\t// If the character is NULL (U+0000), then the REPLACEMENT CHARACTER\n\t\t\t// (U+FFFD).\n\t\t\tif (codeUnit == 0x0000) {\n\t\t\t\tresult += '\\uFFFD';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t// If the character is in the range [\\1-\\1F] (U+0001 to U+001F) or is\n\t\t\t\t// U+007F, […]\n\t\t\t\t(codeUnit >= 0x0001 && codeUnit <= 0x001F) || codeUnit == 0x007F ||\n\t\t\t\t// If the character is the first character and is in the range [0-9]\n\t\t\t\t// (U+0030 to U+0039), […]\n\t\t\t\t(index == 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039) ||\n\t\t\t\t// If the character is the second character and is in the range [0-9]\n\t\t\t\t// (U+0030 to U+0039) and the first character is a `-` (U+002D), […]\n\t\t\t\t(\n\t\t\t\t\tindex == 1 &&\n\t\t\t\t\tcodeUnit >= 0x0030 && codeUnit <= 0x0039 &&\n\t\t\t\t\tfirstCodeUnit == 0x002D\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n\t\t\t\tresult += '\\\\' + codeUnit.toString(16) + ' ';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t// If the character is the first character and is a `-` (U+002D), and\n\t\t\t\t// there is no second character, […]\n\t\t\t\tindex == 0 &&\n\t\t\t\tlength == 1 &&\n\t\t\t\tcodeUnit == 0x002D\n\t\t\t) {\n\t\t\t\tresult += '\\\\' + string.charAt(index);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If the character is not handled by one of the above rules and is\n\t\t\t// greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or\n\t\t\t// is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to\n\t\t\t// U+005A), or [a-z] (U+0061 to U+007A), […]\n\t\t\tif (\n\t\t\t\tcodeUnit >= 0x0080 ||\n\t\t\t\tcodeUnit == 0x002D ||\n\t\t\t\tcodeUnit == 0x005F ||\n\t\t\t\tcodeUnit >= 0x0030 && codeUnit <= 0x0039 ||\n\t\t\t\tcodeUnit >= 0x0041 && codeUnit <= 0x005A ||\n\t\t\t\tcodeUnit >= 0x0061 && codeUnit <= 0x007A\n\t\t\t) {\n\t\t\t\t// the character itself\n\t\t\t\tresult += string.charAt(index);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Otherwise, the escaped character.\n\t\t\t// https://drafts.csswg.org/cssom/#escape-a-character\n\t\t\tresult += '\\\\' + string.charAt(index);\n\n\t\t}\n\t\treturn result;\n\t};\n\n\tif (!root.CSS) {\n\t\troot.CSS = {};\n\t}\n\n\troot.CSS.escape = cssEscape;\n\treturn cssEscape;\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(38)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy5lc2NhcGUvY3NzLmVzY2FwZS5qcz9lN2E1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBodHRwczovL210aHMuYmUvY3NzZXNjYXBlIHYxLjUuMSBieSBAbWF0aGlhcyB8IE1JVCBsaWNlbnNlICovXG47KGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9yZXR1cm5FeHBvcnRzLmpzXG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0Jykge1xuXHRcdC8vIEZvciBOb2RlLmpzLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyb290KTtcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEZvciBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5LmJpbmQocm9vdCwgcm9vdCkpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIEZvciBicm93c2VyIGdsb2JhbHMgKG5vdCBleHBvc2luZyB0aGUgZnVuY3Rpb24gc2VwYXJhdGVseSkuXG5cdFx0ZmFjdG9yeShyb290KTtcblx0fVxufSh0eXBlb2YgZ2xvYmFsICE9ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdGhpcywgZnVuY3Rpb24ocm9vdCkge1xuXG5cdGlmIChyb290LkNTUyAmJiByb290LkNTUy5lc2NhcGUpIHtcblx0XHRyZXR1cm4gcm9vdC5DU1MuZXNjYXBlO1xuXHR9XG5cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNzZXJpYWxpemUtYW4taWRlbnRpZmllclxuXHR2YXIgY3NzRXNjYXBlID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdgQ1NTLmVzY2FwZWAgcmVxdWlyZXMgYW4gYXJndW1lbnQuJyk7XG5cdFx0fVxuXHRcdHZhciBzdHJpbmcgPSBTdHJpbmcodmFsdWUpO1xuXHRcdHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciBjb2RlVW5pdDtcblx0XHR2YXIgcmVzdWx0ID0gJyc7XG5cdFx0dmFyIGZpcnN0Q29kZVVuaXQgPSBzdHJpbmcuY2hhckNvZGVBdCgwKTtcblx0XHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0Y29kZVVuaXQgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCk7XG5cdFx0XHQvLyBOb3RlOiB0aGVyZeKAmXMgbm8gbmVlZCB0byBzcGVjaWFsLWNhc2UgYXN0cmFsIHN5bWJvbHMsIHN1cnJvZ2F0ZVxuXHRcdFx0Ly8gcGFpcnMsIG9yIGxvbmUgc3Vycm9nYXRlcy5cblxuXHRcdFx0Ly8gSWYgdGhlIGNoYXJhY3RlciBpcyBOVUxMIChVKzAwMDApLCB0aGVuIHRoZSBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdC8vIChVK0ZGRkQpLlxuXHRcdFx0aWYgKGNvZGVVbml0ID09IDB4MDAwMCkge1xuXHRcdFx0XHRyZXN1bHQgKz0gJ1xcdUZGRkQnO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKFxuXHRcdFx0XHQvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIGluIHRoZSByYW5nZSBbXFwxLVxcMUZdIChVKzAwMDEgdG8gVSswMDFGKSBvciBpc1xuXHRcdFx0XHQvLyBVKzAwN0YsIFvigKZdXG5cdFx0XHRcdChjb2RlVW5pdCA+PSAweDAwMDEgJiYgY29kZVVuaXQgPD0gMHgwMDFGKSB8fCBjb2RlVW5pdCA9PSAweDAwN0YgfHxcblx0XHRcdFx0Ly8gSWYgdGhlIGNoYXJhY3RlciBpcyB0aGUgZmlyc3QgY2hhcmFjdGVyIGFuZCBpcyBpbiB0aGUgcmFuZ2UgWzAtOV1cblx0XHRcdFx0Ly8gKFUrMDAzMCB0byBVKzAwMzkpLCBb4oCmXVxuXHRcdFx0XHQoaW5kZXggPT0gMCAmJiBjb2RlVW5pdCA+PSAweDAwMzAgJiYgY29kZVVuaXQgPD0gMHgwMDM5KSB8fFxuXHRcdFx0XHQvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIHRoZSBzZWNvbmQgY2hhcmFjdGVyIGFuZCBpcyBpbiB0aGUgcmFuZ2UgWzAtOV1cblx0XHRcdFx0Ly8gKFUrMDAzMCB0byBVKzAwMzkpIGFuZCB0aGUgZmlyc3QgY2hhcmFjdGVyIGlzIGEgYC1gIChVKzAwMkQpLCBb4oCmXVxuXHRcdFx0XHQoXG5cdFx0XHRcdFx0aW5kZXggPT0gMSAmJlxuXHRcdFx0XHRcdGNvZGVVbml0ID49IDB4MDAzMCAmJiBjb2RlVW5pdCA8PSAweDAwMzkgJiZcblx0XHRcdFx0XHRmaXJzdENvZGVVbml0ID09IDB4MDAyRFxuXHRcdFx0XHQpXG5cdFx0XHQpIHtcblx0XHRcdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNlc2NhcGUtYS1jaGFyYWN0ZXItYXMtY29kZS1wb2ludFxuXHRcdFx0XHRyZXN1bHQgKz0gJ1xcXFwnICsgY29kZVVuaXQudG9TdHJpbmcoMTYpICsgJyAnO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKFxuXHRcdFx0XHQvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgYW5kIGlzIGEgYC1gIChVKzAwMkQpLCBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgbm8gc2Vjb25kIGNoYXJhY3RlciwgW+KApl1cblx0XHRcdFx0aW5kZXggPT0gMCAmJlxuXHRcdFx0XHRsZW5ndGggPT0gMSAmJlxuXHRcdFx0XHRjb2RlVW5pdCA9PSAweDAwMkRcblx0XHRcdCkge1xuXHRcdFx0XHRyZXN1bHQgKz0gJ1xcXFwnICsgc3RyaW5nLmNoYXJBdChpbmRleCk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIG5vdCBoYW5kbGVkIGJ5IG9uZSBvZiB0aGUgYWJvdmUgcnVsZXMgYW5kIGlzXG5cdFx0XHQvLyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gVSswMDgwLCBpcyBgLWAgKFUrMDAyRCkgb3IgYF9gIChVKzAwNUYpLCBvclxuXHRcdFx0Ly8gaXMgaW4gb25lIG9mIHRoZSByYW5nZXMgWzAtOV0gKFUrMDAzMCB0byBVKzAwMzkpLCBbQS1aXSAoVSswMDQxIHRvXG5cdFx0XHQvLyBVKzAwNUEpLCBvciBbYS16XSAoVSswMDYxIHRvIFUrMDA3QSksIFvigKZdXG5cdFx0XHRpZiAoXG5cdFx0XHRcdGNvZGVVbml0ID49IDB4MDA4MCB8fFxuXHRcdFx0XHRjb2RlVW5pdCA9PSAweDAwMkQgfHxcblx0XHRcdFx0Y29kZVVuaXQgPT0gMHgwMDVGIHx8XG5cdFx0XHRcdGNvZGVVbml0ID49IDB4MDAzMCAmJiBjb2RlVW5pdCA8PSAweDAwMzkgfHxcblx0XHRcdFx0Y29kZVVuaXQgPj0gMHgwMDQxICYmIGNvZGVVbml0IDw9IDB4MDA1QSB8fFxuXHRcdFx0XHRjb2RlVW5pdCA+PSAweDAwNjEgJiYgY29kZVVuaXQgPD0gMHgwMDdBXG5cdFx0XHQpIHtcblx0XHRcdFx0Ly8gdGhlIGNoYXJhY3RlciBpdHNlbGZcblx0XHRcdFx0cmVzdWx0ICs9IHN0cmluZy5jaGFyQXQoaW5kZXgpO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG5cdFx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2VzY2FwZS1hLWNoYXJhY3RlclxuXHRcdFx0cmVzdWx0ICs9ICdcXFxcJyArIHN0cmluZy5jaGFyQXQoaW5kZXgpO1xuXG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0aWYgKCFyb290LkNTUykge1xuXHRcdHJvb3QuQ1NTID0ge307XG5cdH1cblxuXHRyb290LkNTUy5lc2NhcGUgPSBjc3NFc2NhcGU7XG5cdHJldHVybiBjc3NFc2NhcGU7XG5cbn0pKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///814\n")},815:function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Fetches the parent of the element in a string format\n */\nvar IdSelector = /** @class */ (function () {\n    function IdSelector() {\n    }\n    IdSelector.prototype.getSelector = function (el) {\n        return "#" + el.id;\n    };\n    return IdSelector;\n}());\nexports.default = IdSelector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3JlY29yZGVyL1NlbGVjdG9ycy9JZFNlbGVjdG9yLnRzPzMyNGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEZldGNoZXMgdGhlIHBhcmVudCBvZiB0aGUgZWxlbWVudCBpbiBhIHN0cmluZyBmb3JtYXRcbiAqL1xudmFyIElkU2VsZWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSWRTZWxlY3RvcigpIHtcbiAgICB9XG4gICAgSWRTZWxlY3Rvci5wcm90b3R5cGUuZ2V0U2VsZWN0b3IgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgcmV0dXJuIFwiI1wiICsgZWwuaWQ7XG4gICAgfTtcbiAgICByZXR1cm4gSWRTZWxlY3Rvcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBJZFNlbGVjdG9yO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///815\n')},816:function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Fetches the inner text of an element in a string\n */\nvar InnerTextSelector = /** @class */ (function () {\n    function InnerTextSelector() {\n    }\n    InnerTextSelector.prototype.getSelector = function (el) {\n        return el.textContent.trim();\n    };\n    return InnerTextSelector;\n}());\nexports.default = InnerTextSelector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3JlY29yZGVyL1NlbGVjdG9ycy9Jbm5lclRleHRTZWxlY3Rvci50cz9mNmFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBGZXRjaGVzIHRoZSBpbm5lciB0ZXh0IG9mIGFuIGVsZW1lbnQgaW4gYSBzdHJpbmdcbiAqL1xudmFyIElubmVyVGV4dFNlbGVjdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIElubmVyVGV4dFNlbGVjdG9yKCkge1xuICAgIH1cbiAgICBJbm5lclRleHRTZWxlY3Rvci5wcm90b3R5cGUuZ2V0U2VsZWN0b3IgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgcmV0dXJuIGVsLnRleHRDb250ZW50LnRyaW0oKTtcbiAgICB9O1xuICAgIHJldHVybiBJbm5lclRleHRTZWxlY3Rvcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBJbm5lclRleHRTZWxlY3RvcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///816\n')},817:function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Fetches the parent of the element in a string format\n */\nvar ParentElementSelector = /** @class */ (function () {\n    function ParentElementSelector() {\n    }\n    ParentElementSelector.prototype.getSelector = function (el) {\n        el.classList.remove(\'selectorgadget_selected\');\n        return el.parentElement.outerHTML.replace(/\\"/g, "\\\'");\n    };\n    return ParentElementSelector;\n}());\nexports.default = ParentElementSelector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3JlY29yZGVyL1NlbGVjdG9ycy9QYXJlbnRFbGVtZW50U2VsZWN0b3IudHM/ZmIxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogRmV0Y2hlcyB0aGUgcGFyZW50IG9mIHRoZSBlbGVtZW50IGluIGEgc3RyaW5nIGZvcm1hdFxuICovXG52YXIgUGFyZW50RWxlbWVudFNlbGVjdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhcmVudEVsZW1lbnRTZWxlY3RvcigpIHtcbiAgICB9XG4gICAgUGFyZW50RWxlbWVudFNlbGVjdG9yLnByb3RvdHlwZS5nZXRTZWxlY3RvciA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RvcmdhZGdldF9zZWxlY3RlZCcpO1xuICAgICAgICByZXR1cm4gZWwucGFyZW50RWxlbWVudC5vdXRlckhUTUwucmVwbGFjZSgvXFxcIi9nLCBcIlxcJ1wiKTtcbiAgICB9O1xuICAgIHJldHVybiBQYXJlbnRFbGVtZW50U2VsZWN0b3I7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gUGFyZW50RWxlbWVudFNlbGVjdG9yO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///817\n')},818:function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ScrapeHelper_1 = __webpack_require__(405);\nvar BorderHighlight = /** @class */ (function () {\n    function BorderHighlight(doc, iframeElement, iframeSupportEnabled) {\n        var _this = this;\n        if (iframeElement === void 0) { iframeElement = false; }\n        if (iframeSupportEnabled === void 0) { iframeSupportEnabled = false; }\n        this.borderWidth = 5;\n        this.borderPadding = 2;\n        this.activeSelectorIndex = 0;\n        this.resultType = 'textContent';\n        this.scrapeHelper = new ScrapeHelper_1.ScrapeHelper();\n        this.doc = doc;\n        this.iframeElement = iframeElement;\n        this.iframeSupportEnabled = iframeSupportEnabled;\n        doc.onscroll = function (e) {\n            jQuery(_this.borderElement).hide();\n        };\n    }\n    BorderHighlight.prototype.updateactiveSelectorIndex = function (id) {\n        this.activeSelectorIndex = id;\n    };\n    BorderHighlight.prototype.updateResultType = function (resultType) {\n        this.resultType = (resultType === 'axiom-download' ? \"outerHTML\" : resultType);\n    };\n    BorderHighlight.prototype.updateWindex = function (windex) {\n        this.windex = windex;\n    };\n    BorderHighlight.prototype.inject = function () {\n        this.setupBorder();\n        jQuery(this.doc).on('mouseover.axiom-selection', this.mouseoverHandler.bind(this));\n        jQuery(this.doc).on('mouseout.axiom-selection:not(.axiom-shield-overlay)', this.mouseLeaveHandler.bind(this));\n    };\n    BorderHighlight.prototype.eject = function () {\n        this.removeBorderFromDom();\n        jQuery(this.doc).off('mouseover.axiom-selection');\n        jQuery(this.doc).off('mouseout.axiom-selection');\n    };\n    BorderHighlight.prototype.setupBorder = function () {\n        if (!this.borderElement) {\n            var width_1 = this.borderWidth + 'px';\n            var bottomHeight = this.borderWidth * 2 + 'px';\n            this.shieldOverlay = jQuery(\"<div class=\\\"axiom-shield-overlay axiom-tool axiom-selector-ignore\\\"></div>\");\n            this.borderElement = jQuery(\"<div class=\\\"axiom-tool-highlight-border\\\"></div>\").hide();\n            this.bTop = jQuery('<div>').addClass('axiom-border-highlight').addClass('axiom-border-top').css('height', width_1);\n            this.bLeft = jQuery('<div>').addClass('axiom-border-highlight').addClass('axiom-border-left').css('width', width_1);\n            this.bBottom = jQuery('<div>').addClass('axiom-border-highlight').addClass('axiom-border-bottom').css('min-height', width_1).css('text-overflow', 'clip').css('font-family', 'Quicksand,sans-serif');\n            $(this.bBottom).each(function (index, el) {\n                el.style.setProperty('padding-left', width_1, 'important');\n            });\n            this.preview = jQuery(\"\\n            <div id=\\\"axiom-preview-wrapper\\\"\\n            style=\\\"\\n            position:relative!important;\\n            left:0!important;\\n            display: flex!important;\\n            justify-content: center!important;\\n            padding: 0!important;\\n            justify-content: start!important;\\n            font-size:12px!important;\\n            line-height:0px!important;\\n            background-color;red!important;\\n            background;red!important;\\n            min-height:10px!important;\\n            height:auto!important;\\n            max-width:400px!important;\\n            width: auto!important;\\n            white-space:nowrap!important;\\n            overflow:visible!important;\\n            overflow-x: clip!important;\\n            margin: 0!important;\\n            float:none!important;\\n            font-weight:bold!important;\\n            box-sizing: initial!important;\\n            top: 5px!important;\\n            scrollbar-width: none!important;\\n            \\\"\\n            >\\n              <p\\n              ></p>\\n            </div>\"); //TODO: hide this\n            this.bBottom.append(this.preview);\n            this.bRight = jQuery('<div>').addClass('axiom-border-highlight').addClass('axiom-border-right').css('width', width_1);\n            this.addBorderToDom();\n        }\n    };\n    BorderHighlight.prototype.removeBorderFromDom = function () {\n        if (this.borderElement) {\n            this.borderElement.remove();\n            this.bTop.remove();\n            this.bRight.remove();\n            this.bBottom.remove();\n            this.bRight.remove();\n        }\n        this.borderElement = this.bTop = this.bRight = this.bBottom = this.bLeft = null;\n    };\n    BorderHighlight.prototype.addBorderToDom = function () {\n        this.borderElement.append(this.shieldOverlay);\n        this.borderElement.append(this.bTop);\n        this.borderElement.append(this.bRight);\n        this.borderElement.append(this.bBottom);\n        this.borderElement.append(this.bLeft);\n        this.doc.body.appendChild(this.borderElement.get(0));\n    };\n    BorderHighlight.prototype.showBorder = function () {\n        this.borderElement.show();\n    };\n    BorderHighlight.prototype.removeBorder = function () {\n        if (this.borderElement) {\n            this.borderElement.hide();\n        }\n    };\n    BorderHighlight.prototype.makeBorders = function (targetElem) {\n        var _this = this;\n        if (targetElem.tagName === 'IFRAME') {\n            return;\n        }\n        var element = jQuery(targetElem);\n        var position = element.offset();\n        var top = position.top - scrollY;\n        var left = position.left;\n        var width = element.outerWidth();\n        var height = element.outerHeight();\n        this.preview.show();\n        this.bTop.css('width', (width + this.borderPadding * 2 + this.borderWidth * 2) + 'px')\n            .css('top', (top - this.borderWidth - this.borderPadding) + 'px')\n            .css('left', (left - this.borderPadding - this.borderWidth) + 'px');\n        this.bRight.css('height', (height + this.borderPadding * 2) + 'px')\n            .css('top', (top - this.borderPadding) + 'px')\n            .css('left', (left + width + this.borderPadding) + 'px');\n        this.bBottom.css('width', (width + this.borderPadding * 2 + this.borderWidth * 2 - 5) + 'px')\n            .css('top', (top + height + this.borderPadding) + 'px')\n            .css('left', (left - this.borderPadding - this.borderWidth) + 'px')\n            .css('color', '#F5F5F5')\n            .css('height', this.borderWidth * 4 + 'px');\n        this.bLeft.css('height', (height + this.borderPadding * 2) + 'px')\n            .css('top', (top - this.borderPadding) + 'px')\n            .css('left', (left - this.borderPadding - this.borderWidth) + 'px');\n        this.shieldOverlay.css('top', top + 'px') // used to prevent selection of invlaid elements (iframes)\n            .css('left', left + 'px');\n        if (targetElem.tagName.toLowerCase() === 'iframe') { // we expand the shield over the dissalowed elements\n            this.shieldOverlay.css('width', width + 'px')\n                .css('height', height + 'px');\n            this.shieldOverlay.off(\"click\");\n            this.shieldOverlay.click(function (e) {\n                _this.shieldOverlay.off(\"click\");\n                if (_this.windex !== undefined) {\n                    var navigate = confirm(\"You have selected content within an iframe that can't currently be selected. Would you like to try to goto the url?\\n(Current selections will be lost if you click 'OK')\");\n                    if (navigate) {\n                        var currentURL = window.location.href;\n                        var frameSrc = targetElem.src;\n                        // add goto widget with frame src\n                        chrome.runtime.sendMessage({\n                            action: \"change_url\",\n                            origin: currentURL,\n                            target: frameSrc,\n                            windex: _this.windex\n                        });\n                    }\n                }\n                else {\n                    alert(\"Magic button cannot be placed here, as this is a window getting content from a different website. Please select another area of the page\");\n                }\n            });\n        }\n        else {\n            this.shieldOverlay.css('width', 0 + 'px')\n                .css('height', 0 + 'px');\n            this.shieldOverlay.off(\"click\");\n        }\n        // Make a way to target clicks on these border elements to direct to the element beneath\n        // TODO\n        // modify the colors if we are removing a selection\n        var removingSelection = $(targetElem).is(\".axiom-sel-suggested-\" + this.activeSelectorIndex + \", .axiom-sel-selected-\" + this.activeSelectorIndex);\n        if (removingSelection) {\n            $(\".axiom-border-highlight\").each(function (index, el) {\n                el.style.setProperty(\"background-color\", \"rgb(245, 58, 58)\", \"important\");\n            });\n        }\n        else {\n            $(\".axiom-border-highlight\").each(function (index, el) {\n                el.style.setProperty(\"background-color\", \"#FFAB00\", \"important\");\n            });\n        }\n        if (this.iframeElement && !this.iframeSupportEnabled) {\n            this.preview.children('p').text('Enable iframe support');\n        }\n        else {\n            var preview = this.scrapeHelper.getData(targetElem, this.resultType);\n            if (this.resultType === 'textContent') {\n                var text = targetElem['innerText'];\n                if (text) {\n                    preview = text;\n                }\n                else {\n                    preview = '';\n                }\n            }\n            preview = (preview) ? preview : '';\n            preview = (preview.length > 25) ? preview.substr(0, 25) + '...' : preview;\n            this.preview.children('p').text(preview);\n        }\n        this.showBorder();\n    };\n    /**\n     * This is just debarring the chrome extension items, we can make this more cool\n     *\n     * @param element\n     */\n    BorderHighlight.prototype.selectable = function (element) {\n        if (element.tagName.toLowerCase() === \"body\" || jQuery(element).hasClass('axiom-selector-ignore')) {\n            return false;\n        }\n        return true;\n    };\n    BorderHighlight.prototype.mouseoverHandler = function (e) {\n        var target = e.target;\n        if (this.resultType === 'link') {\n            while (target.parentElement && !/\\S/.test(this.scrapeHelper.getData(target, this.resultType))) {\n                target = target.parentElement;\n            }\n        }\n        if (this.selectable(target) && e.target !== this.shieldOverlay.get(0)) {\n            this.makeBorders(target);\n        }\n    };\n    BorderHighlight.prototype.mouseLeaveHandler = function (e) {\n        if (e.target === this.doc.body || e.target === this.doc.body.parentNode || e.relatedTarget === this.shieldOverlay.get(0)) {\n            return false;\n        }\n        this.removeBorder();\n        return false;\n    };\n    BorderHighlight.prototype.setIframeSupportEnabled = function (val) {\n        this.iframeSupportEnabled = val;\n    };\n    return BorderHighlight;\n}());\nexports.BorderHighlight = BorderHighlight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///818\n")},820:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\nvar math_namespaceObject = {};\n__webpack_require__.r(math_namespaceObject);\n__webpack_require__.d(math_namespaceObject, "min", function() { return min; });\n__webpack_require__.d(math_namespaceObject, "max", function() { return max; });\n\n// CONCATENATED MODULE: ./node_modules/diff-match-patch-typescript/dist/es/constants/index.js\n/**\n * Define some regex patterns for matching boundaries.\n *\n * Ported by [xiaochao.k@gmail.com](https://github.com/nonoroazoro)\n */\nvar NON_ALPHA_NUMERIC_REGEX = /[^a-zA-Z0-9]/;\nvar WHITESPACE_REGEX = /\\s/;\nvar LINEBREAK_REGEX = /[\\r\\n]/;\nvar BLANKLINE_END_REGEX = /\\n\\r?\\n$/;\nvar BLANKLINE_START_REGEX = /^\\r?\\n\\r?\\n/;\n\n// CONCATENATED MODULE: ./node_modules/diff-match-patch-typescript/dist/es/types/DiffOperation.js\n/**\n * Represents the operations of a `Diff`.\n *\n * The data structure representing a `Diff` is an array of tuples:\n * [[DIFF_DELETE, \'Hello\'], [DIFF_INSERT, \'Goodbye\'], [DIFF_EQUAL, \' world.\']]\n * which means: delete \'Hello\', add \'Goodbye\' and keep \' world.\'\n *\n * Ported by [xiaochao.k@gmail.com](https://github.com/nonoroazoro)\n */\nvar DiffOperation;\n(function (DiffOperation) {\n    DiffOperation[DiffOperation["DIFF_DELETE"] = -1] = "DIFF_DELETE";\n    DiffOperation[DiffOperation["DIFF_INSERT"] = 1] = "DIFF_INSERT";\n    DiffOperation[DiffOperation["DIFF_EQUAL"] = 0] = "DIFF_EQUAL";\n})(DiffOperation || (DiffOperation = {}));\n\n// CONCATENATED MODULE: ./node_modules/diff-match-patch-typescript/dist/es/types/index.js\n\n\n// CONCATENATED MODULE: ./node_modules/diff-match-patch-typescript/dist/es/utils/math.js\n/**\n * Returns the smaller number.\n */\nfunction min(a, b) {\n    return a < b ? a : b;\n}\n/**\n * Returns the larger number.\n */\nfunction max(a, b) {\n    return a > b ? a : b;\n}\n\n// CONCATENATED MODULE: ./node_modules/diff-match-patch-typescript/dist/es/utils/index.js\n\nvar math = math_namespaceObject;\n\n// CONCATENATED MODULE: ./node_modules/diff-match-patch-typescript/dist/es/core/PatchObject.js\n\n/**\n * Class representing one patch operation.\n *\n * Ported by [xiaochao.k@gmail.com](https://github.com/nonoroazoro)\n */\nvar PatchObject_PatchObject = /** @class */ (function () {\n    function PatchObject() {\n        this.diffs = [];\n        this.start1 = 0;\n        this.start2 = 0;\n        this.length1 = 0;\n        this.length2 = 0;\n    }\n    /**\n     * Emulate GNU diff format.\n     * Header: @@ -382,8 +481,9 @@\n     * Indices are printed as 1-based, not 0-based.\n     *\n     * @returns {string} The GNU diff string.\n     */\n    PatchObject.prototype.toString = function () {\n        var coords1;\n        var coords2;\n        if (this.length1 === 0) {\n            coords1 = this.start1 + ",0";\n        }\n        else if (this.length1 === 1) {\n            coords1 = this.start1 + 1;\n        }\n        else {\n            coords1 = (this.start1 + 1) + "," + this.length1;\n        }\n        if (this.length2 === 0) {\n            coords2 = this.start2 + ",0";\n        }\n        else if (this.length2 === 1) {\n            coords2 = this.start2 + 1;\n        }\n        else {\n            coords2 = (this.start2 + 1) + "," + this.length2;\n        }\n        var text = ["@@ -" + coords1 + " +" + coords2 + " @@\\n"];\n        var op;\n        // Escape the body of the patch with %xx notation.\n        for (var x = 0; x < this.diffs.length; x++) {\n            switch (this.diffs[x][0]) {\n                case DiffOperation.DIFF_INSERT:\n                    op = "+";\n                    break;\n                case DiffOperation.DIFF_DELETE:\n                    op = "-";\n                    break;\n                case DiffOperation.DIFF_EQUAL:\n                    op = " ";\n                    break;\n            }\n            text[x + 1] = op + encodeURI(this.diffs[x][1]) + "\\n";\n        }\n        return text.join("").replace(/%20/g, " ");\n    };\n    return PatchObject;\n}());\n\n\n// CONCATENATED MODULE: ./node_modules/diff-match-patch-typescript/dist/es/core/DiffMatchPatch.js\n\n\n\n\n/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n *\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n *\n * Ported by [xiaochao.k@gmail.com](https://github.com/nonoroazoro)\n */\n/**\n * Class containing the diff, match and patch methods.\n */\nvar DiffMatchPatch_DiffMatchPatch = /** @class */ (function () {\n    function DiffMatchPatch() {\n        // Defaults.\n        // Redefine these in your program to override the defaults.\n        /**\n         * Number of seconds to map a diff before giving up (0 for infinity).\n         */\n        this.diffTimeout = 1.0;\n        /**\n         * Cost of an empty edit operation in terms of edit characters.\n         */\n        this.diffEditCost = 4;\n        /**\n         * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n         */\n        this.matchThreshold = 0.5;\n        /**\n         * How far to search for a match (0 = exact location, 1000+ = broad match).\n         * A match this many characters away from the expected location will add\n         * 1.0 to the score (0.0 is a perfect match).\n         */\n        this.matchDistance = 1000;\n        /**\n         * When deleting a large block of text (over ~64 characters), how close do\n         * the contents have to be to match the expected contents. (0.0 = perfection,\n         * 1.0 = very loose). Note that Match_Threshold controls how closely the\n         * end points of a delete need to match.\n         */\n        this.patchDeleteThreshold = 0.5;\n        /**\n         * Chunk size for context length.\n         */\n        this.patchMargin = 4;\n        /**\n         * The number of bits in an int.\n         */\n        this.matchMaxBits = 32;\n        //#endregion PATCH FUNCTIONS (private)\n    }\n    //#region DIFF FUNCTIONS (public)\n    /**\n     * Find the differences between two texts. Simplifies the problem by stripping\n     * any common prefix or suffix off the texts before diffing.\n     *\n     * @param {string} text1 Old string to be diffed.\n     * @param {string} text2 New string to be diffed.\n     * @param {boolean} [optChecklines] Optional speedup flag. If present and false,\n     * then don\'t run a line-level diff first to identify the changed areas.\n     * Defaults to true, which does a faster, slightly less optimal diff.\n     * @param {number} [optDeadline] Optional time when the diff should be complete\n     * by. Used internally for recursive calls. Users should set DiffTimeout\n     * instead.\n     * @returns {Diff[]} Array of diff tuples.\n     */\n    DiffMatchPatch.prototype.diff_main = function (text1, text2, optChecklines, optDeadline) {\n        // Set a deadline by which time the diff must be complete.\n        if (typeof optDeadline === "undefined") {\n            if (this.diffTimeout <= 0) {\n                optDeadline = Number.MAX_VALUE;\n            }\n            else {\n                optDeadline = Date.now() + this.diffTimeout * 1000;\n            }\n        }\n        var deadline = optDeadline;\n        // Check for null inputs.\n        if (text1 == null || text2 == null) {\n            throw new Error("Null input. (diff_main)");\n        }\n        // Check for equality (speedup).\n        if (text1 === text2) {\n            if (text1) {\n                return [[DiffOperation.DIFF_EQUAL, text1]];\n            }\n            return [];\n        }\n        if (typeof optChecklines === "undefined") {\n            optChecklines = true;\n        }\n        var checklines = optChecklines;\n        // Trim off common prefix (speedup).\n        var commonlength = this.diff_commonPrefix(text1, text2);\n        var commonprefix = text1.substring(0, commonlength);\n        text1 = text1.substring(commonlength);\n        text2 = text2.substring(commonlength);\n        // Trim off common suffix (speedup).\n        commonlength = this.diff_commonSuffix(text1, text2);\n        var commonsuffix = text1.substring(text1.length - commonlength);\n        text1 = text1.substring(0, text1.length - commonlength);\n        text2 = text2.substring(0, text2.length - commonlength);\n        // Compute the diff on the middle block.\n        var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n        // Restore the prefix and suffix.\n        if (commonprefix) {\n            diffs.unshift([DiffOperation.DIFF_EQUAL, commonprefix]);\n        }\n        if (commonsuffix) {\n            diffs.push([DiffOperation.DIFF_EQUAL, commonsuffix]);\n        }\n        this.diff_cleanupMerge(diffs);\n        return diffs;\n    };\n    /**\n     * Determine the common prefix of two strings.\n     *\n     * @param {string} text1 First string.\n     * @param {string} text2 Second string.\n     * @returns {number} The number of characters common to the start of each string.\n     */\n    DiffMatchPatch.prototype.diff_commonPrefix = function (text1, text2) {\n        // Quick check for common null cases.\n        if (!text1 ||\n            !text2 ||\n            text1.charAt(0) !== text2.charAt(0)) {\n            return 0;\n        }\n        // Binary search.\n        // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n        var pointermin = 0;\n        var pointermax = math.min(text1.length, text2.length);\n        var pointermid = pointermax;\n        var pointerstart = 0;\n        while (pointermin < pointermid) {\n            if (text1.substring(pointerstart, pointermid) ===\n                text2.substring(pointerstart, pointermid)) {\n                pointermin = pointermid;\n                pointerstart = pointermin;\n            }\n            else {\n                pointermax = pointermid;\n            }\n            pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n        }\n        return pointermid;\n    };\n    /**\n     * Determine the common suffix of two strings.\n     *\n     * @param {string} text1 First string.\n     * @param {string} text2 Second string.\n     * @returns {number} The number of characters common to the end of each string.\n     */\n    DiffMatchPatch.prototype.diff_commonSuffix = function (text1, text2) {\n        // Quick check for common null cases.\n        if (!text1 ||\n            !text2 ||\n            text1.charAt(text1.length - 1) !== text2.charAt(text2.length - 1)) {\n            return 0;\n        }\n        // Binary search.\n        // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n        var pointermin = 0;\n        var pointermax = math.min(text1.length, text2.length);\n        var pointermid = pointermax;\n        var pointerend = 0;\n        while (pointermin < pointermid) {\n            if (text1.substring(text1.length - pointermid, text1.length - pointerend) ===\n                text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n                pointermin = pointermid;\n                pointerend = pointermin;\n            }\n            else {\n                pointermax = pointermid;\n            }\n            pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n        }\n        return pointermid;\n    };\n    /**\n     * Reduce the number of edits by eliminating semantically trivial equalities.\n     *\n     * @param {Diff[]} diffs Array of diff tuples.\n     */\n    DiffMatchPatch.prototype.diff_cleanupSemantic = function (diffs) {\n        var changes = false;\n        var equalities = []; // Stack of indices where equalities are found.\n        var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n        var lastEquality = null;\n        // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n        var pointer = 0; // Index of current position.\n        // Number of characters that changed prior to the equality.\n        var lengthInsertions1 = 0;\n        var lengthDeletions1 = 0;\n        // Number of characters that changed after the equality.\n        var lengthInsertions2 = 0;\n        var lengthDeletions2 = 0;\n        while (pointer < diffs.length) {\n            if (diffs[pointer][0] === DiffOperation.DIFF_EQUAL) {\n                // Equality found.\n                equalities[equalitiesLength++] = pointer;\n                lengthInsertions1 = lengthInsertions2;\n                lengthDeletions1 = lengthDeletions2;\n                lengthInsertions2 = 0;\n                lengthDeletions2 = 0;\n                lastEquality = diffs[pointer][1];\n            }\n            else {\n                // An insertion or deletion.\n                if (diffs[pointer][0] === DiffOperation.DIFF_INSERT) {\n                    lengthInsertions2 += diffs[pointer][1].length;\n                }\n                else {\n                    lengthDeletions2 += diffs[pointer][1].length;\n                }\n                // Eliminate an equality that is smaller or equal to the edits on both\n                // sides of it.\n                if (lastEquality &&\n                    (lastEquality.length <= math.max(lengthInsertions1, lengthDeletions1)) &&\n                    (lastEquality.length <= math.max(lengthInsertions2, lengthDeletions2))) {\n                    // Duplicate record.\n                    diffs.splice(equalities[equalitiesLength - 1], 0, [DiffOperation.DIFF_DELETE, lastEquality]);\n                    // Change second copy to insert.\n                    diffs[equalities[equalitiesLength - 1] + 1][0] = DiffOperation.DIFF_INSERT;\n                    // Throw away the equality we just deleted.\n                    equalitiesLength--;\n                    // Throw away the previous equality (it needs to be reevaluated).\n                    equalitiesLength--;\n                    pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n                    lengthInsertions1 = 0; // Reset the counters.\n                    lengthDeletions1 = 0;\n                    lengthInsertions2 = 0;\n                    lengthDeletions2 = 0;\n                    lastEquality = null;\n                    changes = true;\n                }\n            }\n            pointer++;\n        }\n        // Normalize the diff.\n        if (changes) {\n            this.diff_cleanupMerge(diffs);\n        }\n        this.diff_cleanupSemanticLossless(diffs);\n        // Find any overlaps between deletions and insertions.\n        // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n        //   -> <del>abc</del>xxx<ins>def</ins>\n        // e.g: <del>xxxabc</del><ins>defxxx</ins>\n        //   -> <ins>def</ins>xxx<del>abc</del>\n        // Only extract an overlap if it is as big as the edit ahead or behind it.\n        pointer = 1;\n        while (pointer < diffs.length) {\n            if (diffs[pointer - 1][0] === DiffOperation.DIFF_DELETE &&\n                diffs[pointer][0] === DiffOperation.DIFF_INSERT) {\n                var deletion = diffs[pointer - 1][1];\n                var insertion = diffs[pointer][1];\n                var overlapLength1 = this.diff_commonOverlap_(deletion, insertion);\n                var overlapLength2 = this.diff_commonOverlap_(insertion, deletion);\n                if (overlapLength1 >= overlapLength2) {\n                    if (overlapLength1 >= deletion.length / 2 ||\n                        overlapLength1 >= insertion.length / 2) {\n                        // Overlap found. Insert an equality and trim the surrounding edits.\n                        diffs.splice(pointer, 0, [DiffOperation.DIFF_EQUAL, insertion.substring(0, overlapLength1)]);\n                        diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1);\n                        diffs[pointer + 1][1] = insertion.substring(overlapLength1);\n                        pointer++;\n                    }\n                }\n                else {\n                    if (overlapLength2 >= deletion.length / 2 ||\n                        overlapLength2 >= insertion.length / 2) {\n                        // Reverse overlap found.\n                        // Insert an equality and swap and trim the surrounding edits.\n                        diffs.splice(pointer, 0, [DiffOperation.DIFF_EQUAL, deletion.substring(0, overlapLength2)]);\n                        diffs[pointer - 1][0] = DiffOperation.DIFF_INSERT;\n                        diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2);\n                        diffs[pointer + 1][0] = DiffOperation.DIFF_DELETE;\n                        diffs[pointer + 1][1] = deletion.substring(overlapLength2);\n                        pointer++;\n                    }\n                }\n                pointer++;\n            }\n            pointer++;\n        }\n    };\n    /**\n     * Look for single edits surrounded on both sides by equalities\n     * which can be shifted sideways to align the edit to a word boundary.\n     * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n     *\n     * @param {Diff[]} diffs Array of diff tuples.\n     */\n    DiffMatchPatch.prototype.diff_cleanupSemanticLossless = function (diffs) {\n        var pointer = 1;\n        // Intentionally ignore the first and last element (don\'t need checking).\n        while (pointer < diffs.length - 1) {\n            if (diffs[pointer - 1][0] === DiffOperation.DIFF_EQUAL &&\n                diffs[pointer + 1][0] === DiffOperation.DIFF_EQUAL) {\n                // This is a single edit surrounded by equalities.\n                var equality1 = diffs[pointer - 1][1];\n                var edit = diffs[pointer][1];\n                var equality2 = diffs[pointer + 1][1];\n                // First, shift the edit as far left as possible.\n                var commonOffset = this.diff_commonSuffix(equality1, edit);\n                if (commonOffset) {\n                    var commonString = edit.substring(edit.length - commonOffset);\n                    equality1 = equality1.substring(0, equality1.length - commonOffset);\n                    edit = commonString + edit.substring(0, edit.length - commonOffset);\n                    equality2 = commonString + equality2;\n                }\n                // Second, step character by character right, looking for the best fit.\n                var bestEquality1 = equality1;\n                var bestEdit = edit;\n                var bestEquality2 = equality2;\n                var bestScore = this.diff_cleanupSemanticScore_(equality1, edit)\n                    + this.diff_cleanupSemanticScore_(edit, equality2);\n                while (edit.charAt(0) === equality2.charAt(0)) {\n                    equality1 += edit.charAt(0);\n                    edit = edit.substring(1) + equality2.charAt(0);\n                    equality2 = equality2.substring(1);\n                    var score = this.diff_cleanupSemanticScore_(equality1, edit)\n                        + this.diff_cleanupSemanticScore_(edit, equality2);\n                    // The >= encourages trailing rather than leading whitespace on edits.\n                    if (score >= bestScore) {\n                        bestScore = score;\n                        bestEquality1 = equality1;\n                        bestEdit = edit;\n                        bestEquality2 = equality2;\n                    }\n                }\n                if (diffs[pointer - 1][1] !== bestEquality1) {\n                    // We have an improvement, save it back to the diff.\n                    if (bestEquality1) {\n                        diffs[pointer - 1][1] = bestEquality1;\n                    }\n                    else {\n                        diffs.splice(pointer - 1, 1);\n                        pointer--;\n                    }\n                    diffs[pointer][1] = bestEdit;\n                    if (bestEquality2) {\n                        diffs[pointer + 1][1] = bestEquality2;\n                    }\n                    else {\n                        diffs.splice(pointer + 1, 1);\n                        pointer--;\n                    }\n                }\n            }\n            pointer++;\n        }\n    };\n    /**\n     * Reduce the number of edits by eliminating operationally trivial equalities.\n     *\n     * @param {Diff[]} diffs Array of diff tuples.\n     */\n    DiffMatchPatch.prototype.diff_cleanupEfficiency = function (diffs) {\n        var changes = false;\n        var equalities = []; // Stack of indices where equalities are found.\n        var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n        var lastEquality = null;\n        // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n        var pointer = 0; // Index of current position.\n        // Is there an insertion operation before the last equality.\n        var preIns = false;\n        // Is there a deletion operation before the last equality.\n        var preDel = false;\n        // Is there an insertion operation after the last equality.\n        var postIns = false;\n        // Is there a deletion operation after the last equality.\n        var postDel = false;\n        while (pointer < diffs.length) {\n            if (diffs[pointer][0] === DiffOperation.DIFF_EQUAL) {\n                // Equality found.\n                if (diffs[pointer][1].length < this.diffEditCost &&\n                    (postIns || postDel)) {\n                    // Candidate found.\n                    equalities[equalitiesLength++] = pointer;\n                    preIns = postIns;\n                    preDel = postDel;\n                    lastEquality = diffs[pointer][1];\n                }\n                else {\n                    // Not a candidate, and can never become one.\n                    equalitiesLength = 0;\n                    lastEquality = null;\n                }\n                postIns = postDel = false;\n            }\n            else {\n                // An insertion or deletion.\n                if (diffs[pointer][0] === DiffOperation.DIFF_DELETE) {\n                    postDel = true;\n                }\n                else {\n                    postIns = true;\n                }\n                /*\n                 * Five types to be split:\n                 * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n                 * <ins>A</ins>X<ins>C</ins><del>D</del>\n                 * <ins>A</ins><del>B</del>X<ins>C</ins>\n                 * <ins>A</del>X<ins>C</ins><del>D</del>\n                 * <ins>A</ins><del>B</del>X<del>C</del>\n                 */\n                if (lastEquality &&\n                    ((preIns && preDel && postIns && postDel) ||\n                        ((lastEquality.length < this.diffEditCost / 2) &&\n                            (Number(preIns) + Number(preDel) + Number(postIns) + Number(postDel)) === 3))) {\n                    // Duplicate record.\n                    diffs.splice(equalities[equalitiesLength - 1], 0, [DiffOperation.DIFF_DELETE, lastEquality]);\n                    // Change second copy to insert.\n                    diffs[equalities[equalitiesLength - 1] + 1][0] = DiffOperation.DIFF_INSERT;\n                    equalitiesLength--; // Throw away the equality we just deleted;\n                    lastEquality = null;\n                    if (preIns && preDel) {\n                        // No changes made which could affect previous entry, keep going.\n                        postIns = postDel = true;\n                        equalitiesLength = 0;\n                    }\n                    else {\n                        equalitiesLength--; // Throw away the previous equality.\n                        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n                        postIns = postDel = false;\n                    }\n                    changes = true;\n                }\n            }\n            pointer++;\n        }\n        if (changes) {\n            this.diff_cleanupMerge(diffs);\n        }\n    };\n    /**\n     * Reorder and merge like edit sections. Merge equalities.\n     * Any edit section can move as long as it doesn\'t cross an equality.\n     *\n     * @param {Diff[]} diffs Array of diff tuples.\n     */\n    DiffMatchPatch.prototype.diff_cleanupMerge = function (diffs) {\n        // Add a dummy entry at the end.\n        diffs.push([DiffOperation.DIFF_EQUAL, ""]);\n        var pointer = 0;\n        var countDelete = 0;\n        var countInsert = 0;\n        var textDelete = "";\n        var textInsert = "";\n        var commonlength;\n        while (pointer < diffs.length) {\n            switch (diffs[pointer][0]) {\n                case DiffOperation.DIFF_INSERT:\n                    countInsert++;\n                    textInsert += diffs[pointer][1];\n                    pointer++;\n                    break;\n                case DiffOperation.DIFF_DELETE:\n                    countDelete++;\n                    textDelete += diffs[pointer][1];\n                    pointer++;\n                    break;\n                case DiffOperation.DIFF_EQUAL:\n                    // Upon reaching an equality, check for prior redundancies.\n                    if (countDelete + countInsert > 1) {\n                        if (countDelete !== 0 && countInsert !== 0) {\n                            // Factor out any common prefixes.\n                            commonlength = this.diff_commonPrefix(textInsert, textDelete);\n                            if (commonlength !== 0) {\n                                if ((pointer - countDelete - countInsert) > 0 &&\n                                    (diffs[pointer - countDelete - countInsert - 1][0]\n                                        === DiffOperation.DIFF_EQUAL)) {\n                                    diffs[pointer - countDelete - countInsert - 1][1]\n                                        += textInsert.substring(0, commonlength);\n                                }\n                                else {\n                                    diffs.splice(0, 0, [DiffOperation.DIFF_EQUAL, textInsert.substring(0, commonlength)]);\n                                    pointer++;\n                                }\n                                textInsert = textInsert.substring(commonlength);\n                                textDelete = textDelete.substring(commonlength);\n                            }\n                            // Factor out any common suffixes.\n                            commonlength = this.diff_commonSuffix(textInsert, textDelete);\n                            if (commonlength !== 0) {\n                                diffs[pointer][1] = textInsert.substring(textInsert.length\n                                    - commonlength) + diffs[pointer][1];\n                                textInsert = textInsert.substring(0, textInsert.length - commonlength);\n                                textDelete = textDelete.substring(0, textDelete.length - commonlength);\n                            }\n                        }\n                        // Delete the offending records and add the merged ones.\n                        pointer -= countDelete + countInsert;\n                        diffs.splice(pointer, countDelete + countInsert);\n                        if (textDelete.length) {\n                            diffs.splice(pointer, 0, [DiffOperation.DIFF_DELETE, textDelete]);\n                            pointer++;\n                        }\n                        if (textInsert.length) {\n                            diffs.splice(pointer, 0, [DiffOperation.DIFF_INSERT, textInsert]);\n                            pointer++;\n                        }\n                        pointer++;\n                    }\n                    else if (pointer !== 0 && diffs[pointer - 1][0] === DiffOperation.DIFF_EQUAL) {\n                        // Merge this equality with the previous one.\n                        diffs[pointer - 1][1] += diffs[pointer][1];\n                        diffs.splice(pointer, 1);\n                    }\n                    else {\n                        pointer++;\n                    }\n                    countInsert = 0;\n                    countDelete = 0;\n                    textDelete = "";\n                    textInsert = "";\n                    break;\n            }\n        }\n        if (diffs[diffs.length - 1][1] === "") {\n            diffs.pop(); // Remove the dummy entry at the end.\n        }\n        // Second pass: look for single edits surrounded on both sides by equalities\n        // which can be shifted sideways to eliminate an equality.\n        // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n        var changes = false;\n        pointer = 1;\n        // Intentionally ignore the first and last element (don\'t need checking).\n        while (pointer < diffs.length - 1) {\n            if (diffs[pointer - 1][0] === DiffOperation.DIFF_EQUAL &&\n                diffs[pointer + 1][0] === DiffOperation.DIFF_EQUAL) {\n                // This is a single edit surrounded by equalities.\n                if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length)\n                    === diffs[pointer - 1][1]) {\n                    // Shift the edit over the previous equality.\n                    diffs[pointer][1] = diffs[pointer - 1][1]\n                        + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n                    diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n                    diffs.splice(pointer - 1, 1);\n                    changes = true;\n                }\n                else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length)\n                    === diffs[pointer + 1][1]) {\n                    // Shift the edit over the next equality.\n                    diffs[pointer - 1][1] += diffs[pointer + 1][1];\n                    diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length)\n                        + diffs[pointer + 1][1];\n                    diffs.splice(pointer + 1, 1);\n                    changes = true;\n                }\n            }\n            pointer++;\n        }\n        // If shifts were made, the diff needs reordering and another shift sweep.\n        if (changes) {\n            this.diff_cleanupMerge(diffs);\n        }\n    };\n    /**\n     * loc is a location in text1, compute and return the equivalent location in\n     * text2.\n     * e.g. \'The cat\' vs \'The big cat\', 1->1, 5->8\n     *\n     * @param {Diff[]} diffs Array of diff tuples.\n     * @param {number} loc Location within text1.\n     * @returns {number} Location within text2.\n     */\n    DiffMatchPatch.prototype.diff_xIndex = function (diffs, loc) {\n        var chars1 = 0;\n        var chars2 = 0;\n        var lastChars1 = 0;\n        var lastChars2 = 0;\n        var x;\n        for (x = 0; x < diffs.length; x++) {\n            if (diffs[x][0] !== DiffOperation.DIFF_INSERT) {\n                // Equality or deletion.\n                chars1 += diffs[x][1].length;\n            }\n            if (diffs[x][0] !== DiffOperation.DIFF_DELETE) {\n                // Equality or insertion.\n                chars2 += diffs[x][1].length;\n            }\n            if (chars1 > loc) {\n                // Overshot the location.\n                break;\n            }\n            lastChars1 = chars1;\n            lastChars2 = chars2;\n        }\n        // Was the location was deleted?\n        if (diffs.length !== x &&\n            diffs[x][0] === DiffOperation.DIFF_DELETE) {\n            return lastChars2;\n        }\n        // Add the remaining character length.\n        return lastChars2 + (loc - lastChars1);\n    };\n    /**\n     * Convert a diff array into a pretty HTML report.\n     *\n     * @param {Diff[]>} diffs Array of diff tuples.\n     * @returns {string} HTML representation.\n     */\n    DiffMatchPatch.prototype.diff_prettyHtml = function (diffs) {\n        var html = [];\n        var patternAMP = /&/g;\n        var patternLT = /</g;\n        var patternGT = />/g;\n        var patternPARA = /\\n/g;\n        for (var x = 0; x < diffs.length; x++) {\n            var op = diffs[x][0]; // Operation (insert, delete, equal)\n            var data = diffs[x][1]; // Text of change.\n            var text = data.replace(patternAMP, "&amp;")\n                .replace(patternLT, "&lt;")\n                .replace(patternGT, "&gt;")\n                .replace(patternPARA, "&para;<br>");\n            switch (op) {\n                case DiffOperation.DIFF_INSERT:\n                    html[x] = \'<ins style="background:#e6ffe6;">\' + text + "</ins>";\n                    break;\n                case DiffOperation.DIFF_DELETE:\n                    html[x] = \'<del style="background:#ffe6e6;">\' + text + "</del>";\n                    break;\n                case DiffOperation.DIFF_EQUAL:\n                    html[x] = "<span>" + text + "</span>";\n                    break;\n            }\n        }\n        return html.join("");\n    };\n    /**\n     * Compute and return the source text (all equalities and deletions).\n     *\n     * @param {Diff[]} diffs Array of diff tuples.\n     * @returns {string} Source text.\n     */\n    DiffMatchPatch.prototype.diff_text1 = function (diffs) {\n        var text = [];\n        for (var x = 0; x < diffs.length; x++) {\n            if (diffs[x][0] !== DiffOperation.DIFF_INSERT) {\n                text[x] = diffs[x][1];\n            }\n        }\n        return text.join("");\n    };\n    /**\n     * Compute and return the destination text (all equalities and insertions).\n     *\n     * @param {Diff[]} diffs Array of diff tuples.\n     * @returns {string} Destination text.\n     */\n    DiffMatchPatch.prototype.diff_text2 = function (diffs) {\n        var text = [];\n        for (var x = 0; x < diffs.length; x++) {\n            if (diffs[x][0] !== DiffOperation.DIFF_DELETE) {\n                text[x] = diffs[x][1];\n            }\n        }\n        return text.join("");\n    };\n    /**\n     * Compute the Levenshtein distance; the number of inserted, deleted or\n     * substituted characters.\n     *\n     * @param {Diff[]} diffs Array of diff tuples.\n     * @returns {number} Number of changes.\n     */\n    DiffMatchPatch.prototype.diff_levenshtein = function (diffs) {\n        var levenshtein = 0;\n        var insertions = 0;\n        var deletions = 0;\n        for (var x = 0; x < diffs.length; x++) {\n            var op = diffs[x][0];\n            var data = diffs[x][1];\n            switch (op) {\n                case DiffOperation.DIFF_INSERT:\n                    insertions += data.length;\n                    break;\n                case DiffOperation.DIFF_DELETE:\n                    deletions += data.length;\n                    break;\n                case DiffOperation.DIFF_EQUAL:\n                    // A deletion and an insertion is one substitution.\n                    levenshtein += math.max(insertions, deletions);\n                    insertions = 0;\n                    deletions = 0;\n                    break;\n            }\n        }\n        levenshtein += math.max(insertions, deletions);\n        return levenshtein;\n    };\n    /**\n     * Crush the diff into an encoded string which describes the operations\n     * required to transform text1 into text2.\n     * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert \'ing\'.\n     * Operations are tab-separated. Inserted text is escaped using %xx notation.\n     *\n     * @param {Diff[]} diffs Array of diff tuples.\n     * @returns {string} Delta text.\n     */\n    DiffMatchPatch.prototype.diff_toDelta = function (diffs) {\n        var text = [];\n        for (var x = 0; x < diffs.length; x++) {\n            switch (diffs[x][0]) {\n                case DiffOperation.DIFF_INSERT:\n                    text[x] = "+" + encodeURI(diffs[x][1]);\n                    break;\n                case DiffOperation.DIFF_DELETE:\n                    text[x] = "-" + diffs[x][1].length;\n                    break;\n                case DiffOperation.DIFF_EQUAL:\n                    text[x] = "=" + diffs[x][1].length;\n                    break;\n            }\n        }\n        return text.join("\\t").replace(/%20/g, " ");\n    };\n    /**\n     * Given the original text1, and an encoded string which describes the\n     * operations required to transform text1 into text2, compute the full diff.\n     *\n     * @param {string} text1 Source string for the diff.\n     * @param {string} delta Delta text.\n     * @returns {Diff[]} Array of diff tuples.\n     * @throws {Error} If invalid input.\n     */\n    DiffMatchPatch.prototype.diff_fromDelta = function (text1, delta) {\n        var diffs = [];\n        var diffsLength = 0; // Keeping our own length var is faster in JS.\n        var pointer = 0; // Cursor in text1\n        var tokens = delta.split(/\\t/g);\n        for (var x = 0; x < tokens.length; x++) {\n            // Each token begins with a one character parameter which specifies the\n            // operation of this token (delete, insert, equality).\n            var param = tokens[x].substring(1);\n            switch (tokens[x].charAt(0)) {\n                case "+":\n                    try {\n                        diffs[diffsLength++] = [DiffOperation.DIFF_INSERT, decodeURI(param)];\n                    }\n                    catch (ex) {\n                        // Malformed URI sequence.\n                        throw new Error("Illegal escape in diff_fromDelta: " + param);\n                    }\n                    break;\n                case "-":\n                // Fall through.\n                case "=":\n                    var n = parseInt(param, 10);\n                    if (isNaN(n) || n < 0) {\n                        throw new Error("Invalid number in diff_fromDelta: " + param);\n                    }\n                    var text = text1.substring(pointer, pointer += n);\n                    if (tokens[x].charAt(0) === "=") {\n                        diffs[diffsLength++] = [DiffOperation.DIFF_EQUAL, text];\n                    }\n                    else {\n                        diffs[diffsLength++] = [DiffOperation.DIFF_DELETE, text];\n                    }\n                    break;\n                default:\n                    // Blank tokens are ok (from a trailing \\t).\n                    // Anything else is an error.\n                    if (tokens[x]) {\n                        throw new Error("Invalid diff operation in diff_fromDelta: " + tokens[x]);\n                    }\n            }\n        }\n        if (pointer !== text1.length) {\n            throw new Error("Delta length (" + pointer + ") does not equal source text length ("\n                + text1.length + ")");\n        }\n        return diffs;\n    };\n    //#endregion DIFF FUNCTIONS (public)\n    //#region MATCH FUNCTIONS (public)\n    /**\n     * Locate the best instance of \'pattern\' in \'text\' near \'loc\'.\n     *\n     * @param {string} text The text to search.\n     * @param {string} pattern The pattern to search for.\n     * @param {number} loc The location to search around.\n     * @returns {number} Best match index or -1.\n     */\n    DiffMatchPatch.prototype.match_main = function (text, pattern, loc) {\n        // Check for null inputs.\n        if (text == null || pattern == null || loc == null) {\n            throw new Error("Null input. (match_main)");\n        }\n        loc = math.max(0, math.min(loc, text.length));\n        if (text === pattern) {\n            // Shortcut (potentially not guaranteed by the algorithm)\n            return 0;\n        }\n        else if (!text.length) {\n            // Nothing to match.\n            return -1;\n        }\n        else if (text.substring(loc, loc + pattern.length) === pattern) {\n            // Perfect match at the perfect spot!  (Includes case of null pattern)\n            return loc;\n        }\n        else {\n            // Do a fuzzy compare.\n            return this.match_bitap_(text, pattern, loc);\n        }\n    };\n    //#endregion MATCH FUNCTIONS (public)\n    //#region PATCH FUNCTIONS (public)\n    /**\n     * Compute a list of patches to turn text1 into text2.\n     * Use diffs if provided, otherwise compute it ourselves.\n     * There are four ways to call this function, depending on what data is\n     * available to the caller:\n     * Method 1:\n     * a = text1, b = text2\n     * Method 2:\n     * a = diffs\n     * Method 3 (optimal):\n     * a = text1, b = diffs\n     * Method 4 (deprecated, use method 3):\n     * a = text1, b = text2, c = diffs\n     *\n     * @param {(string|Diff[])} a text1 (methods 1,3,4) or\n     * Array of diff tuples for text1 to text2 (method 2).\n     * @param {(string|Diff[])} [optB] text2 (methods 1,4) or\n     * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n     * @param {(string|Diff[])} [optC] Array of diff tuples\n     * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n     * @returns {PatchObject[]} Array of Patch objects.\n     */\n    DiffMatchPatch.prototype.patch_make = function (a, optB, optC) {\n        var text1;\n        var diffs;\n        if (typeof a === "string" &&\n            typeof optB === "string" &&\n            typeof optC === "undefined") {\n            // Method 1: text1, text2\n            // Compute diffs from text1 and text2.\n            text1 = a;\n            diffs = this.diff_main(text1, optB, true);\n            if (diffs.length > 2) {\n                this.diff_cleanupSemantic(diffs);\n                this.diff_cleanupEfficiency(diffs);\n            }\n        }\n        else if (a &&\n            typeof a === "object" &&\n            typeof optB === "undefined" &&\n            typeof optC === "undefined") {\n            // Method 2: diffs\n            // Compute text1 from diffs.\n            diffs = a;\n            text1 = this.diff_text1(diffs);\n        }\n        else if (typeof a === "string" &&\n            optB &&\n            typeof optB === "object" &&\n            typeof optC === "undefined") {\n            // Method 3: text1, diffs\n            text1 = a;\n            diffs = optB;\n        }\n        else if (typeof a === "string" &&\n            typeof optB === "string" &&\n            optC &&\n            typeof optC === "object") {\n            // Method 4: text1, text2, diffs\n            // text2 is not used.\n            text1 = a;\n            diffs = optC;\n        }\n        else {\n            throw new Error("Unknown call format to patch_make");\n        }\n        if (diffs.length === 0) {\n            return []; // Get rid of the null case.\n        }\n        var patches = [];\n        var patch = new PatchObject_PatchObject();\n        var patchDiffLength = 0; // Keeping our own length var is faster in JS.\n        var charCount1 = 0; // Number of characters into the text1 string.\n        var charCount2 = 0; // Number of characters into the text2 string.\n        // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n        // text2 (postpatch_text). We recreate the patches one by one to determine\n        // context info.\n        var prepatchText = text1;\n        var postpatchText = text1;\n        for (var x = 0; x < diffs.length; x++) {\n            var diffType = diffs[x][0];\n            var diffText = diffs[x][1];\n            if (!patchDiffLength && diffType !== DiffOperation.DIFF_EQUAL) {\n                // A new patch starts here.\n                patch.start1 = charCount1;\n                patch.start2 = charCount2;\n            }\n            switch (diffType) {\n                case DiffOperation.DIFF_INSERT:\n                    patch.diffs[patchDiffLength++] = diffs[x];\n                    patch.length2 += diffText.length;\n                    postpatchText = postpatchText.substring(0, charCount2)\n                        + diffText + postpatchText.substring(charCount2);\n                    break;\n                case DiffOperation.DIFF_DELETE:\n                    patch.length1 += diffText.length;\n                    patch.diffs[patchDiffLength++] = diffs[x];\n                    postpatchText = postpatchText.substring(0, charCount2)\n                        + postpatchText.substring(charCount2 + diffText.length);\n                    break;\n                case DiffOperation.DIFF_EQUAL:\n                    if (diffText.length <= 2 * this.patchMargin &&\n                        patchDiffLength &&\n                        diffs.length !== x + 1) {\n                        // Small equality inside a patch.\n                        patch.diffs[patchDiffLength++] = diffs[x];\n                        patch.length1 += diffText.length;\n                        patch.length2 += diffText.length;\n                    }\n                    else if (diffText.length >= 2 * this.patchMargin) {\n                        // Time for a new patch.\n                        if (patchDiffLength) {\n                            this.patch_addContext_(patch, prepatchText);\n                            patches.push(patch);\n                            patch = new PatchObject_PatchObject();\n                            patchDiffLength = 0;\n                            // Unlike Unidiff, our patch lists have a rolling context.\n                            // https://github.com/google/diff-match-patch/wiki/Unidiff\n                            // Update prepatch text & pos to reflect the application of the\n                            // just completed patch.\n                            prepatchText = postpatchText;\n                            charCount1 = charCount2;\n                        }\n                    }\n                    break;\n            }\n            // Update the current character count.\n            if (diffType !== DiffOperation.DIFF_INSERT) {\n                charCount1 += diffText.length;\n            }\n            if (diffType !== DiffOperation.DIFF_DELETE) {\n                charCount2 += diffText.length;\n            }\n        }\n        // Pick up the leftover patch if not empty.\n        if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatchText);\n            patches.push(patch);\n        }\n        return patches;\n    };\n    /**\n     * Given an array of patches, return another array that is identical.\n     *\n     * @param {PatchObject[]>} patches Array of Patch objects.\n     * @returns {PatchObject[]} Array of Patch objects.\n     */\n    DiffMatchPatch.prototype.patch_deepCopy = function (patches) {\n        // Making deep copies is hard in JavaScript.\n        var patchesCopy = [];\n        for (var x = 0; x < patches.length; x++) {\n            var patch = patches[x];\n            var patchCopy = new PatchObject_PatchObject();\n            for (var y = 0; y < patch.diffs.length; y++) {\n                patchCopy.diffs[y] = [patch.diffs[y][0], patch.diffs[y][1]];\n            }\n            patchCopy.start1 = patch.start1;\n            patchCopy.start2 = patch.start2;\n            patchCopy.length1 = patch.length1;\n            patchCopy.length2 = patch.length2;\n            patchesCopy[x] = patchCopy;\n        }\n        return patchesCopy;\n    };\n    /**\n     * Merge a set of patches onto the text. Return a patched text, as well\n     * as a list of true/false values indicating which patches were applied.\n     *\n     * @param {PatchObject[]} patches Array of Patch objects.\n     * @param {string} text Old text.\n     * @returns {PatchApplyArray} Two element Array, containing the\n     * new text and an array of boolean values.\n     */\n    DiffMatchPatch.prototype.patch_apply = function (patches, text) {\n        if (patches.length === 0) {\n            return [text, []];\n        }\n        // Deep copy the patches so that no changes are made to originals.\n        patches = this.patch_deepCopy(patches);\n        var nullPadding = this.patch_addPadding(patches);\n        text = nullPadding + text + nullPadding;\n        this.patch_splitMax(patches);\n        // delta keeps track of the offset between the expected and actual location\n        // of the previous patch. If there are patches expected at positions 10 and\n        // 20, but the first patch was found at 12, delta is 2 and the second patch\n        // has an effective expected position of 22.\n        var delta = 0;\n        var results = [];\n        for (var x = 0; x < patches.length; x++) {\n            var expectedLoc = patches[x].start2 + delta;\n            var text1 = this.diff_text1(patches[x].diffs);\n            var startLoc = void 0;\n            var endLoc = -1;\n            if (text1.length > this.matchMaxBits) {\n                // patch_splitMax will only provide an oversized pattern in the case of\n                // a monster delete.\n                startLoc = this.match_main(text, text1.substring(0, this.matchMaxBits), expectedLoc);\n                if (startLoc !== -1) {\n                    endLoc = this.match_main(text, text1.substring(text1.length - this.matchMaxBits), expectedLoc + text1.length - this.matchMaxBits);\n                    if (endLoc === -1 || startLoc >= endLoc) {\n                        // Can\'t find valid trailing context. Drop this patch.\n                        startLoc = -1;\n                    }\n                }\n            }\n            else {\n                startLoc = this.match_main(text, text1, expectedLoc);\n            }\n            if (startLoc === -1) {\n                // No match found. :(\n                results[x] = false;\n                // Subtract the delta for this failed patch from subsequent patches.\n                delta -= patches[x].length2 - patches[x].length1;\n            }\n            else {\n                // Found a match. :)\n                results[x] = true;\n                delta = startLoc - expectedLoc;\n                var text2 = void 0;\n                if (endLoc === -1) {\n                    text2 = text.substring(startLoc, startLoc + text1.length);\n                }\n                else {\n                    text2 = text.substring(startLoc, endLoc + this.matchMaxBits);\n                }\n                if (text1 === text2) {\n                    // Perfect match, just shove the replacement text in.\n                    text = text.substring(0, startLoc)\n                        + this.diff_text2(patches[x].diffs)\n                        + text.substring(startLoc + text1.length);\n                }\n                else {\n                    // Imperfect match. Run a diff to get a framework of equivalent\n                    // indices.\n                    var diffs = this.diff_main(text1, text2, false);\n                    if (text1.length > this.matchMaxBits &&\n                        this.diff_levenshtein(diffs) / text1.length > this.patchDeleteThreshold) {\n                        // The end points match, but the content is unacceptably bad.\n                        results[x] = false;\n                    }\n                    else {\n                        this.diff_cleanupSemanticLossless(diffs);\n                        var index1 = 0;\n                        var index2 = 0;\n                        for (var y = 0; y < patches[x].diffs.length; y++) {\n                            var mod = patches[x].diffs[y];\n                            if (mod[0] !== DiffOperation.DIFF_EQUAL) {\n                                index2 = this.diff_xIndex(diffs, index1);\n                            }\n                            if (mod[0] === DiffOperation.DIFF_INSERT) {\n                                // Insertion\n                                text = text.substring(0, startLoc + index2) + mod[1]\n                                    + text.substring(startLoc + index2);\n                            }\n                            else if (mod[0] === DiffOperation.DIFF_DELETE) {\n                                // Deletion\n                                text = text.substring(0, startLoc + index2)\n                                    + text.substring(startLoc\n                                        + this.diff_xIndex(diffs, index1 + mod[1].length));\n                            }\n                            if (mod[0] !== DiffOperation.DIFF_DELETE) {\n                                index1 += mod[1].length;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // Strip the padding off.\n        text = text.substring(nullPadding.length, text.length - nullPadding.length);\n        return [text, results];\n    };\n    /**\n     * Add some padding on text start and end so that edges can match something.\n     * Intended to be called only from within patch_apply.\n     *\n     * @param {PatchObject[]} patches Array of Patch objects.\n     * @returns {string} The padding string added to each side.\n     */\n    DiffMatchPatch.prototype.patch_addPadding = function (patches) {\n        var paddingLength = this.patchMargin;\n        var nullPadding = "";\n        for (var x = 1; x <= paddingLength; x++) {\n            nullPadding += String.fromCharCode(x);\n        }\n        // Bump all the patches forward.\n        for (var x = 0; x < patches.length; x++) {\n            patches[x].start1 += paddingLength;\n            patches[x].start2 += paddingLength;\n        }\n        // Add some padding on start of first diff.\n        var patch = patches[0];\n        var diffs = patch.diffs;\n        if (diffs.length === 0 || diffs[0][0] !== DiffOperation.DIFF_EQUAL) {\n            // Add nullPadding equality.\n            diffs.unshift([DiffOperation.DIFF_EQUAL, nullPadding]);\n            patch.start1 -= paddingLength; // Should be 0.\n            patch.start2 -= paddingLength; // Should be 0.\n            patch.length1 += paddingLength;\n            patch.length2 += paddingLength;\n        }\n        else if (paddingLength > diffs[0][1].length) {\n            // Grow first equality.\n            var extraLength = paddingLength - diffs[0][1].length;\n            diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n            patch.start1 -= extraLength;\n            patch.start2 -= extraLength;\n            patch.length1 += extraLength;\n            patch.length2 += extraLength;\n        }\n        // Add some padding on end of last diff.\n        patch = patches[patches.length - 1];\n        diffs = patch.diffs;\n        if (diffs.length === 0 || diffs[diffs.length - 1][0] !== DiffOperation.DIFF_EQUAL) {\n            // Add nullPadding equality.\n            diffs.push([DiffOperation.DIFF_EQUAL, nullPadding]);\n            patch.length1 += paddingLength;\n            patch.length2 += paddingLength;\n        }\n        else if (paddingLength > diffs[diffs.length - 1][1].length) {\n            // Grow last equality.\n            var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n            diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n            patch.length1 += extraLength;\n            patch.length2 += extraLength;\n        }\n        return nullPadding;\n    };\n    /**\n     * Look through the patches and break up any which are longer than the maximum\n     * limit of the match algorithm.\n     * Intended to be called only from within patch_apply.\n     *\n     * @param {PatchObject[]} patches Array of Patch objects.\n     */\n    DiffMatchPatch.prototype.patch_splitMax = function (patches) {\n        var patchSize = this.matchMaxBits;\n        for (var x = 0; x < patches.length; x++) {\n            if (patches[x].length1 <= patchSize) {\n                continue;\n            }\n            var bigpatch = patches[x];\n            // Remove the big old patch.\n            patches.splice(x--, 1);\n            var start1 = bigpatch.start1;\n            var start2 = bigpatch.start2;\n            var precontext = "";\n            while (bigpatch.diffs.length !== 0) {\n                // Create one of several smaller patches.\n                var patch = new PatchObject_PatchObject();\n                var empty = true;\n                patch.start1 = start1 - precontext.length;\n                patch.start2 = start2 - precontext.length;\n                if (precontext !== "") {\n                    patch.length1 = patch.length2 = precontext.length;\n                    patch.diffs.push([DiffOperation.DIFF_EQUAL, precontext]);\n                }\n                while (bigpatch.diffs.length !== 0 &&\n                    patch.length1 < patchSize - this.patchMargin) {\n                    var diffType = bigpatch.diffs[0][0];\n                    var diffText = bigpatch.diffs[0][1];\n                    if (diffType === DiffOperation.DIFF_INSERT) {\n                        // Insertions are harmless.\n                        patch.length2 += diffText.length;\n                        start2 += diffText.length;\n                        patch.diffs.push(bigpatch.diffs.shift());\n                        empty = false;\n                    }\n                    else if (diffType === DiffOperation.DIFF_DELETE &&\n                        patch.diffs.length === 1 &&\n                        patch.diffs[0][0] === DiffOperation.DIFF_EQUAL &&\n                        diffText.length > 2 * patchSize) {\n                        // This is a large deletion. Let it pass in one chunk.\n                        patch.length1 += diffText.length;\n                        start1 += diffText.length;\n                        empty = false;\n                        patch.diffs.push([diffType, diffText]);\n                        bigpatch.diffs.shift();\n                    }\n                    else {\n                        // Deletion or equality. Only take as much as we can stomach.\n                        diffText = diffText.substring(0, patchSize - patch.length1 - this.patchMargin);\n                        patch.length1 += diffText.length;\n                        start1 += diffText.length;\n                        if (diffType === DiffOperation.DIFF_EQUAL) {\n                            patch.length2 += diffText.length;\n                            start2 += diffText.length;\n                        }\n                        else {\n                            empty = false;\n                        }\n                        patch.diffs.push([diffType, diffText]);\n                        if (diffText === bigpatch.diffs[0][1]) {\n                            bigpatch.diffs.shift();\n                        }\n                        else {\n                            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length);\n                        }\n                    }\n                }\n                // Compute the head context for the next patch.\n                precontext = this.diff_text2(patch.diffs);\n                precontext = precontext.substring(precontext.length - this.patchMargin);\n                // Append the end context for this patch.\n                var postcontext = this.diff_text1(bigpatch.diffs).substring(0, this.patchMargin);\n                if (postcontext !== "") {\n                    patch.length1 += postcontext.length;\n                    patch.length2 += postcontext.length;\n                    if (patch.diffs.length !== 0 &&\n                        patch.diffs[patch.diffs.length - 1][0] === DiffOperation.DIFF_EQUAL) {\n                        patch.diffs[patch.diffs.length - 1][1] += postcontext;\n                    }\n                    else {\n                        patch.diffs.push([DiffOperation.DIFF_EQUAL, postcontext]);\n                    }\n                }\n                if (!empty) {\n                    patches.splice(++x, 0, patch);\n                }\n            }\n        }\n    };\n    /**\n     * Take a list of patches and return a textual representation.\n     *\n     * @param {PatchObject[]} patches Array of Patch objects.\n     * @returns {string} Text representation of patches.\n     */\n    DiffMatchPatch.prototype.patch_toText = function (patches) {\n        var text = [];\n        for (var x = 0; x < patches.length; x++) {\n            text[x] = patches[x];\n        }\n        return text.join("");\n    };\n    /**\n     * Parse a textual representation of patches and return a list of Patch objects.\n     *\n     * @param {string} textline Text representation of patches.\n     * @returns {PatchObject[]} Array of Patch objects.\n     * @throws {Error} If invalid input.\n     */\n    DiffMatchPatch.prototype.patch_fromText = function (textline) {\n        var patches = [];\n        if (!textline) {\n            return patches;\n        }\n        var text = textline.split("\\n");\n        var textPointer = 0;\n        var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n        while (textPointer < text.length) {\n            var m = text[textPointer].match(patchHeader);\n            if (!m) {\n                throw new Error("Invalid patch string: " + text[textPointer]);\n            }\n            var patch = new PatchObject_PatchObject();\n            patches.push(patch);\n            patch.start1 = parseInt(m[1], 10);\n            if (m[2] === "") {\n                patch.start1--;\n                patch.length1 = 1;\n            }\n            else if (m[2] === "0") {\n                patch.length1 = 0;\n            }\n            else {\n                patch.start1--;\n                patch.length1 = parseInt(m[2], 10);\n            }\n            patch.start2 = parseInt(m[3], 10);\n            if (m[4] === "") {\n                patch.start2--;\n                patch.length2 = 1;\n            }\n            else if (m[4] === "0") {\n                patch.length2 = 0;\n            }\n            else {\n                patch.start2--;\n                patch.length2 = parseInt(m[4], 10);\n            }\n            textPointer++;\n            var sign = void 0;\n            var line = void 0;\n            var rawLine = void 0;\n            while (textPointer < text.length) {\n                sign = text[textPointer].charAt(0);\n                rawLine = text[textPointer].substring(1);\n                try {\n                    line = decodeURI(rawLine);\n                }\n                catch (ex) {\n                    // Malformed URI sequence.\n                    throw new Error("Illegal escape in patch_fromText: " + rawLine);\n                }\n                if (sign === "-") {\n                    // Deletion.\n                    patch.diffs.push([DiffOperation.DIFF_DELETE, line]);\n                }\n                else if (sign === "+") {\n                    // Insertion.\n                    patch.diffs.push([DiffOperation.DIFF_INSERT, line]);\n                }\n                else if (sign === " ") {\n                    // Minor equality.\n                    patch.diffs.push([DiffOperation.DIFF_EQUAL, line]);\n                }\n                else if (sign === "@") {\n                    // Start of next patch.\n                    break;\n                }\n                else if (sign === "") {\n                    // Blank line?  Whatever.\n                }\n                else {\n                    // WTF?\n                    throw new Error(\'Invalid patch mode "\' + sign + \'" in: \' + line);\n                }\n                textPointer++;\n            }\n        }\n        return patches;\n    };\n    //#endregion PATCH FUNCTIONS (public)\n    //#region DIFF FUNCTIONS (private)\n    /**\n     * Find the differences between two texts. Assumes that the texts do not\n     * have any common prefix or suffix.\n     *\n     * @private\n     * @param {string} text1 Old string to be diffed.\n     * @param {string} text2 New string to be diffed.\n     * @param {boolean} checklines Speedup flag. If false, then don\'t run a\n     * line-level diff first to identify the changed areas.\n     * If true, then run a faster, slightly less optimal diff.\n     * @param {number} deadline Time when the diff should be complete by.\n     * @returns {Diff[]} Array of diff tuples.\n     */\n    DiffMatchPatch.prototype.diff_compute_ = function (text1, text2, checklines, deadline) {\n        var diffs;\n        if (!text1) {\n            // Just add some text (speedup).\n            return [[DiffOperation.DIFF_INSERT, text2]];\n        }\n        if (!text2) {\n            // Just delete some text (speedup).\n            return [[DiffOperation.DIFF_DELETE, text1]];\n        }\n        var longtext = text1.length > text2.length ? text1 : text2;\n        var shorttext = text1.length > text2.length ? text2 : text1;\n        var i = longtext.indexOf(shorttext);\n        if (i !== -1) {\n            // Shorter text is inside the longer text (speedup).\n            diffs = [\n                [DiffOperation.DIFF_INSERT, longtext.substring(0, i)],\n                [DiffOperation.DIFF_EQUAL, shorttext],\n                [DiffOperation.DIFF_INSERT, longtext.substring(i + shorttext.length)]\n            ];\n            // Swap insertions for deletions if diff is reversed.\n            if (text1.length > text2.length) {\n                diffs[0][0] = DiffOperation.DIFF_DELETE;\n                diffs[2][0] = DiffOperation.DIFF_DELETE;\n            }\n            return diffs;\n        }\n        if (shorttext.length === 1) {\n            // Single character string.\n            // After the previous speedup, the character can\'t be an equality.\n            return [\n                [DiffOperation.DIFF_DELETE, text1],\n                [DiffOperation.DIFF_INSERT, text2]\n            ];\n        }\n        // Check to see if the problem can be split in two.\n        var hm = this.diff_halfMatch_(text1, text2);\n        if (hm) {\n            // A half-match was found, sort out the return data.\n            var text1A = hm[0];\n            var text1B = hm[1];\n            var text2A = hm[2];\n            var text2B = hm[3];\n            var midCommon = hm[4];\n            // Send both pairs off for separate processing.\n            var diffsA = this.diff_main(text1A, text2A, checklines, deadline);\n            var diffsB = this.diff_main(text1B, text2B, checklines, deadline);\n            // Merge the results.\n            return diffsA.concat([[DiffOperation.DIFF_EQUAL, midCommon]], diffsB);\n        }\n        if (checklines && text1.length > 100 && text2.length > 100) {\n            return this.diff_lineMode_(text1, text2, deadline);\n        }\n        return this.diff_bisect_(text1, text2, deadline);\n    };\n    /**\n     * Do a quick line-level diff on both strings, then re-diff the parts for\n     * greater accuracy.\n     * This speedup can produce non-minimal diffs.\n     *\n     * @private\n     * @param {string} text1 Old string to be diffed.\n     * @param {string} text2 New string to be diffed.\n     * @param {number} deadline Time when the diff should be complete by.\n     * @returns {Diff[]} Array of diff tuples.\n     */\n    DiffMatchPatch.prototype.diff_lineMode_ = function (text1, text2, deadline) {\n        // Scan the text on a line-by-line basis first.\n        var a = this.diff_linesToChars_(text1, text2);\n        text1 = a.chars1;\n        text2 = a.chars2;\n        var linearray = a.lineArray;\n        var diffs = this.diff_main(text1, text2, false, deadline);\n        // Convert the diff back to original text.\n        this.diff_charsToLines_(diffs, linearray);\n        // Eliminate freak matches (e.g. blank lines)\n        this.diff_cleanupSemantic(diffs);\n        // Re-diff any replacement blocks, this time character-by-character.\n        // Add a dummy entry at the end.\n        diffs.push([DiffOperation.DIFF_EQUAL, ""]);\n        var pointer = 0;\n        var countDelete = 0;\n        var countInsert = 0;\n        var textDelete = "";\n        var textInsert = "";\n        while (pointer < diffs.length) {\n            switch (diffs[pointer][0]) {\n                case DiffOperation.DIFF_INSERT:\n                    countInsert++;\n                    textInsert += diffs[pointer][1];\n                    break;\n                case DiffOperation.DIFF_DELETE:\n                    countDelete++;\n                    textDelete += diffs[pointer][1];\n                    break;\n                case DiffOperation.DIFF_EQUAL:\n                    // Upon reaching an equality, check for prior redundancies.\n                    if (countDelete >= 1 && countInsert >= 1) {\n                        // Delete the offending records and add the merged ones.\n                        diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert);\n                        pointer = pointer - countDelete - countInsert;\n                        var subDiff = this.diff_main(textDelete, textInsert, false, deadline);\n                        for (var j = subDiff.length - 1; j >= 0; j--) {\n                            diffs.splice(pointer, 0, subDiff[j]);\n                        }\n                        pointer = pointer + subDiff.length;\n                    }\n                    countInsert = 0;\n                    countDelete = 0;\n                    textDelete = "";\n                    textInsert = "";\n                    break;\n            }\n            pointer++;\n        }\n        // Remove the dummy entry at the end.\n        diffs.pop();\n        return diffs;\n    };\n    /**\n     * Find the \'middle snake\' of a diff, split the problem in two\n     * and return the recursively constructed diff.\n     * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n     *\n     * @private\n     * @param {string} text1 Old string to be diffed.\n     * @param {string} text2 New string to be diffed.\n     * @param {number} deadline Time at which to bail if not yet complete.\n     * @returns {Diff[]} Array of diff tuples.\n     */\n    DiffMatchPatch.prototype.diff_bisect_ = function (text1, text2, deadline) {\n        // Cache the text lengths to prevent multiple calls.\n        var text1Length = text1.length;\n        var text2Length = text2.length;\n        var maxD = Math.ceil((text1Length + text2Length) / 2);\n        var vOffset = maxD;\n        var vLength = 2 * maxD;\n        var v1 = new Array(vLength);\n        var v2 = new Array(vLength);\n        // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n        // integers and undefined.\n        for (var x = 0; x < vLength; x++) {\n            v1[x] = -1;\n            v2[x] = -1;\n        }\n        v1[vOffset + 1] = 0;\n        v2[vOffset + 1] = 0;\n        var delta = text1Length - text2Length;\n        // If the total number of characters is odd, then the front path will collide\n        // with the reverse path.\n        var front = (delta % 2 !== 0);\n        // Offsets for start and end of k loop.\n        // Prevents mapping of space beyond the grid.\n        var k1Start = 0;\n        var k1End = 0;\n        var k2Start = 0;\n        var k2End = 0;\n        for (var d = 0; d < maxD; d++) {\n            // Bail out if deadline is reached.\n            if (Date.now() > deadline) {\n                break;\n            }\n            // Walk the front path one step.\n            for (var k1 = -d + k1Start; k1 <= d - k1End; k1 += 2) {\n                var k1Offset = vOffset + k1;\n                var x1 = void 0;\n                if (k1 === -d || (k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1])) {\n                    x1 = v1[k1Offset + 1];\n                }\n                else {\n                    x1 = v1[k1Offset - 1] + 1;\n                }\n                var y1 = x1 - k1;\n                while (x1 < text1Length\n                    && y1 < text2Length\n                    && text1.charAt(x1) === text2.charAt(y1)) {\n                    x1++;\n                    y1++;\n                }\n                v1[k1Offset] = x1;\n                if (x1 > text1Length) {\n                    // Ran off the right of the graph.\n                    k1End += 2;\n                }\n                else if (y1 > text2Length) {\n                    // Ran off the bottom of the graph.\n                    k1Start += 2;\n                }\n                else if (front) {\n                    var k2Offset = vOffset + delta - k1;\n                    if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n                        // Mirror x2 onto top-left coordinate system.\n                        var x2 = text1Length - v2[k2Offset];\n                        if (x1 >= x2) {\n                            // Overlap detected.\n                            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n                        }\n                    }\n                }\n            }\n            // Walk the reverse path one step.\n            for (var k2 = -d + k2Start; k2 <= d - k2End; k2 += 2) {\n                var k2Offset = vOffset + k2;\n                var x2 = void 0;\n                if (k2 === -d || (k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1])) {\n                    x2 = v2[k2Offset + 1];\n                }\n                else {\n                    x2 = v2[k2Offset - 1] + 1;\n                }\n                var y2 = x2 - k2;\n                while (x2 < text1Length\n                    && y2 < text2Length\n                    && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1)) {\n                    x2++;\n                    y2++;\n                }\n                v2[k2Offset] = x2;\n                if (x2 > text1Length) {\n                    // Ran off the left of the graph.\n                    k2End += 2;\n                }\n                else if (y2 > text2Length) {\n                    // Ran off the top of the graph.\n                    k2Start += 2;\n                }\n                else if (!front) {\n                    var k1Offset = vOffset + delta - k2;\n                    if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n                        var x1 = v1[k1Offset];\n                        var y1 = vOffset + x1 - k1Offset;\n                        // Mirror x2 onto top-left coordinate system.\n                        x2 = text1Length - x2;\n                        if (x1 >= x2) {\n                            // Overlap detected.\n                            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n                        }\n                    }\n                }\n            }\n        }\n        // Diff took too long and hit the deadline or\n        // number of diffs equals number of characters, no commonality at all.\n        return [\n            [DiffOperation.DIFF_DELETE, text1],\n            [DiffOperation.DIFF_INSERT, text2]\n        ];\n    };\n    /**\n     * Given the location of the \'middle snake\', split the diff in two parts\n     * and recurse.\n     *\n     * @private\n     * @param {string} text1 Old string to be diffed.\n     * @param {string} text2 New string to be diffed.\n     * @param {number} x Index of split point in text1.\n     * @param {number} y Index of split point in text2.\n     * @param {number} deadline Time at which to bail if not yet complete.\n     * @returns {Diff[]} Array of diff tuples.\n     */\n    DiffMatchPatch.prototype.diff_bisectSplit_ = function (text1, text2, x, y, deadline) {\n        var text1A = text1.substring(0, x);\n        var text2A = text2.substring(0, y);\n        var text1B = text1.substring(x);\n        var text2B = text2.substring(y);\n        // Compute both diffs serially.\n        var diffsA = this.diff_main(text1A, text2A, false, deadline);\n        var diffsB = this.diff_main(text1B, text2B, false, deadline);\n        return diffsA.concat(diffsB);\n    };\n    /**\n     * Split two texts into an array of strings. Reduce the texts to a string of\n     * hashes where each Unicode character represents one line.\n     *\n     * @private\n     * @param {string} text1 First string.\n     * @param {string} text2 Second string.\n     * @returns {{chars1: string, chars2: string, lineArray: string[]}}\n     * An object containing the encoded text1, the encoded text2 and\n     * the array of unique strings.\n     * The zeroth element of the array of unique strings is intentionally blank.\n     */\n    DiffMatchPatch.prototype.diff_linesToChars_ = function (text1, text2) {\n        var lineArray = []; // e.g. lineArray[4] == \'Hello\\n\'\n        var lineHash = {}; // e.g. lineHash[\'Hello\\n\'] == 4\n        // \'\\x00\' is a valid character, but various debuggers don\'t like it.\n        // So we\'ll insert a junk entry to avoid generating a null character.\n        lineArray[0] = "";\n        // Allocate 2/3rds of the space for text1, the rest for text2.\n        var chars1 = this.diff_linesToCharsMunge_(text1, lineArray, lineHash, 40000);\n        var chars2 = this.diff_linesToCharsMunge_(text2, lineArray, lineHash, 65535);\n        return { chars1: chars1, chars2: chars2, lineArray: lineArray };\n    };\n    /**\n     * Split a text into an array of strings. Reduce the texts to a string of\n     * hashes where each Unicode character represents one line.\n     * Modifies linearray and linehash through being a closure.\n     *\n     * @private\n     * @param {string} text String to encode.\n     * @param {string[]} lineArray Array of unique strings.\n     * @param {Record<string, number>} lineHash Line-hash pairs.\n     * @param {number} maxLines\n     * @returns {string} Encoded string.\n     */\n    DiffMatchPatch.prototype.diff_linesToCharsMunge_ = function (text, lineArray, lineHash, maxLines) {\n        var chars = "";\n        // Walk the text, pulling out a substring for each line.\n        // text.split(\'\\n\') would would temporarily double our memory footprint.\n        // Modifying text would create many large strings to garbage collect.\n        var lineStart = 0;\n        var lineEnd = -1;\n        // Keeping our own length variable is faster than looking it up.\n        var lineArrayLength = lineArray.length;\n        while (lineEnd < text.length - 1) {\n            lineEnd = text.indexOf("\\n", lineStart);\n            if (lineEnd === -1) {\n                lineEnd = text.length - 1;\n            }\n            var line = text.substring(lineStart, lineEnd + 1);\n            if (lineHash.hasOwnProperty\n                ? lineHash.hasOwnProperty(line)\n                : (lineHash[line] !== undefined)) {\n                chars += String.fromCharCode(lineHash[line]);\n            }\n            else {\n                if (lineArrayLength === maxLines) {\n                    // Bail out at 65535 because\n                    // String.fromCharCode(65536) == String.fromCharCode(0)\n                    line = text.substring(lineStart);\n                    lineEnd = text.length;\n                }\n                chars += String.fromCharCode(lineArrayLength);\n                lineHash[line] = lineArrayLength;\n                lineArray[lineArrayLength++] = line;\n            }\n            lineStart = lineEnd + 1;\n        }\n        return chars;\n    };\n    /**\n     * Rehydrate the text in a diff from a string of line hashes to real lines of\n     * text.\n     *\n     * @private\n     * @param {Diff[]} diffs Array of diff tuples.\n     * @param {string[]} lineArray Array of unique strings.\n     */\n    DiffMatchPatch.prototype.diff_charsToLines_ = function (diffs, lineArray) {\n        for (var i = 0; i < diffs.length; i++) {\n            var chars = diffs[i][1];\n            var text = [];\n            for (var j = 0; j < chars.length; j++) {\n                text[j] = lineArray[chars.charCodeAt(j)];\n            }\n            diffs[i][1] = text.join("");\n        }\n    };\n    /**\n     * Determine if the suffix of one string is the prefix of another.\n     *\n     * @private\n     * @param {string} text1 First string.\n     * @param {string} text2 Second string.\n     * @returns {number} The number of characters common to the end of the first\n     * string and the start of the second string.\n     */\n    DiffMatchPatch.prototype.diff_commonOverlap_ = function (text1, text2) {\n        // Cache the text lengths to prevent multiple calls.\n        var text1Length = text1.length;\n        var text2Length = text2.length;\n        // Eliminate the null case.\n        if (text1Length === 0 || text2Length === 0) {\n            return 0;\n        }\n        // Truncate the longer string.\n        if (text1Length > text2Length) {\n            text1 = text1.substring(text1Length - text2Length);\n        }\n        else if (text1Length < text2Length) {\n            text2 = text2.substring(0, text1Length);\n        }\n        var textLength = math.min(text1Length, text2Length);\n        // Quick check for the worst case.\n        if (text1 === text2) {\n            return textLength;\n        }\n        // Start by looking for a single character match\n        // and increase length until no match is found.\n        // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n        var best = 0;\n        var length = 1;\n        while (true) {\n            var pattern = text1.substring(textLength - length);\n            var found = text2.indexOf(pattern);\n            if (found === -1) {\n                return best;\n            }\n            length += found;\n            if (found === 0 ||\n                text1.substring(textLength - length) === text2.substring(0, length)) {\n                best = length;\n                length++;\n            }\n        }\n    };\n    /**\n     * Do the two texts share a substring which is at least half the length of the\n     * longer text?\n     * This speedup can produce non-minimal diffs.\n     *\n     * @private\n     * @param {string} text1 First string.\n     * @param {string} text2 Second string.\n     * @returns {(HalfMatchArray | null)} Five element Array, containing the prefix of\n     * text1, the suffix of text1, the prefix of text2, the suffix of\n     * text2 and the common middle. Or null if there was no match.\n     */\n    DiffMatchPatch.prototype.diff_halfMatch_ = function (text1, text2) {\n        if (this.diffTimeout <= 0) {\n            // Don\'t risk returning a non-optimal diff if we have unlimited time.\n            return null;\n        }\n        var longtext = text1.length > text2.length ? text1 : text2;\n        var shorttext = text1.length > text2.length ? text2 : text1;\n        if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n            return null; // Pointless.\n        }\n        // First check if the second quarter is the seed for a half-match.\n        var hm1 = this.diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n        // Check again based on the third quarter.\n        var hm2 = this.diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n        var hm;\n        if (!hm1 && !hm2) {\n            return null;\n        }\n        else if (!hm2) {\n            hm = hm1;\n        }\n        else if (!hm1) {\n            hm = hm2;\n        }\n        else {\n            // Both matched. Select the longest.\n            hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n        }\n        // A half-match was found, sort out the return data.\n        var text1A;\n        var text1B;\n        var text2A;\n        var text2B;\n        var midCommon = hm[4];\n        if (text1.length > text2.length) {\n            text1A = hm[0];\n            text1B = hm[1];\n            text2A = hm[2];\n            text2B = hm[3];\n        }\n        else {\n            text2A = hm[0];\n            text2B = hm[1];\n            text1A = hm[2];\n            text1B = hm[3];\n        }\n        return [text1A, text1B, text2A, text2B, midCommon];\n    };\n    /**\n     * Does a substring of shorttext exist within longtext such that the substring\n     * is at least half the length of longtext?\n     * Closure, but does not reference any external variables.\n     *\n     * @private\n     * @param {string} longtext Longer string.\n     * @param {string} shorttext Shorter string.\n     * @param {number} i Start index of quarter length substring within longtext.\n     * @returns {(HalfMatchArray | null)} Five element Array, containing the prefix of\n     * longtext, the suffix of longtext, the prefix of shorttext, the suffix\n     * of shorttext and the common middle. Or null if there was no match.\n     */\n    DiffMatchPatch.prototype.diff_halfMatchI_ = function (longtext, shorttext, i) {\n        // Start with a 1/4 length substring at position i as a seed.\n        var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n        var bestCommon = "";\n        var bestLongtextA;\n        var bestLongtextB;\n        var bestShorttextA;\n        var bestShorttextB;\n        // Initial.\n        var j = shorttext.indexOf(seed, 0);\n        while (j !== -1) {\n            var prefixLength = this.diff_commonPrefix(longtext.substring(i), shorttext.substring(j));\n            var suffixLength = this.diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n            if (bestCommon.length < suffixLength + prefixLength) {\n                bestCommon = shorttext.substring(j - suffixLength, j)\n                    + shorttext.substring(j, j + prefixLength);\n                bestLongtextA = longtext.substring(0, i - suffixLength);\n                bestLongtextB = longtext.substring(i + prefixLength);\n                bestShorttextA = shorttext.substring(0, j - suffixLength);\n                bestShorttextB = shorttext.substring(j + prefixLength);\n            }\n            // Step.\n            j = shorttext.indexOf(seed, j + 1);\n        }\n        if (bestCommon.length * 2 >= longtext.length) {\n            return [\n                bestLongtextA,\n                bestLongtextB,\n                bestShorttextA,\n                bestShorttextB,\n                bestCommon\n            ];\n        }\n        return null;\n    };\n    /**\n     * Given two strings, compute a score representing whether the internal\n     * boundary falls on logical boundaries.\n     * Scores range from 6 (best) to 0 (worst).\n     * Closure, but does not reference any external variables.\n     *\n     * @private\n     * @param {string} one First string.\n     * @param {string} two Second string.\n     * @returns {number} The score.\n     */\n    DiffMatchPatch.prototype.diff_cleanupSemanticScore_ = function (one, two) {\n        if (!one || !two) {\n            // Edges are the best.\n            return 6;\n        }\n        // Each port of this function behaves slightly differently due to\n        // subtle differences in each language\'s definition of things like\n        // \'whitespace\'. Since this function\'s purpose is largely cosmetic,\n        // the choice has been made to use each language\'s native features\n        // rather than force total conformity.\n        var char1 = one.charAt(one.length - 1);\n        var char2 = two.charAt(0);\n        var nonAlphaNumeric1 = char1.match(NON_ALPHA_NUMERIC_REGEX);\n        var nonAlphaNumeric2 = char2.match(NON_ALPHA_NUMERIC_REGEX);\n        var whitespace1 = nonAlphaNumeric1 && char1.match(WHITESPACE_REGEX);\n        var whitespace2 = nonAlphaNumeric2 && char2.match(WHITESPACE_REGEX);\n        var lineBreak1 = whitespace1 && char1.match(LINEBREAK_REGEX);\n        var lineBreak2 = whitespace2 && char2.match(LINEBREAK_REGEX);\n        var blankLine1 = lineBreak1 && one.match(BLANKLINE_END_REGEX);\n        var blankLine2 = lineBreak2 && two.match(BLANKLINE_START_REGEX);\n        if (blankLine1 || blankLine2) {\n            // Five points for blank lines.\n            return 5;\n        }\n        else if (lineBreak1 || lineBreak2) {\n            // Four points for line breaks.\n            return 4;\n        }\n        else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n            // Three points for end of sentences.\n            return 3;\n        }\n        else if (whitespace1 || whitespace2) {\n            // Two points for whitespace.\n            return 2;\n        }\n        else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n            // One point for non-alphanumeric.\n            return 1;\n        }\n        return 0;\n    };\n    //#endregion DIFF FUNCTIONS (private)\n    //#region MATCH FUNCTIONS (private)\n    /**\n     * Locate the best instance of \'pattern\' in \'text\' near \'loc\' using the\n     * Bitap algorithm.\n     *\n     * @private\n     * @param {string} text The text to search.\n     * @param {string} pattern The pattern to search for.\n     * @param {number} loc The location to search around.\n     * @returns {number} Best match index or -1.\n     */\n    DiffMatchPatch.prototype.match_bitap_ = function (text, pattern, loc) {\n        if (pattern.length > this.matchMaxBits) {\n            throw new Error("Pattern too long for this browser");\n        }\n        // Initialize the alphabet.\n        var s = this.match_alphabet_(pattern);\n        // Highest score beyond which we give up.\n        var scoreThreshold = this.matchThreshold;\n        // Is there a nearby exact match? (speedup)\n        var bestLoc = text.indexOf(pattern, loc);\n        if (bestLoc !== -1) {\n            scoreThreshold = math.min(this.match_bitapScore_(0, bestLoc, pattern, loc), scoreThreshold);\n            // What about in the other direction? (speedup)\n            bestLoc = text.lastIndexOf(pattern, loc + pattern.length);\n            if (bestLoc !== -1) {\n                scoreThreshold = math.min(this.match_bitapScore_(0, bestLoc, pattern, loc), scoreThreshold);\n            }\n        }\n        // Initialize the bit arrays.\n        var matchmask = 1 << (pattern.length - 1);\n        bestLoc = -1;\n        var binMin;\n        var binMid;\n        var binMax = pattern.length + text.length;\n        var lastRD;\n        for (var d = 0; d < pattern.length; d++) {\n            // Scan for the best match; each iteration allows for one more error.\n            // Run a binary search to determine how far from \'loc\' we can stray at this\n            // error level.\n            binMin = 0;\n            binMid = binMax;\n            while (binMin < binMid) {\n                if (this.match_bitapScore_(d, loc + binMid, pattern, loc) <= scoreThreshold) {\n                    binMin = binMid;\n                }\n                else {\n                    binMax = binMid;\n                }\n                binMid = Math.floor((binMax - binMin) / 2 + binMin);\n            }\n            // Use the result from this iteration as the maximum for the next.\n            binMax = binMid;\n            var start = math.max(1, loc - binMid + 1);\n            var finish = math.min(loc + binMid, text.length) + pattern.length;\n            var rd = Array(finish + 2);\n            rd[finish + 1] = (1 << d) - 1;\n            for (var j = finish; j >= start; j--) {\n                // The alphabet (s) is a sparse hash, so the following line generates\n                // warnings.\n                var charMatch = s[text.charAt(j - 1)];\n                if (d === 0) {\n                    // First pass: exact match.\n                    rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n                }\n                else {\n                    // Subsequent passes: fuzzy match.\n                    rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                        (((lastRD[j + 1] | lastRD[j]) << 1) | 1) |\n                        lastRD[j + 1];\n                }\n                if (rd[j] & matchmask) {\n                    var score = this.match_bitapScore_(d, j - 1, pattern, loc);\n                    // This match will almost certainly be better than any existing match.\n                    // But check anyway.\n                    if (score <= scoreThreshold) {\n                        // Told you so.\n                        scoreThreshold = score;\n                        bestLoc = j - 1;\n                        if (bestLoc > loc) {\n                            // When passing loc, don\'t exceed our current distance from loc.\n                            start = math.max(1, 2 * loc - bestLoc);\n                        }\n                        else {\n                            // Already passed loc, downhill from here on in.\n                            break;\n                        }\n                    }\n                }\n            }\n            // No hope for a (better) match at greater error levels.\n            if (this.match_bitapScore_(d + 1, loc, pattern, loc) > scoreThreshold) {\n                break;\n            }\n            lastRD = rd;\n        }\n        return bestLoc;\n    };\n    /**\n     * Compute and return the score for a match with e errors and x location.\n     * Accesses loc and pattern through being a closure.\n     *\n     * @private\n     * @param {number} e Number of errors in match.\n     * @param {number} x Location of match.\n     * @param {string} pattern The pattern to search for.\n     * @param {number} loc The location to search around.\n     * @returns {number} Overall score for match (0.0 = good, 1.0 = bad).\n     */\n    DiffMatchPatch.prototype.match_bitapScore_ = function (e, x, pattern, loc) {\n        var accuracy = e / pattern.length;\n        var proximity = Math.abs(loc - x);\n        if (!this.matchDistance) {\n            // Dodge divide by zero error.\n            return proximity ? 1.0 : accuracy;\n        }\n        return accuracy + (proximity / this.matchDistance);\n    };\n    /**\n     * Initialize the alphabet for the Bitap algorithm.\n     *\n     * @private\n     * @param {string} pattern The text to encode.\n     * @returns {Record<string, number>} Hash of character locations.\n     */\n    DiffMatchPatch.prototype.match_alphabet_ = function (pattern) {\n        var s = {};\n        for (var i = 0; i < pattern.length; i++) {\n            s[pattern.charAt(i)] = 0;\n        }\n        for (var i = 0; i < pattern.length; i++) {\n            s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n        }\n        return s;\n    };\n    //#endregion MATCH FUNCTIONS (private)\n    //#region PATCH FUNCTIONS (private)\n    /**\n     * Increase the context until it is unique,\n     * but don\'t let the pattern expand beyond Match_MaxBits.\n     *\n     * @private\n     * @param {PatchObject} patch The patch to grow.\n     * @param {string} text Source text.\n     */\n    DiffMatchPatch.prototype.patch_addContext_ = function (patch, text) {\n        if (text.length === 0) {\n            return;\n        }\n        if (patch.start2 == null) {\n            throw Error("patch not initialized");\n        }\n        var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n        var padding = 0;\n        // Look for the first and last matches of pattern in text. If two different\n        // matches are found, increase the pattern length.\n        while (text.indexOf(pattern) !== text.lastIndexOf(pattern) &&\n            pattern.length < (this.matchMaxBits - this.patchMargin - this.patchMargin)) {\n            padding += this.patchMargin;\n            pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n        }\n        // Add one chunk for good luck.\n        padding += this.patchMargin;\n        // Add the prefix.\n        var prefix = text.substring(patch.start2 - padding, patch.start2);\n        if (prefix) {\n            patch.diffs.unshift([DiffOperation.DIFF_EQUAL, prefix]);\n        }\n        // Add the suffix.\n        var suffix = text.substring(patch.start2 + patch.length1, patch.start2 + patch.length1 + padding);\n        if (suffix) {\n            patch.diffs.push([DiffOperation.DIFF_EQUAL, suffix]);\n        }\n        // Roll back the start points.\n        patch.start1 -= prefix.length;\n        patch.start2 -= prefix.length;\n        // Extend the lengths.\n        patch.length1 += prefix.length + suffix.length;\n        patch.length2 += prefix.length + suffix.length;\n    };\n    return DiffMatchPatch;\n}());\n\n\n// CONCATENATED MODULE: ./node_modules/diff-match-patch-typescript/dist/es/core/index.js\n\n\n\n// CONCATENATED MODULE: ./node_modules/diff-match-patch-typescript/dist/es/index.js\n/* concated harmony reexport DiffMatchPatch */__webpack_require__.d(__webpack_exports__, "DiffMatchPatch", function() { return DiffMatchPatch_DiffMatchPatch; });\n/* concated harmony reexport PatchObject */__webpack_require__.d(__webpack_exports__, "PatchObject", function() { return PatchObject_PatchObject; });\n/* concated harmony reexport DiffOperation */__webpack_require__.d(__webpack_exports__, "DiffOperation", function() { return DiffOperation; });\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///820\n')}});